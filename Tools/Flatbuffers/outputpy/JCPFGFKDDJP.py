# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JCPFGFKDDJP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJCPFGFKDDJP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JCPFGFKDDJP()
        x.Init(buf, n + offset)
        return x

    # JCPFGFKDDJP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JCPFGFKDDJP
    def NCIKNCJLFBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def OCCGFNHHECN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def JKAAFPNGHGN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def MCJNHPMBPIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def MGJKFKDICGC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JCPFGFKDDJP
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def JCPFGFKDDJPStart(builder): builder.StartObject(8)
def JCPFGFKDDJPAddNCIKNCJLFBI(builder, NCIKNCJLFBI): builder.PrependUint32Slot(0, NCIKNCJLFBI, 0)
def JCPFGFKDDJPAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def JCPFGFKDDJPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(2, BBPHAPFBFHK, 0)
def JCPFGFKDDJPAddOCCGFNHHECN(builder, OCCGFNHHECN): builder.PrependUint32Slot(3, OCCGFNHHECN, 0)
def JCPFGFKDDJPAddJKAAFPNGHGN(builder, JKAAFPNGHGN): builder.PrependUint32Slot(4, JKAAFPNGHGN, 0)
def JCPFGFKDDJPAddMCJNHPMBPIJ(builder, MCJNHPMBPIJ): builder.PrependInt32Slot(5, MCJNHPMBPIJ, 0)
def JCPFGFKDDJPAddMGJKFKDICGC(builder, MGJKFKDICGC): builder.PrependInt32Slot(6, MGJKFKDICGC, 0)
def JCPFGFKDDJPAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(7, OFMGALJGDAO, 0)
def JCPFGFKDDJPEnd(builder): return builder.EndObject()
