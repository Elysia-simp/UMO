# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HGDLMDMAIHK(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHGDLMDMAIHK(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HGDLMDMAIHK()
        x.Init(buf, n + offset)
        return x

    # HGDLMDMAIHK
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HGDLMDMAIHK
    def ODHNEFLOILP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def ECEFNALDNGJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def DDCHBAJGIJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def PCIIMOPFEMG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def GGKNGDGKMIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def ONCBLMJHMKB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGDLMDMAIHK
    def LGMELGKMCBL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HGDLMDMAIHK
    def LGMELGKMCBLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HGDLMDMAIHK
    def DGGPEONPMKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HGDLMDMAIHKStart(builder): builder.StartObject(8)
def HGDLMDMAIHKAddODHNEFLOILP(builder, ODHNEFLOILP): builder.PrependUint32Slot(0, ODHNEFLOILP, 0)
def HGDLMDMAIHKAddECEFNALDNGJ(builder, ECEFNALDNGJ): builder.PrependInt32Slot(1, ECEFNALDNGJ, 0)
def HGDLMDMAIHKAddDDCHBAJGIJL(builder, DDCHBAJGIJL): builder.PrependInt32Slot(2, DDCHBAJGIJL, 0)
def HGDLMDMAIHKAddPCIIMOPFEMG(builder, PCIIMOPFEMG): builder.PrependInt32Slot(3, PCIIMOPFEMG, 0)
def HGDLMDMAIHKAddGGKNGDGKMIJ(builder, GGKNGDGKMIJ): builder.PrependInt32Slot(4, GGKNGDGKMIJ, 0)
def HGDLMDMAIHKAddONCBLMJHMKB(builder, ONCBLMJHMKB): builder.PrependUint32Slot(5, ONCBLMJHMKB, 0)
def HGDLMDMAIHKAddLGMELGKMCBL(builder, LGMELGKMCBL): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LGMELGKMCBL), 0)
def HGDLMDMAIHKStartLGMELGKMCBLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HGDLMDMAIHKAddDGGPEONPMKA(builder, DGGPEONPMKA): builder.PrependInt32Slot(7, DGGPEONPMKA, 0)
def HGDLMDMAIHKEnd(builder): return builder.EndObject()
