# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ABHNDHFIFLB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsABHNDHFIFLB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ABHNDHFIFLB()
        x.Init(buf, n + offset)
        return x

    # ABHNDHFIFLB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ABHNDHFIFLB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def OELANBBBMLK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def JHAMBKOEJPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def MJHPFNPCLBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ABHNDHFIFLB
    def JDKBBEIBJBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ABHNDHFIFLBStart(builder): builder.StartObject(12)
def ABHNDHFIFLBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def ABHNDHFIFLBAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def ABHNDHFIFLBAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def ABHNDHFIFLBAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(3, LPJPOOHJKAE, 0)
def ABHNDHFIFLBAddOELANBBBMLK(builder, OELANBBBMLK): builder.PrependUint32Slot(4, OELANBBBMLK, 0)
def ABHNDHFIFLBAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependUint32Slot(5, LMLNKHMPOIG, 0)
def ABHNDHFIFLBAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependUint32Slot(6, HOENDPOGFIO, 0)
def ABHNDHFIFLBAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(7, ADCLAGBHDBC, 0)
def ABHNDHFIFLBAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(8, ODBPKGJPLMD, 0)
def ABHNDHFIFLBAddJHAMBKOEJPL(builder, JHAMBKOEJPL): builder.PrependInt32Slot(9, JHAMBKOEJPL, 0)
def ABHNDHFIFLBAddMJHPFNPCLBD(builder, MJHPFNPCLBD): builder.PrependInt32Slot(10, MJHPFNPCLBD, 0)
def ABHNDHFIFLBAddJDKBBEIBJBD(builder, JDKBBEIBJBD): builder.PrependInt32Slot(11, JDKBBEIBJBD, 0)
def ABHNDHFIFLBEnd(builder): return builder.EndObject()
