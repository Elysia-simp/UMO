# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NACHIDBHKDO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNACHIDBHKDO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NACHIDBHKDO()
        x.Init(buf, n + offset)
        return x

    # NACHIDBHKDO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NACHIDBHKDO
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def FIDHINJIOAD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def ECFLMBOLCAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def DHFDNBDDLLO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def OADMJNEOKLC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def MIBINPGCPPK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def GLIIHLOLPEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def KMEODDMBHHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def JBAHJKKJPEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def ECLKGKLMLBK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def EBBBDFADIPN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NACHIDBHKDO
    def FKLNFLAFBDH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NACHIDBHKDOStart(builder): builder.StartObject(16)
def NACHIDBHKDOAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def NACHIDBHKDOAddFIDHINJIOAD(builder, FIDHINJIOAD): builder.PrependUint32Slot(1, FIDHINJIOAD, 0)
def NACHIDBHKDOAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependUint32Slot(2, HOENDPOGFIO, 0)
def NACHIDBHKDOAddECFLMBOLCAA(builder, ECFLMBOLCAA): builder.PrependUint32Slot(3, ECFLMBOLCAA, 0)
def NACHIDBHKDOAddDHFDNBDDLLO(builder, DHFDNBDDLLO): builder.PrependUint32Slot(4, DHFDNBDDLLO, 0)
def NACHIDBHKDOAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(5, AEAKMMJLLDK, 0)
def NACHIDBHKDOAddOADMJNEOKLC(builder, OADMJNEOKLC): builder.PrependUint32Slot(6, OADMJNEOKLC, 0)
def NACHIDBHKDOAddMIBINPGCPPK(builder, MIBINPGCPPK): builder.PrependUint32Slot(7, MIBINPGCPPK, 0)
def NACHIDBHKDOAddGLIIHLOLPEF(builder, GLIIHLOLPEF): builder.PrependUint32Slot(8, GLIIHLOLPEF, 0)
def NACHIDBHKDOAddKMEODDMBHHE(builder, KMEODDMBHHE): builder.PrependUint32Slot(9, KMEODDMBHHE, 0)
def NACHIDBHKDOAddJBAHJKKJPEG(builder, JBAHJKKJPEG): builder.PrependUint32Slot(10, JBAHJKKJPEG, 0)
def NACHIDBHKDOAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(11, ADCLAGBHDBC, 0)
def NACHIDBHKDOAddECLKGKLMLBK(builder, ECLKGKLMLBK): builder.PrependUint32Slot(12, ECLKGKLMLBK, 0)
def NACHIDBHKDOAddEBBBDFADIPN(builder, EBBBDFADIPN): builder.PrependUint32Slot(13, EBBBDFADIPN, 0)
def NACHIDBHKDOAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependUint32Slot(14, OFMGALJGDAO, 0)
def NACHIDBHKDOAddFKLNFLAFBDH(builder, FKLNFLAFBDH): builder.PrependInt32Slot(15, FKLNFLAFBDH, 0)
def NACHIDBHKDOEnd(builder): return builder.EndObject()
