# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MAJJICHLHLP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMAJJICHLHLP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MAJJICHLHLP()
        x.Init(buf, n + offset)
        return x

    # MAJJICHLHLP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MAJJICHLHLP
    def OEBLGFLPMNE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MAJJICHLHLP
    def BJELMJJFMBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MAJJICHLHLP
    def IHNCJBFCAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MAJJICHLHLP
    def IHNCJBFCAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MAJJICHLHLPStart(builder): builder.StartObject(3)
def MAJJICHLHLPAddOEBLGFLPMNE(builder, OEBLGFLPMNE): builder.PrependInt32Slot(0, OEBLGFLPMNE, 0)
def MAJJICHLHLPAddBJELMJJFMBI(builder, BJELMJJFMBI): builder.PrependInt32Slot(1, BJELMJJFMBI, 0)
def MAJJICHLHLPAddIHNCJBFCAAI(builder, IHNCJBFCAAI): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IHNCJBFCAAI), 0)
def MAJJICHLHLPStartIHNCJBFCAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MAJJICHLHLPEnd(builder): return builder.EndObject()
