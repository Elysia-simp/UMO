# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EECGFGECDBJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEECGFGECDBJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EECGFGECDBJ()
        x.Init(buf, n + offset)
        return x

    # EECGFGECDBJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EECGFGECDBJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def FIDHINJIOAD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def ECFLMBOLCAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def MKLGLNCCAJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def DHFDNBDDLLO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def GLIIHLOLPEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EECGFGECDBJ
    def KMEODDMBHHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def EECGFGECDBJStart(builder): builder.StartObject(9)
def EECGFGECDBJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def EECGFGECDBJAddFIDHINJIOAD(builder, FIDHINJIOAD): builder.PrependUint32Slot(1, FIDHINJIOAD, 0)
def EECGFGECDBJAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependUint32Slot(2, HOENDPOGFIO, 0)
def EECGFGECDBJAddECFLMBOLCAA(builder, ECFLMBOLCAA): builder.PrependUint32Slot(3, ECFLMBOLCAA, 0)
def EECGFGECDBJAddMKLGLNCCAJF(builder, MKLGLNCCAJF): builder.PrependUint32Slot(4, MKLGLNCCAJF, 0)
def EECGFGECDBJAddDHFDNBDDLLO(builder, DHFDNBDDLLO): builder.PrependUint32Slot(5, DHFDNBDDLLO, 0)
def EECGFGECDBJAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(6, AEAKMMJLLDK, 0)
def EECGFGECDBJAddGLIIHLOLPEF(builder, GLIIHLOLPEF): builder.PrependUint32Slot(7, GLIIHLOLPEF, 0)
def EECGFGECDBJAddKMEODDMBHHE(builder, KMEODDMBHHE): builder.PrependUint32Slot(8, KMEODDMBHHE, 0)
def EECGFGECDBJEnd(builder): return builder.EndObject()
