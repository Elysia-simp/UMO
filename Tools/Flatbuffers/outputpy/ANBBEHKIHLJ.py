# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ANBBEHKIHLJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsANBBEHKIHLJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ANBBEHKIHLJ()
        x.Init(buf, n + offset)
        return x

    # ANBBEHKIHLJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ANBBEHKIHLJ
    def OAHBCGIOJFA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EDGCKDLNLNN import EDGCKDLNLNN
            obj = EDGCKDLNLNN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ANBBEHKIHLJ
    def OAHBCGIOJFALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ANBBEHKIHLJ
    def KOMCNJPMIHC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LLGJODEDLOA import LLGJODEDLOA
            obj = LLGJODEDLOA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ANBBEHKIHLJ
    def KOMCNJPMIHCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ANBBEHKIHLJ
    def LCPGFAHAGPL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DJABNGNLIHM import DJABNGNLIHM
            obj = DJABNGNLIHM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ANBBEHKIHLJ
    def LCPGFAHAGPLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ANBBEHKIHLJ
    def HIHGBEKDKOL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OHCNALAONKF import OHCNALAONKF
            obj = OHCNALAONKF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ANBBEHKIHLJ
    def HIHGBEKDKOLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ANBBEHKIHLJStart(builder): builder.StartObject(4)
def ANBBEHKIHLJAddOAHBCGIOJFA(builder, OAHBCGIOJFA): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OAHBCGIOJFA), 0)
def ANBBEHKIHLJStartOAHBCGIOJFAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ANBBEHKIHLJAddKOMCNJPMIHC(builder, KOMCNJPMIHC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KOMCNJPMIHC), 0)
def ANBBEHKIHLJStartKOMCNJPMIHCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ANBBEHKIHLJAddLCPGFAHAGPL(builder, LCPGFAHAGPL): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LCPGFAHAGPL), 0)
def ANBBEHKIHLJStartLCPGFAHAGPLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ANBBEHKIHLJAddHIHGBEKDKOL(builder, HIHGBEKDKOL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(HIHGBEKDKOL), 0)
def ANBBEHKIHLJStartHIHGBEKDKOLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ANBBEHKIHLJEnd(builder): return builder.EndObject()
