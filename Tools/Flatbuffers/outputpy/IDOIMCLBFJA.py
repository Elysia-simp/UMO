# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class IDOIMCLBFJA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIDOIMCLBFJA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IDOIMCLBFJA()
        x.Init(buf, n + offset)
        return x

    # IDOIMCLBFJA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IDOIMCLBFJA
    def JKDAMKCJMLD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IDOIMCLBFJA
    def DJBJGNJAHHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def IDOIMCLBFJAStart(builder): builder.StartObject(2)
def IDOIMCLBFJAAddJKDAMKCJMLD(builder, JKDAMKCJMLD): builder.PrependUint32Slot(0, JKDAMKCJMLD, 0)
def IDOIMCLBFJAAddDJBJGNJAHHP(builder, DJBJGNJAHHP): builder.PrependUint32Slot(1, DJBJGNJAHHP, 0)
def IDOIMCLBFJAEnd(builder): return builder.EndObject()
