# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MNOGIDIBJHJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMNOGIDIBJHJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MNOGIDIBJHJ()
        x.Init(buf, n + offset)
        return x

    # MNOGIDIBJHJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MNOGIDIBJHJ
    def LNPFMOAGCJJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MNOGIDIBJHJ
    def FFONHAEBCEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MNOGIDIBJHJ
    def PAPMBEBHHIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def MNOGIDIBJHJStart(builder): builder.StartObject(3)
def MNOGIDIBJHJAddLNPFMOAGCJJ(builder, LNPFMOAGCJJ): builder.PrependInt32Slot(0, LNPFMOAGCJJ, 0)
def MNOGIDIBJHJAddFFONHAEBCEG(builder, FFONHAEBCEG): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FFONHAEBCEG), 0)
def MNOGIDIBJHJAddPAPMBEBHHIG(builder, PAPMBEBHHIG): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(PAPMBEBHHIG), 0)
def MNOGIDIBJHJEnd(builder): return builder.EndObject()
