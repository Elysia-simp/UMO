# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GLMHPNJHOIK(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGLMHPNJHOIK(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GLMHPNJHOIK()
        x.Init(buf, n + offset)
        return x

    # GLMHPNJHOIK
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GLMHPNJHOIK
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def GJEJFAJHBME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def OPEDKFOOFMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def DGPJIDBAOLO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def MHFDKEEEDEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def FHLKEIBOFNN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def EGEFMJCLNDM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def KDPKPOBKKMJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def GKLHNNBMGKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def NAGPKLGDNDA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def DMOFFJMMAFH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def LDLOHEJKEKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def BEDPEDGJEBE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def BNDEBMLCMNB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def IHACPFEKKHJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def DDMBKEJNPJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def BJNPAEKAFND(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def ONBMIJLCFBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def BIKHPIFLIPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def BIHCGDIPDHM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def DPLDPCPHPGK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def PEFIAHNGPDI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def PJLBCLAAJEA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def IJMEOOJHNCG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def NBECKADKFAL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def LDFCDBOALOL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def KKJFKKJHCAI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def HIIOMBJHLJO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def MDECMDGBNEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def JMNNJABAGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def IPOAPJMECLN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def NACDNMJHPOI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def KOLACJIMMPA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def KPIGACCFPFE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def DACNLPDCJGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GLMHPNJHOIK
    def NLAHBMFCPMP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GLMHPNJHOIKStart(builder): builder.StartObject(39)
def GLMHPNJHOIKAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def GLMHPNJHOIKAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(1, ODBPKGJPLMD, 0)
def GLMHPNJHOIKAddGJEJFAJHBME(builder, GJEJFAJHBME): builder.PrependUint32Slot(2, GJEJFAJHBME, 0)
def GLMHPNJHOIKAddOPEDKFOOFMO(builder, OPEDKFOOFMO): builder.PrependUint32Slot(3, OPEDKFOOFMO, 0)
def GLMHPNJHOIKAddDGPJIDBAOLO(builder, DGPJIDBAOLO): builder.PrependUint32Slot(4, DGPJIDBAOLO, 0)
def GLMHPNJHOIKAddMHFDKEEEDEL(builder, MHFDKEEEDEL): builder.PrependUint32Slot(5, MHFDKEEEDEL, 0)
def GLMHPNJHOIKAddFHLKEIBOFNN(builder, FHLKEIBOFNN): builder.PrependUint32Slot(6, FHLKEIBOFNN, 0)
def GLMHPNJHOIKAddEGEFMJCLNDM(builder, EGEFMJCLNDM): builder.PrependUint32Slot(7, EGEFMJCLNDM, 0)
def GLMHPNJHOIKAddKDPKPOBKKMJ(builder, KDPKPOBKKMJ): builder.PrependUint32Slot(8, KDPKPOBKKMJ, 0)
def GLMHPNJHOIKAddGKLHNNBMGKH(builder, GKLHNNBMGKH): builder.PrependUint32Slot(9, GKLHNNBMGKH, 0)
def GLMHPNJHOIKAddNAGPKLGDNDA(builder, NAGPKLGDNDA): builder.PrependUint32Slot(10, NAGPKLGDNDA, 0)
def GLMHPNJHOIKAddDMOFFJMMAFH(builder, DMOFFJMMAFH): builder.PrependUint32Slot(11, DMOFFJMMAFH, 0)
def GLMHPNJHOIKAddLDLOHEJKEKH(builder, LDLOHEJKEKH): builder.PrependUint32Slot(12, LDLOHEJKEKH, 0)
def GLMHPNJHOIKAddBEDPEDGJEBE(builder, BEDPEDGJEBE): builder.PrependUint32Slot(13, BEDPEDGJEBE, 0)
def GLMHPNJHOIKAddBNDEBMLCMNB(builder, BNDEBMLCMNB): builder.PrependUint32Slot(14, BNDEBMLCMNB, 0)
def GLMHPNJHOIKAddIHACPFEKKHJ(builder, IHACPFEKKHJ): builder.PrependUint32Slot(15, IHACPFEKKHJ, 0)
def GLMHPNJHOIKAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(16, CFLMCGOJJJD, 0)
def GLMHPNJHOIKAddDDMBKEJNPJK(builder, DDMBKEJNPJK): builder.PrependUint32Slot(17, DDMBKEJNPJK, 0)
def GLMHPNJHOIKAddBJNPAEKAFND(builder, BJNPAEKAFND): builder.PrependUint32Slot(18, BJNPAEKAFND, 0)
def GLMHPNJHOIKAddONBMIJLCFBD(builder, ONBMIJLCFBD): builder.PrependUint32Slot(19, ONBMIJLCFBD, 0)
def GLMHPNJHOIKAddBIKHPIFLIPL(builder, BIKHPIFLIPL): builder.PrependUint32Slot(20, BIKHPIFLIPL, 0)
def GLMHPNJHOIKAddBIHCGDIPDHM(builder, BIHCGDIPDHM): builder.PrependUint32Slot(21, BIHCGDIPDHM, 0)
def GLMHPNJHOIKAddDPLDPCPHPGK(builder, DPLDPCPHPGK): builder.PrependUint32Slot(22, DPLDPCPHPGK, 0)
def GLMHPNJHOIKAddPEFIAHNGPDI(builder, PEFIAHNGPDI): builder.PrependUint32Slot(23, PEFIAHNGPDI, 0)
def GLMHPNJHOIKAddPJLBCLAAJEA(builder, PJLBCLAAJEA): builder.PrependUint32Slot(24, PJLBCLAAJEA, 0)
def GLMHPNJHOIKAddIJMEOOJHNCG(builder, IJMEOOJHNCG): builder.PrependUint32Slot(25, IJMEOOJHNCG, 0)
def GLMHPNJHOIKAddNBECKADKFAL(builder, NBECKADKFAL): builder.PrependUint32Slot(26, NBECKADKFAL, 0)
def GLMHPNJHOIKAddLDFCDBOALOL(builder, LDFCDBOALOL): builder.PrependUint32Slot(27, LDFCDBOALOL, 0)
def GLMHPNJHOIKAddKKJFKKJHCAI(builder, KKJFKKJHCAI): builder.PrependUint32Slot(28, KKJFKKJHCAI, 0)
def GLMHPNJHOIKAddHIIOMBJHLJO(builder, HIIOMBJHLJO): builder.PrependUint32Slot(29, HIIOMBJHLJO, 0)
def GLMHPNJHOIKAddMDECMDGBNEE(builder, MDECMDGBNEE): builder.PrependUint32Slot(30, MDECMDGBNEE, 0)
def GLMHPNJHOIKAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(31, OFMGALJGDAO, 0)
def GLMHPNJHOIKAddJMNNJABAGLE(builder, JMNNJABAGLE): builder.PrependInt32Slot(32, JMNNJABAGLE, 0)
def GLMHPNJHOIKAddIPOAPJMECLN(builder, IPOAPJMECLN): builder.PrependUint32Slot(33, IPOAPJMECLN, 0)
def GLMHPNJHOIKAddNACDNMJHPOI(builder, NACDNMJHPOI): builder.PrependUint32Slot(34, NACDNMJHPOI, 0)
def GLMHPNJHOIKAddKOLACJIMMPA(builder, KOLACJIMMPA): builder.PrependInt32Slot(35, KOLACJIMMPA, 0)
def GLMHPNJHOIKAddKPIGACCFPFE(builder, KPIGACCFPFE): builder.PrependUint32Slot(36, KPIGACCFPFE, 0)
def GLMHPNJHOIKAddDACNLPDCJGB(builder, DACNLPDCJGB): builder.PrependUint32Slot(37, DACNLPDCJGB, 0)
def GLMHPNJHOIKAddNLAHBMFCPMP(builder, NLAHBMFCPMP): builder.PrependUint32Slot(38, NLAHBMFCPMP, 0)
def GLMHPNJHOIKEnd(builder): return builder.EndObject()
