# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CBMILEEGEPN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCBMILEEGEPN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CBMILEEGEPN()
        x.Init(buf, n + offset)
        return x

    # CBMILEEGEPN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CBMILEEGEPN
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def GKNBEHEMMFH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def DNMMADEPEKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def CEPBOFBJBKB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def IHPEJOJEPFM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CBMILEEGEPN
    def BBDGLCFCBFL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CBMILEEGEPNStart(builder): builder.StartObject(7)
def CBMILEEGEPNAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def CBMILEEGEPNAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def CBMILEEGEPNAddGKNBEHEMMFH(builder, GKNBEHEMMFH): builder.PrependInt32Slot(2, GKNBEHEMMFH, 0)
def CBMILEEGEPNAddDNMMADEPEKH(builder, DNMMADEPEKH): builder.PrependInt32Slot(3, DNMMADEPEKH, 0)
def CBMILEEGEPNAddCEPBOFBJBKB(builder, CEPBOFBJBKB): builder.PrependInt32Slot(4, CEPBOFBJBKB, 0)
def CBMILEEGEPNAddIHPEJOJEPFM(builder, IHPEJOJEPFM): builder.PrependInt32Slot(5, IHPEJOJEPFM, 0)
def CBMILEEGEPNAddBBDGLCFCBFL(builder, BBDGLCFCBFL): builder.PrependInt32Slot(6, BBDGLCFCBFL, 0)
def CBMILEEGEPNEnd(builder): return builder.EndObject()
