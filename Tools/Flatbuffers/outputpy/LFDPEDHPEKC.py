# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LFDPEDHPEKC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLFDPEDHPEKC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LFDPEDHPEKC()
        x.Init(buf, n + offset)
        return x

    # LFDPEDHPEKC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LFDPEDHPEKC
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LFDPEDHPEKC
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LFDPEDHPEKC
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LFDPEDHPEKC
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LFDPEDHPEKC
    def IPHMJNCEPIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LFDPEDHPEKC
    def BNFLNMGOJCM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LFDPEDHPEKCStart(builder): builder.StartObject(6)
def LFDPEDHPEKCAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def LFDPEDHPEKCAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def LFDPEDHPEKCAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def LFDPEDHPEKCAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(3, NJLJEKDBPCH, 0)
def LFDPEDHPEKCAddIPHMJNCEPIJ(builder, IPHMJNCEPIJ): builder.PrependInt32Slot(4, IPHMJNCEPIJ, 0)
def LFDPEDHPEKCAddBNFLNMGOJCM(builder, BNFLNMGOJCM): builder.PrependInt32Slot(5, BNFLNMGOJCM, 0)
def LFDPEDHPEKCEnd(builder): return builder.EndObject()
