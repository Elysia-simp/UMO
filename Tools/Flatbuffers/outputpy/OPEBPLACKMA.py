# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OPEBPLACKMA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOPEBPLACKMA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OPEBPLACKMA()
        x.Init(buf, n + offset)
        return x

    # OPEBPLACKMA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OPEBPLACKMA
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def PJPIKBPCCMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def HKGPNPMBJCP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OPEBPLACKMA
    def LFFMNLEJJMH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OPEBPLACKMAStart(builder): builder.StartObject(7)
def OPEBPLACKMAAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def OPEBPLACKMAAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def OPEBPLACKMAAddPJPIKBPCCMD(builder, PJPIKBPCCMD): builder.PrependUint32Slot(2, PJPIKBPCCMD, 0)
def OPEBPLACKMAAddHKGPNPMBJCP(builder, HKGPNPMBJCP): builder.PrependInt32Slot(3, HKGPNPMBJCP, 0)
def OPEBPLACKMAAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependInt32Slot(4, MBBJMJAAODG, 0)
def OPEBPLACKMAAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependInt32Slot(5, KJFEBMBHKOC, 0)
def OPEBPLACKMAAddLFFMNLEJJMH(builder, LFFMNLEJJMH): builder.PrependUint32Slot(6, LFFMNLEJJMH, 0)
def OPEBPLACKMAEnd(builder): return builder.EndObject()
