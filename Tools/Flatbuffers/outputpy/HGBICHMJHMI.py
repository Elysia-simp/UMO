# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HGBICHMJHMI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHGBICHMJHMI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HGBICHMJHMI()
        x.Init(buf, n + offset)
        return x

    # HGBICHMJHMI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HGBICHMJHMI
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HGBICHMJHMI
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def APJPCEEAANA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def KPMGJEELOEI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HGBICHMJHMI
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HGBICHMJHMI
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HGBICHMJHMIStart(builder): builder.StartObject(9)
def HGBICHMJHMIAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def HGBICHMJHMIAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(1, MAIJBDCJPNJ, 0)
def HGBICHMJHMIAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(2, MCHOEAGDGJP, 0)
def HGBICHMJHMIAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(3, LLJNABNBDMN, 0)
def HGBICHMJHMIAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(4, AEOKLKJAKHB, 0)
def HGBICHMJHMIAddAPJPCEEAANA(builder, APJPCEEAANA): builder.PrependUint32Slot(5, APJPCEEAANA, 0)
def HGBICHMJHMIAddKPMGJEELOEI(builder, KPMGJEELOEI): builder.PrependUint32Slot(6, KPMGJEELOEI, 0)
def HGBICHMJHMIAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(7, BNOHOIBDHLP, 0)
def HGBICHMJHMIAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def HGBICHMJHMIStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HGBICHMJHMIEnd(builder): return builder.EndObject()
