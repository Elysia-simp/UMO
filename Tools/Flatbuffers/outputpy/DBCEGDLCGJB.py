# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DBCEGDLCGJB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDBCEGDLCGJB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DBCEGDLCGJB()
        x.Init(buf, n + offset)
        return x

    # DBCEGDLCGJB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DBCEGDLCGJB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def GLPDAKINJIM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DBCEGDLCGJB
    def HEHFPCGOLGF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DBCEGDLCGJB
    def HEHFPCGOLGFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DBCEGDLCGJBStart(builder): builder.StartObject(9)
def DBCEGDLCGJBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def DBCEGDLCGJBAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def DBCEGDLCGJBAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def DBCEGDLCGJBAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(3, NJLJEKDBPCH, 0)
def DBCEGDLCGJBAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(4, MAOAGDBDBIB, 0)
def DBCEGDLCGJBAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(5, LPJPOOHJKAE, 0)
def DBCEGDLCGJBAddGLPDAKINJIM(builder, GLPDAKINJIM): builder.PrependInt32Slot(6, GLPDAKINJIM, 0)
def DBCEGDLCGJBAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(7, LMLNKHMPOIG, 0)
def DBCEGDLCGJBAddHEHFPCGOLGF(builder, HEHFPCGOLGF): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(HEHFPCGOLGF), 0)
def DBCEGDLCGJBStartHEHFPCGOLGFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DBCEGDLCGJBEnd(builder): return builder.EndObject()
