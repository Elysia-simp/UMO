# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ICAMEMFMEPB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsICAMEMFMEPB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ICAMEMFMEPB()
        x.Init(buf, n + offset)
        return x

    # ICAMEMFMEPB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ICAMEMFMEPB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ICAMEMFMEPB
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ICAMEMFMEPB
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ICAMEMFMEPB
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def ICAMEMFMEPBStart(builder): builder.StartObject(4)
def ICAMEMFMEPBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def ICAMEMFMEPBAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(1, NJLJEKDBPCH, 0)
def ICAMEMFMEPBAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(2, MAOAGDBDBIB, 0)
def ICAMEMFMEPBAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def ICAMEMFMEPBEnd(builder): return builder.EndObject()
