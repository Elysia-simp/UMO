# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CGCBGGNEJKJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCGCBGGNEJKJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CGCBGGNEJKJ()
        x.Init(buf, n + offset)
        return x

    # CGCBGGNEJKJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CGCBGGNEJKJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CGCBGGNEJKJ
    def GEAIPAEKLNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CGCBGGNEJKJ
    def JGILGOILJNK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CGCBGGNEJKJStart(builder): builder.StartObject(3)
def CGCBGGNEJKJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def CGCBGGNEJKJAddGEAIPAEKLNF(builder, GEAIPAEKLNF): builder.PrependInt32Slot(1, GEAIPAEKLNF, 0)
def CGCBGGNEJKJAddJGILGOILJNK(builder, JGILGOILJNK): builder.PrependInt32Slot(2, JGILGOILJNK, 0)
def CGCBGGNEJKJEnd(builder): return builder.EndObject()
