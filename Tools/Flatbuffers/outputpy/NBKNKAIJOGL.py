# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NBKNKAIJOGL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNBKNKAIJOGL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NBKNKAIJOGL()
        x.Init(buf, n + offset)
        return x

    # NBKNKAIJOGL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NBKNKAIJOGL
    def DDODJOIHKKG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .POBCGIFNDJF import POBCGIFNDJF
            obj = POBCGIFNDJF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBKNKAIJOGL
    def DDODJOIHKKGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBKNKAIJOGL
    def DLNKALNBAPB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FMINENNNIEO import FMINENNNIEO
            obj = FMINENNNIEO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBKNKAIJOGL
    def DLNKALNBAPBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBKNKAIJOGL
    def NBNMLJNKNAC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FNHCIJOFLAE import FNHCIJOFLAE
            obj = FNHCIJOFLAE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBKNKAIJOGL
    def NBNMLJNKNACLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBKNKAIJOGL
    def PAAHAEGCMLF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MNOGIDIBJHJ import MNOGIDIBJHJ
            obj = MNOGIDIBJHJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBKNKAIJOGL
    def PAAHAEGCMLFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NBKNKAIJOGLStart(builder): builder.StartObject(4)
def NBKNKAIJOGLAddDDODJOIHKKG(builder, DDODJOIHKKG): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DDODJOIHKKG), 0)
def NBKNKAIJOGLStartDDODJOIHKKGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBKNKAIJOGLAddDLNKALNBAPB(builder, DLNKALNBAPB): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(DLNKALNBAPB), 0)
def NBKNKAIJOGLStartDLNKALNBAPBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBKNKAIJOGLAddNBNMLJNKNAC(builder, NBNMLJNKNAC): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NBNMLJNKNAC), 0)
def NBKNKAIJOGLStartNBNMLJNKNACVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBKNKAIJOGLAddPAAHAEGCMLF(builder, PAAHAEGCMLF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(PAAHAEGCMLF), 0)
def NBKNKAIJOGLStartPAAHAEGCMLFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBKNKAIJOGLEnd(builder): return builder.EndObject()
