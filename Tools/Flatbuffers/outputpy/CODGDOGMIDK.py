# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CODGDOGMIDK(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCODGDOGMIDK(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CODGDOGMIDK()
        x.Init(buf, n + offset)
        return x

    # CODGDOGMIDK
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CODGDOGMIDK
    def OENMAPGKFFA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def OENMAPGKFFALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def MNAFCOIHPBI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def MNAFCOIHPBILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def CCEAGKAGDAP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def CCEAGKAGDAPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def LGMGEFGJLFB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def LGMGEFGJLFBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def IAMFJBLMHFM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def IAMFJBLMHFMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def CCJEOICFFKO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def CCJEOICFFKOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def DEPEMNECAOK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def DEPEMNECAOKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def GJEMEJBDIFI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def GJEMEJBDIFILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def NIHOFNCOKOF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def NIHOFNCOKOFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def LDMFPDKFNOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def LDMFPDKFNOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def HNBAJIICEGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def HNBAJIICEGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def HFAFCJLKCBF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def HFAFCJLKCBFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def CAPMOCHDPMA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def CAPMOCHDPMALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def JHAFECPOJHD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def JHAFECPOJHDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def OHJIPOIPKOH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def OHJIPOIPKOHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CODGDOGMIDK
    def KMLCBOHEIBJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CODGDOGMIDK
    def KMLCBOHEIBJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CODGDOGMIDKStart(builder): builder.StartObject(16)
def CODGDOGMIDKAddOENMAPGKFFA(builder, OENMAPGKFFA): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OENMAPGKFFA), 0)
def CODGDOGMIDKStartOENMAPGKFFAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddMNAFCOIHPBI(builder, MNAFCOIHPBI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(MNAFCOIHPBI), 0)
def CODGDOGMIDKStartMNAFCOIHPBIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddCCEAGKAGDAP(builder, CCEAGKAGDAP): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CCEAGKAGDAP), 0)
def CODGDOGMIDKStartCCEAGKAGDAPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddLGMGEFGJLFB(builder, LGMGEFGJLFB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(LGMGEFGJLFB), 0)
def CODGDOGMIDKStartLGMGEFGJLFBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddIAMFJBLMHFM(builder, IAMFJBLMHFM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IAMFJBLMHFM), 0)
def CODGDOGMIDKStartIAMFJBLMHFMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddCCJEOICFFKO(builder, CCJEOICFFKO): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(CCJEOICFFKO), 0)
def CODGDOGMIDKStartCCJEOICFFKOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddDEPEMNECAOK(builder, DEPEMNECAOK): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(DEPEMNECAOK), 0)
def CODGDOGMIDKStartDEPEMNECAOKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddGJEMEJBDIFI(builder, GJEMEJBDIFI): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(GJEMEJBDIFI), 0)
def CODGDOGMIDKStartGJEMEJBDIFIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddNIHOFNCOKOF(builder, NIHOFNCOKOF): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NIHOFNCOKOF), 0)
def CODGDOGMIDKStartNIHOFNCOKOFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddLDMFPDKFNOG(builder, LDMFPDKFNOG): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(LDMFPDKFNOG), 0)
def CODGDOGMIDKStartLDMFPDKFNOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddHNBAJIICEGG(builder, HNBAJIICEGG): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(HNBAJIICEGG), 0)
def CODGDOGMIDKStartHNBAJIICEGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddHFAFCJLKCBF(builder, HFAFCJLKCBF): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(HFAFCJLKCBF), 0)
def CODGDOGMIDKStartHFAFCJLKCBFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddCAPMOCHDPMA(builder, CAPMOCHDPMA): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(CAPMOCHDPMA), 0)
def CODGDOGMIDKStartCAPMOCHDPMAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddJHAFECPOJHD(builder, JHAFECPOJHD): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(JHAFECPOJHD), 0)
def CODGDOGMIDKStartJHAFECPOJHDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddOHJIPOIPKOH(builder, OHJIPOIPKOH): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(OHJIPOIPKOH), 0)
def CODGDOGMIDKStartOHJIPOIPKOHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKAddKMLCBOHEIBJ(builder, KMLCBOHEIBJ): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(KMLCBOHEIBJ), 0)
def CODGDOGMIDKStartKMLCBOHEIBJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CODGDOGMIDKEnd(builder): return builder.EndObject()
