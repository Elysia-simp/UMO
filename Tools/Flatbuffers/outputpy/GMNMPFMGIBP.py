# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GMNMPFMGIBP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGMNMPFMGIBP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GMNMPFMGIBP()
        x.Init(buf, n + offset)
        return x

    # GMNMPFMGIBP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GMNMPFMGIBP
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GMNMPFMGIBP
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GMNMPFMGIBP
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GMNMPFMGIBP
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GMNMPFMGIBP
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GMNMPFMGIBP
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GMNMPFMGIBP
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GMNMPFMGIBPStart(builder): builder.StartObject(25)
def GMNMPFMGIBPAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def GMNMPFMGIBPAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def GMNMPFMGIBPAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def GMNMPFMGIBPAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def GMNMPFMGIBPAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def GMNMPFMGIBPAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def GMNMPFMGIBPAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(6, DEPHCHOBAJG, 0)
def GMNMPFMGIBPAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(7, DJHKCHMBGHC, 0)
def GMNMPFMGIBPAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(8, BCKOLCDDIAG, 0)
def GMNMPFMGIBPAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(9, LKIBIHGHEMA, 0)
def GMNMPFMGIBPAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(10, ANELKJCGJJL, 0)
def GMNMPFMGIBPAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(11, AEOKLKJAKHB, 0)
def GMNMPFMGIBPAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(12, OGBOPHDAMCI, 0)
def GMNMPFMGIBPAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(13, HGFJBAJCFNF, 0)
def GMNMPFMGIBPAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def GMNMPFMGIBPAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def GMNMPFMGIBPAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(16, BNOHOIBDHLP, 0)
def GMNMPFMGIBPAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def GMNMPFMGIBPAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(18, LENBJLOPKLE, 0)
def GMNMPFMGIBPAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def GMNMPFMGIBPStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GMNMPFMGIBPAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def GMNMPFMGIBPAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(21, ODMLFHELAJK, 0)
def GMNMPFMGIBPAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(22, JOIACOFCFAA, 0)
def GMNMPFMGIBPAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def GMNMPFMGIBPStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GMNMPFMGIBPAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependInt32Slot(24, KPCNGKDBMHA, 0)
def GMNMPFMGIBPEnd(builder): return builder.EndObject()
