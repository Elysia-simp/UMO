# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KFHCGBOADLE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKFHCGBOADLE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KFHCGBOADLE()
        x.Init(buf, n + offset)
        return x

    # KFHCGBOADLE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KFHCGBOADLE
    def BHHFEPOGOIG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ODDOBDBBJAB import ODDOBDBBJAB
            obj = ODDOBDBBJAB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KFHCGBOADLE
    def BHHFEPOGOIGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KFHCGBOADLE
    def CMAPNGGMDOI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DNHKFIKECGD import DNHKFIKECGD
            obj = DNHKFIKECGD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KFHCGBOADLE
    def CMAPNGGMDOILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KFHCGBOADLE
    def ILBKJACHOHM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PCDBMJGPDFN import PCDBMJGPDFN
            obj = PCDBMJGPDFN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KFHCGBOADLE
    def ILBKJACHOHMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KFHCGBOADLEStart(builder): builder.StartObject(3)
def KFHCGBOADLEAddBHHFEPOGOIG(builder, BHHFEPOGOIG): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BHHFEPOGOIG), 0)
def KFHCGBOADLEStartBHHFEPOGOIGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KFHCGBOADLEAddCMAPNGGMDOI(builder, CMAPNGGMDOI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CMAPNGGMDOI), 0)
def KFHCGBOADLEStartCMAPNGGMDOIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KFHCGBOADLEAddILBKJACHOHM(builder, ILBKJACHOHM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ILBKJACHOHM), 0)
def KFHCGBOADLEStartILBKJACHOHMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KFHCGBOADLEEnd(builder): return builder.EndObject()
