# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PBIDNKDHLOB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPBIDNKDHLOB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PBIDNKDHLOB()
        x.Init(buf, n + offset)
        return x

    # PBIDNKDHLOB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PBIDNKDHLOB
    def BJAPBPAEMJK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HAGPHAGHHFA import HAGPHAGHHFA
            obj = HAGPHAGHHFA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PBIDNKDHLOB
    def BJAPBPAEMJKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PBIDNKDHLOB
    def JHGBNIPIJMA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FDCDAOBKLBM import FDCDAOBKLBM
            obj = FDCDAOBKLBM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PBIDNKDHLOB
    def JHGBNIPIJMALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PBIDNKDHLOB
    def MDFKCCMFFFD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DMOMBIHFCKP import DMOMBIHFCKP
            obj = DMOMBIHFCKP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PBIDNKDHLOB
    def MDFKCCMFFFDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PBIDNKDHLOB
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CFGDKCOAPAP import CFGDKCOAPAP
            obj = CFGDKCOAPAP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PBIDNKDHLOB
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PBIDNKDHLOB
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HDAONNHPGDA import HDAONNHPGDA
            obj = HDAONNHPGDA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PBIDNKDHLOB
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PBIDNKDHLOBStart(builder): builder.StartObject(5)
def PBIDNKDHLOBAddBJAPBPAEMJK(builder, BJAPBPAEMJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BJAPBPAEMJK), 0)
def PBIDNKDHLOBStartBJAPBPAEMJKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PBIDNKDHLOBAddJHGBNIPIJMA(builder, JHGBNIPIJMA): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(JHGBNIPIJMA), 0)
def PBIDNKDHLOBStartJHGBNIPIJMAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PBIDNKDHLOBAddMDFKCCMFFFD(builder, MDFKCCMFFFD): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(MDFKCCMFFFD), 0)
def PBIDNKDHLOBStartMDFKCCMFFFDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PBIDNKDHLOBAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def PBIDNKDHLOBStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PBIDNKDHLOBAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def PBIDNKDHLOBStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PBIDNKDHLOBEnd(builder): return builder.EndObject()
