# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PPAELFNIFMJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPPAELFNIFMJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PPAELFNIFMJ()
        x.Init(buf, n + offset)
        return x

    # PPAELFNIFMJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PPAELFNIFMJ
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def IDMMPIIIPLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def NAMFJMCKFIF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def EBFEIMNOLHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def EBFEIMNOLHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def OJBCAEPBACP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def OJBCAEPBACPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def JNBJODMLPMO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def JNBJODMLPMOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def JFKBEBPJGBH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def JFKBEBPJGBHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def BPBBMFCKGGP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def BPBBMFCKGGPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PPAELFNIFMJ
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PPAELFNIFMJ
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def HFKHLKGAJEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PPAELFNIFMJ
    def LFDLHFLPCNC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PPAELFNIFMJ
    def LFDLHFLPCNCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PPAELFNIFMJStart(builder): builder.StartObject(35)
def PPAELFNIFMJAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def PPAELFNIFMJAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def PPAELFNIFMJAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def PPAELFNIFMJAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def PPAELFNIFMJAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def PPAELFNIFMJAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def PPAELFNIFMJAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(6, DEPHCHOBAJG, 0)
def PPAELFNIFMJAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(7, DJHKCHMBGHC, 0)
def PPAELFNIFMJAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(8, BCKOLCDDIAG, 0)
def PPAELFNIFMJAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(9, LKIBIHGHEMA, 0)
def PPAELFNIFMJAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(10, ANELKJCGJJL, 0)
def PPAELFNIFMJAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(11, AEOKLKJAKHB, 0)
def PPAELFNIFMJAddIDMMPIIIPLL(builder, IDMMPIIIPLL): builder.PrependUint32Slot(12, IDMMPIIIPLL, 0)
def PPAELFNIFMJAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(13, HKPPDACCCOH, 0)
def PPAELFNIFMJAddNAMFJMCKFIF(builder, NAMFJMCKFIF): builder.PrependUint32Slot(14, NAMFJMCKFIF, 0)
def PPAELFNIFMJAddEBFEIMNOLHP(builder, EBFEIMNOLHP): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(EBFEIMNOLHP), 0)
def PPAELFNIFMJStartEBFEIMNOLHPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(16, OGBOPHDAMCI, 0)
def PPAELFNIFMJAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(17, HGFJBAJCFNF, 0)
def PPAELFNIFMJAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def PPAELFNIFMJAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def PPAELFNIFMJAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(20, BNOHOIBDHLP, 0)
def PPAELFNIFMJAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def PPAELFNIFMJAddOJBCAEPBACP(builder, OJBCAEPBACP): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(OJBCAEPBACP), 0)
def PPAELFNIFMJStartOJBCAEPBACPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(23, LENBJLOPKLE, 0)
def PPAELFNIFMJAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def PPAELFNIFMJStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddJNBJODMLPMO(builder, JNBJODMLPMO): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(JNBJODMLPMO), 0)
def PPAELFNIFMJStartJNBJODMLPMOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddJFKBEBPJGBH(builder, JFKBEBPJGBH): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(JFKBEBPJGBH), 0)
def PPAELFNIFMJStartJFKBEBPJGBHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddBPBBMFCKGGP(builder, BPBBMFCKGGP): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(BPBBMFCKGGP), 0)
def PPAELFNIFMJStartBPBBMFCKGGPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def PPAELFNIFMJAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(29, ODMLFHELAJK, 0)
def PPAELFNIFMJAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(30, JOIACOFCFAA, 0)
def PPAELFNIFMJAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def PPAELFNIFMJStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependInt32Slot(32, KPCNGKDBMHA, 0)
def PPAELFNIFMJAddHFKHLKGAJEL(builder, HFKHLKGAJEL): builder.PrependInt32Slot(33, HFKHLKGAJEL, 0)
def PPAELFNIFMJAddLFDLHFLPCNC(builder, LFDLHFLPCNC): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(LFDLHFLPCNC), 0)
def PPAELFNIFMJStartLFDLHFLPCNCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PPAELFNIFMJEnd(builder): return builder.EndObject()
