# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CLBPBGIPFPP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCLBPBGIPFPP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CLBPBGIPFPP()
        x.Init(buf, n + offset)
        return x

    # CLBPBGIPFPP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CLBPBGIPFPP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def IAPFGOHKAGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def HICGGFMNEMI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def EFFICDBHCCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def FOHAACCBBOP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CLBPBGIPFPP
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CLBPBGIPFPPStart(builder): builder.StartObject(8)
def CLBPBGIPFPPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def CLBPBGIPFPPAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def CLBPBGIPFPPAddIAPFGOHKAGE(builder, IAPFGOHKAGE): builder.PrependUint32Slot(2, IAPFGOHKAGE, 0)
def CLBPBGIPFPPAddHICGGFMNEMI(builder, HICGGFMNEMI): builder.PrependUint32Slot(3, HICGGFMNEMI, 0)
def CLBPBGIPFPPAddEFFICDBHCCH(builder, EFFICDBHCCH): builder.PrependUint32Slot(4, EFFICDBHCCH, 0)
def CLBPBGIPFPPAddFOHAACCBBOP(builder, FOHAACCBBOP): builder.PrependUint32Slot(5, FOHAACCBBOP, 0)
def CLBPBGIPFPPAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(6, NJLJEKDBPCH, 0)
def CLBPBGIPFPPAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependInt32Slot(7, MAOAGDBDBIB, 0)
def CLBPBGIPFPPEnd(builder): return builder.EndObject()
