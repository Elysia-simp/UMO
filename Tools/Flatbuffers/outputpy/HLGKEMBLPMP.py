# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HLGKEMBLPMP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHLGKEMBLPMP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HLGKEMBLPMP()
        x.Init(buf, n + offset)
        return x

    # HLGKEMBLPMP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HLGKEMBLPMP
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def GPCEIBGOEGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HLGKEMBLPMP
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HLGKEMBLPMP
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HLGKEMBLPMP
    def DIMNACDMDNA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def OBKOHEAAOHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def ABHMDHFOEFM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def NDNILABOKNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HLGKEMBLPMP
    def HKONHGMBLBO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HLGKEMBLPMPStart(builder): builder.StartObject(25)
def HLGKEMBLPMPAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def HLGKEMBLPMPAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def HLGKEMBLPMPAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def HLGKEMBLPMPAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def HLGKEMBLPMPAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def HLGKEMBLPMPAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def HLGKEMBLPMPAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(6, DJHKCHMBGHC, 0)
def HLGKEMBLPMPAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(7, BCKOLCDDIAG, 0)
def HLGKEMBLPMPAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(8, LKIBIHGHEMA, 0)
def HLGKEMBLPMPAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(9, ANELKJCGJJL, 0)
def HLGKEMBLPMPAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(10, AEOKLKJAKHB, 0)
def HLGKEMBLPMPAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(11, HKPPDACCCOH, 0)
def HLGKEMBLPMPAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(12, OGBOPHDAMCI, 0)
def HLGKEMBLPMPAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(13, HGFJBAJCFNF, 0)
def HLGKEMBLPMPAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def HLGKEMBLPMPAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def HLGKEMBLPMPAddGPCEIBGOEGB(builder, GPCEIBGOEGB): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(GPCEIBGOEGB), 0)
def HLGKEMBLPMPAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependUint32Slot(17, KPCNGKDBMHA, 0)
def HLGKEMBLPMPAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(18, LENBJLOPKLE, 0)
def HLGKEMBLPMPAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def HLGKEMBLPMPStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HLGKEMBLPMPAddDIMNACDMDNA(builder, DIMNACDMDNA): builder.PrependInt32Slot(20, DIMNACDMDNA, 0)
def HLGKEMBLPMPAddOBKOHEAAOHE(builder, OBKOHEAAOHE): builder.PrependInt32Slot(21, OBKOHEAAOHE, 0)
def HLGKEMBLPMPAddABHMDHFOEFM(builder, ABHMDHFOEFM): builder.PrependInt32Slot(22, ABHMDHFOEFM, 0)
def HLGKEMBLPMPAddNDNILABOKNJ(builder, NDNILABOKNJ): builder.PrependInt32Slot(23, NDNILABOKNJ, 0)
def HLGKEMBLPMPAddHKONHGMBLBO(builder, HKONHGMBLBO): builder.PrependInt32Slot(24, HKONHGMBLBO, 0)
def HLGKEMBLPMPEnd(builder): return builder.EndObject()
