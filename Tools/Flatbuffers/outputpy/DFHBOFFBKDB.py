# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DFHBOFFBKDB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDFHBOFFBKDB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DFHBOFFBKDB()
        x.Init(buf, n + offset)
        return x

    # DFHBOFFBKDB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DFHBOFFBKDB
    def EJKKOPBPJBN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JOGLEFDCEJI import JOGLEFDCEJI
            obj = JOGLEFDCEJI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def EJKKOPBPJBNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFHBOFFBKDB
    def MDFKCCMFFFD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JIMFBCIKKKJ import JIMFBCIKKKJ
            obj = JIMFBCIKKKJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def MDFKCCMFFFDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFHBOFFBKDB
    def MHOEKDECGGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OLMJGOPCIKK import OLMJGOPCIKK
            obj = OLMJGOPCIKK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def MHOEKDECGGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFHBOFFBKDB
    def PCHLJEFOEFL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FFAOJIELJAC import FFAOJIELJAC
            obj = FFAOJIELJAC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def PCHLJEFOEFLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFHBOFFBKDB
    def JKFLLEHIMLL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CJLNKNELECA import CJLNKNELECA
            obj = CJLNKNELECA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def JKFLLEHIMLLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFHBOFFBKDB
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NOAPHCIKEID import NOAPHCIKEID
            obj = NOAPHCIKEID()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DFHBOFFBKDB
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DFHBOFFBKDBStart(builder): builder.StartObject(6)
def DFHBOFFBKDBAddEJKKOPBPJBN(builder, EJKKOPBPJBN): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EJKKOPBPJBN), 0)
def DFHBOFFBKDBStartEJKKOPBPJBNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBAddMDFKCCMFFFD(builder, MDFKCCMFFFD): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(MDFKCCMFFFD), 0)
def DFHBOFFBKDBStartMDFKCCMFFFDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBAddMHOEKDECGGN(builder, MHOEKDECGGN): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(MHOEKDECGGN), 0)
def DFHBOFFBKDBStartMHOEKDECGGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBAddPCHLJEFOEFL(builder, PCHLJEFOEFL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(PCHLJEFOEFL), 0)
def DFHBOFFBKDBStartPCHLJEFOEFLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBAddJKFLLEHIMLL(builder, JKFLLEHIMLL): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(JKFLLEHIMLL), 0)
def DFHBOFFBKDBStartJKFLLEHIMLLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def DFHBOFFBKDBStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFHBOFFBKDBEnd(builder): return builder.EndObject()
