# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PEDMFAEMCPG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPEDMFAEMCPG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PEDMFAEMCPG()
        x.Init(buf, n + offset)
        return x

    # PEDMFAEMCPG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PEDMFAEMCPG
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def DNIDLBOLLGH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PEDMFAEMCPG
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PEDMFAEMCPGStart(builder): builder.StartObject(8)
def PEDMFAEMCPGAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def PEDMFAEMCPGAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def PEDMFAEMCPGAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(2, LPJPOOHJKAE, 0)
def PEDMFAEMCPGAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependUint32Slot(3, HOENDPOGFIO, 0)
def PEDMFAEMCPGAddDNIDLBOLLGH(builder, DNIDLBOLLGH): builder.PrependUint32Slot(4, DNIDLBOLLGH, 0)
def PEDMFAEMCPGAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(5, NJLJEKDBPCH, 0)
def PEDMFAEMCPGAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(6, MAOAGDBDBIB, 0)
def PEDMFAEMCPGAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(7, OFMGALJGDAO, 0)
def PEDMFAEMCPGEnd(builder): return builder.EndObject()
