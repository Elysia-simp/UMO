# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HMAOBLEJDAH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHMAOBLEJDAH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HMAOBLEJDAH()
        x.Init(buf, n + offset)
        return x

    # HMAOBLEJDAH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HMAOBLEJDAH
    def HLCDELCABOF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def OFLDIKGIPBL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def DLGFIIKAOJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def AMFPDKACLLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def LNCMMHCDOJE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def MJOCIHPPKNO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HMAOBLEJDAH
    def HOFPKKMIOAL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def HOFPKKMIOALLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def CPOGAPIBMHF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def CPOGAPIBMHFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def GFFCGBEAKDP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def GFFCGBEAKDPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def NBOHLKPDNKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def NBOHLKPDNKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def DHHLJCLLPAF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def DHHLJCLLPAFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def OHBEDDIGFKG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def OHBEDDIGFKGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HMAOBLEJDAH
    def DNHAKGCPLOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HMAOBLEJDAH
    def DNHAKGCPLOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HMAOBLEJDAHStart(builder): builder.StartObject(15)
def HMAOBLEJDAHAddHLCDELCABOF(builder, HLCDELCABOF): builder.PrependUint32Slot(0, HLCDELCABOF, 0)
def HMAOBLEJDAHAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(1, ADCLAGBHDBC, 0)
def HMAOBLEJDAHAddOFLDIKGIPBL(builder, OFLDIKGIPBL): builder.PrependUint32Slot(2, OFLDIKGIPBL, 0)
def HMAOBLEJDAHAddDLGFIIKAOJD(builder, DLGFIIKAOJD): builder.PrependUint32Slot(3, DLGFIIKAOJD, 0)
def HMAOBLEJDAHAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def HMAOBLEJDAHAddAMFPDKACLLL(builder, AMFPDKACLLL): builder.PrependUint32Slot(5, AMFPDKACLLL, 0)
def HMAOBLEJDAHAddLNCMMHCDOJE(builder, LNCMMHCDOJE): builder.PrependUint32Slot(6, LNCMMHCDOJE, 0)
def HMAOBLEJDAHAddMJOCIHPPKNO(builder, MJOCIHPPKNO): builder.PrependUint32Slot(7, MJOCIHPPKNO, 0)
def HMAOBLEJDAHAddHOFPKKMIOAL(builder, HOFPKKMIOAL): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(HOFPKKMIOAL), 0)
def HMAOBLEJDAHStartHOFPKKMIOALVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddCPOGAPIBMHF(builder, CPOGAPIBMHF): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(CPOGAPIBMHF), 0)
def HMAOBLEJDAHStartCPOGAPIBMHFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddGFFCGBEAKDP(builder, GFFCGBEAKDP): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(GFFCGBEAKDP), 0)
def HMAOBLEJDAHStartGFFCGBEAKDPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddNBOHLKPDNKA(builder, NBOHLKPDNKA): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(NBOHLKPDNKA), 0)
def HMAOBLEJDAHStartNBOHLKPDNKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddDHHLJCLLPAF(builder, DHHLJCLLPAF): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(DHHLJCLLPAF), 0)
def HMAOBLEJDAHStartDHHLJCLLPAFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddOHBEDDIGFKG(builder, OHBEDDIGFKG): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(OHBEDDIGFKG), 0)
def HMAOBLEJDAHStartOHBEDDIGFKGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHAddDNHAKGCPLOG(builder, DNHAKGCPLOG): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(DNHAKGCPLOG), 0)
def HMAOBLEJDAHStartDNHAKGCPLOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HMAOBLEJDAHEnd(builder): return builder.EndObject()
