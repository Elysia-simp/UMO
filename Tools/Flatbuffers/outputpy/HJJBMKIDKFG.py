# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HJJBMKIDKFG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHJJBMKIDKFG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HJJBMKIDKFG()
        x.Init(buf, n + offset)
        return x

    # HJJBMKIDKFG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HJJBMKIDKFG
    def KIJLMKMIBFL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HJJBMKIDKFG
    def KIJLMKMIBFLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJJBMKIDKFG
    def KDPKPOBKKMJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HJJBMKIDKFG
    def MHFDKEEEDEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HJJBMKIDKFG
    def FHLKEIBOFNN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HJJBMKIDKFG
    def EGEFMJCLNDM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HJJBMKIDKFG
    def IJMEOOJHNCG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HJJBMKIDKFG
    def GKLHNNBMGKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def HJJBMKIDKFGStart(builder): builder.StartObject(7)
def HJJBMKIDKFGAddKIJLMKMIBFL(builder, KIJLMKMIBFL): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(KIJLMKMIBFL), 0)
def HJJBMKIDKFGStartKIJLMKMIBFLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJJBMKIDKFGAddKDPKPOBKKMJ(builder, KDPKPOBKKMJ): builder.PrependUint32Slot(1, KDPKPOBKKMJ, 0)
def HJJBMKIDKFGAddMHFDKEEEDEL(builder, MHFDKEEEDEL): builder.PrependUint32Slot(2, MHFDKEEEDEL, 0)
def HJJBMKIDKFGAddFHLKEIBOFNN(builder, FHLKEIBOFNN): builder.PrependUint32Slot(3, FHLKEIBOFNN, 0)
def HJJBMKIDKFGAddEGEFMJCLNDM(builder, EGEFMJCLNDM): builder.PrependUint32Slot(4, EGEFMJCLNDM, 0)
def HJJBMKIDKFGAddIJMEOOJHNCG(builder, IJMEOOJHNCG): builder.PrependUint32Slot(5, IJMEOOJHNCG, 0)
def HJJBMKIDKFGAddGKLHNNBMGKH(builder, GKLHNNBMGKH): builder.PrependUint32Slot(6, GKLHNNBMGKH, 0)
def HJJBMKIDKFGEnd(builder): return builder.EndObject()
