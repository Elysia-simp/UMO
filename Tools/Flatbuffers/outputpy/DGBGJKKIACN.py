# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DGBGJKKIACN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDGBGJKKIACN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DGBGJKKIACN()
        x.Init(buf, n + offset)
        return x

    # DGBGJKKIACN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DGBGJKKIACN
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def GEJGMBBCFEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def LBCHNGMGBKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def HFOBJBOILFG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DGBGJKKIACN
    def JEMNMKOCAEI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def DGBGJKKIACNStart(builder): builder.StartObject(7)
def DGBGJKKIACNAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def DGBGJKKIACNAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def DGBGJKKIACNAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def DGBGJKKIACNAddGEJGMBBCFEE(builder, GEJGMBBCFEE): builder.PrependInt32Slot(3, GEJGMBBCFEE, 0)
def DGBGJKKIACNAddLBCHNGMGBKL(builder, LBCHNGMGBKL): builder.PrependInt32Slot(4, LBCHNGMGBKL, 0)
def DGBGJKKIACNAddHFOBJBOILFG(builder, HFOBJBOILFG): builder.PrependInt32Slot(5, HFOBJBOILFG, 0)
def DGBGJKKIACNAddJEMNMKOCAEI(builder, JEMNMKOCAEI): builder.PrependInt32Slot(6, JEMNMKOCAEI, 0)
def DGBGJKKIACNEnd(builder): return builder.EndObject()
