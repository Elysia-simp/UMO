# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OGABIHKHGGD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOGABIHKHGGD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OGABIHKHGGD()
        x.Init(buf, n + offset)
        return x

    # OGABIHKHGGD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OGABIHKHGGD
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HLGKEMBLPMP import HLGKEMBLPMP
            obj = HLGKEMBLPMP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CLBPBGIPFPP import CLBPBGIPFPP
            obj = CLBPBGIPFPP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGABIHKHGGD
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LKEFGGDDBJK import LKEFGGDDBJK
            obj = LKEFGGDDBJK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGABIHKHGGD
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JACLMHBOGIE import JACLMHBOGIE
            obj = JACLMHBOGIE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGABIHKHGGD
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OJFDBJJIMMA import OJFDBJJIMMA
            obj = OJFDBJJIMMA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGABIHKHGGD
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OHMMAIEEGMO import OHMMAIEEGMO
            obj = OHMMAIEEGMO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGABIHKHGGD
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OGABIHKHGGDStart(builder): builder.StartObject(6)
def OGABIHKHGGDAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def OGABIHKHGGDAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def OGABIHKHGGDStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGABIHKHGGDAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def OGABIHKHGGDStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGABIHKHGGDAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def OGABIHKHGGDStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGABIHKHGGDAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def OGABIHKHGGDStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGABIHKHGGDAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def OGABIHKHGGDStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGABIHKHGGDEnd(builder): return builder.EndObject()
