# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GAJADNFKMEE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGAJADNFKMEE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GAJADNFKMEE()
        x.Init(buf, n + offset)
        return x

    # GAJADNFKMEE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GAJADNFKMEE
    def KMBNCDICCAJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def LMKLPPINLOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def LGJDLFJCCLK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GAJADNFKMEE
    def LGJDLFJCCLKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GAJADNFKMEE
    def LIGDKLEFBNM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def BMICKLAGCCD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GAJADNFKMEE
    def BMICKLAGCCDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GAJADNFKMEE
    def DGMDFCHIBKD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def DINDMDCKMCP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GAJADNFKMEE
    def DINDMDCKMCPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GAJADNFKMEE
    def EJNIJBKBNGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def EBDOOBOFLFM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GAJADNFKMEE
    def EBDOOBOFLFMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GAJADNFKMEE
    def FLNOLLMJOKE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def KHLNIPBFCNK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def EOHDEKFEONI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def FHKGIFCFEPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def DMEMJNAEDHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GAJADNFKMEE
    def JKKAICPJBOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GAJADNFKMEEStart(builder): builder.StartObject(15)
def GAJADNFKMEEAddKMBNCDICCAJ(builder, KMBNCDICCAJ): builder.PrependUint32Slot(0, KMBNCDICCAJ, 0)
def GAJADNFKMEEAddLMKLPPINLOK(builder, LMKLPPINLOK): builder.PrependUint32Slot(1, LMKLPPINLOK, 0)
def GAJADNFKMEEAddLGJDLFJCCLK(builder, LGJDLFJCCLK): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LGJDLFJCCLK), 0)
def GAJADNFKMEEStartLGJDLFJCCLKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GAJADNFKMEEAddLIGDKLEFBNM(builder, LIGDKLEFBNM): builder.PrependUint32Slot(3, LIGDKLEFBNM, 0)
def GAJADNFKMEEAddBMICKLAGCCD(builder, BMICKLAGCCD): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(BMICKLAGCCD), 0)
def GAJADNFKMEEStartBMICKLAGCCDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GAJADNFKMEEAddDGMDFCHIBKD(builder, DGMDFCHIBKD): builder.PrependUint32Slot(5, DGMDFCHIBKD, 0)
def GAJADNFKMEEAddDINDMDCKMCP(builder, DINDMDCKMCP): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(DINDMDCKMCP), 0)
def GAJADNFKMEEStartDINDMDCKMCPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GAJADNFKMEEAddEJNIJBKBNGE(builder, EJNIJBKBNGE): builder.PrependUint32Slot(7, EJNIJBKBNGE, 0)
def GAJADNFKMEEAddEBDOOBOFLFM(builder, EBDOOBOFLFM): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(EBDOOBOFLFM), 0)
def GAJADNFKMEEStartEBDOOBOFLFMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GAJADNFKMEEAddFLNOLLMJOKE(builder, FLNOLLMJOKE): builder.PrependUint32Slot(9, FLNOLLMJOKE, 0)
def GAJADNFKMEEAddKHLNIPBFCNK(builder, KHLNIPBFCNK): builder.PrependUint32Slot(10, KHLNIPBFCNK, 0)
def GAJADNFKMEEAddEOHDEKFEONI(builder, EOHDEKFEONI): builder.PrependUint32Slot(11, EOHDEKFEONI, 0)
def GAJADNFKMEEAddFHKGIFCFEPI(builder, FHKGIFCFEPI): builder.PrependUint32Slot(12, FHKGIFCFEPI, 0)
def GAJADNFKMEEAddDMEMJNAEDHP(builder, DMEMJNAEDHP): builder.PrependUint32Slot(13, DMEMJNAEDHP, 0)
def GAJADNFKMEEAddJKKAICPJBOK(builder, JKKAICPJBOK): builder.PrependUint32Slot(14, JKKAICPJBOK, 0)
def GAJADNFKMEEEnd(builder): return builder.EndObject()
