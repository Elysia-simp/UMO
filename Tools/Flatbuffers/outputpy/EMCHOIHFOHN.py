# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EMCHOIHFOHN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEMCHOIHFOHN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EMCHOIHFOHN()
        x.Init(buf, n + offset)
        return x

    # EMCHOIHFOHN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EMCHOIHFOHN
    def IPCBHGGLEJA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def CIOGNKLHPDE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def NABLNBMACHL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def ENFCBLPNAFO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EMCHOIHFOHN
    def ENFCBLPNAFOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EMCHOIHFOHN
    def LMKLPPINLOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def LGJDLFJCCLK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EMCHOIHFOHN
    def LGJDLFJCCLKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EMCHOIHFOHN
    def LIGDKLEFBNM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def BMICKLAGCCD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EMCHOIHFOHN
    def BMICKLAGCCDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EMCHOIHFOHN
    def JKONGPGFPNN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def DGMDFCHIBKD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def DINDMDCKMCP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EMCHOIHFOHN
    def DINDMDCKMCPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EMCHOIHFOHN
    def EJNIJBKBNGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def EBDOOBOFLFM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EMCHOIHFOHN
    def EBDOOBOFLFMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EMCHOIHFOHN
    def OBAOICIEFHO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def FLNOLLMJOKE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def KHLNIPBFCNK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def EOHDEKFEONI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def FHKGIFCFEPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def DMEMJNAEDHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def MBBCOAFGCJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def AFIBPDNHCNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def BKKAFNHOJFE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EMCHOIHFOHN
    def PGKFEHHDIBH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def EMCHOIHFOHNStart(builder): builder.StartObject(23)
def EMCHOIHFOHNAddIPCBHGGLEJA(builder, IPCBHGGLEJA): builder.PrependUint32Slot(0, IPCBHGGLEJA, 0)
def EMCHOIHFOHNAddCIOGNKLHPDE(builder, CIOGNKLHPDE): builder.PrependInt32Slot(1, CIOGNKLHPDE, 0)
def EMCHOIHFOHNAddNABLNBMACHL(builder, NABLNBMACHL): builder.PrependUint32Slot(2, NABLNBMACHL, 0)
def EMCHOIHFOHNAddENFCBLPNAFO(builder, ENFCBLPNAFO): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ENFCBLPNAFO), 0)
def EMCHOIHFOHNStartENFCBLPNAFOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EMCHOIHFOHNAddLMKLPPINLOK(builder, LMKLPPINLOK): builder.PrependUint32Slot(4, LMKLPPINLOK, 0)
def EMCHOIHFOHNAddLGJDLFJCCLK(builder, LGJDLFJCCLK): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(LGJDLFJCCLK), 0)
def EMCHOIHFOHNStartLGJDLFJCCLKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EMCHOIHFOHNAddLIGDKLEFBNM(builder, LIGDKLEFBNM): builder.PrependUint32Slot(6, LIGDKLEFBNM, 0)
def EMCHOIHFOHNAddBMICKLAGCCD(builder, BMICKLAGCCD): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(BMICKLAGCCD), 0)
def EMCHOIHFOHNStartBMICKLAGCCDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EMCHOIHFOHNAddJKONGPGFPNN(builder, JKONGPGFPNN): builder.PrependUint32Slot(8, JKONGPGFPNN, 0)
def EMCHOIHFOHNAddDGMDFCHIBKD(builder, DGMDFCHIBKD): builder.PrependUint32Slot(9, DGMDFCHIBKD, 0)
def EMCHOIHFOHNAddDINDMDCKMCP(builder, DINDMDCKMCP): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(DINDMDCKMCP), 0)
def EMCHOIHFOHNStartDINDMDCKMCPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EMCHOIHFOHNAddEJNIJBKBNGE(builder, EJNIJBKBNGE): builder.PrependUint32Slot(11, EJNIJBKBNGE, 0)
def EMCHOIHFOHNAddEBDOOBOFLFM(builder, EBDOOBOFLFM): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(EBDOOBOFLFM), 0)
def EMCHOIHFOHNStartEBDOOBOFLFMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EMCHOIHFOHNAddOBAOICIEFHO(builder, OBAOICIEFHO): builder.PrependUint32Slot(13, OBAOICIEFHO, 0)
def EMCHOIHFOHNAddFLNOLLMJOKE(builder, FLNOLLMJOKE): builder.PrependUint32Slot(14, FLNOLLMJOKE, 0)
def EMCHOIHFOHNAddKHLNIPBFCNK(builder, KHLNIPBFCNK): builder.PrependUint32Slot(15, KHLNIPBFCNK, 0)
def EMCHOIHFOHNAddEOHDEKFEONI(builder, EOHDEKFEONI): builder.PrependUint32Slot(16, EOHDEKFEONI, 0)
def EMCHOIHFOHNAddFHKGIFCFEPI(builder, FHKGIFCFEPI): builder.PrependUint32Slot(17, FHKGIFCFEPI, 0)
def EMCHOIHFOHNAddDMEMJNAEDHP(builder, DMEMJNAEDHP): builder.PrependUint32Slot(18, DMEMJNAEDHP, 0)
def EMCHOIHFOHNAddMBBCOAFGCJL(builder, MBBCOAFGCJL): builder.PrependInt32Slot(19, MBBCOAFGCJL, 0)
def EMCHOIHFOHNAddAFIBPDNHCNC(builder, AFIBPDNHCNC): builder.PrependInt32Slot(20, AFIBPDNHCNC, 0)
def EMCHOIHFOHNAddBKKAFNHOJFE(builder, BKKAFNHOJFE): builder.PrependUint32Slot(21, BKKAFNHOJFE, 0)
def EMCHOIHFOHNAddPGKFEHHDIBH(builder, PGKFEHHDIBH): builder.PrependUint32Slot(22, PGKFEHHDIBH, 0)
def EMCHOIHFOHNEnd(builder): return builder.EndObject()
