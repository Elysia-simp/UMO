# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NIKLBBMGCMJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNIKLBBMGCMJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NIKLBBMGCMJ()
        x.Init(buf, n + offset)
        return x

    # NIKLBBMGCMJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NIKLBBMGCMJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def BPAEHFFDOCC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def CJBCEMIMALC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def NOKNMHIMLAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def EOGONEDBPHN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def MIGJHIPFFCO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def KAHDGAHCCIA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def MEPPMLIHBMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def JMKPKEPKEIE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def KIHAKHJBNLB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def KBPNFEGENAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NIKLBBMGCMJ
    def JHKHCDBMCFN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NIKLBBMGCMJStart(builder): builder.StartObject(14)
def NIKLBBMGCMJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def NIKLBBMGCMJAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def NIKLBBMGCMJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def NIKLBBMGCMJAddBPAEHFFDOCC(builder, BPAEHFFDOCC): builder.PrependUint32Slot(3, BPAEHFFDOCC, 0)
def NIKLBBMGCMJAddCJBCEMIMALC(builder, CJBCEMIMALC): builder.PrependUint32Slot(4, CJBCEMIMALC, 0)
def NIKLBBMGCMJAddNOKNMHIMLAO(builder, NOKNMHIMLAO): builder.PrependInt32Slot(5, NOKNMHIMLAO, 0)
def NIKLBBMGCMJAddEOGONEDBPHN(builder, EOGONEDBPHN): builder.PrependInt32Slot(6, EOGONEDBPHN, 0)
def NIKLBBMGCMJAddMIGJHIPFFCO(builder, MIGJHIPFFCO): builder.PrependInt32Slot(7, MIGJHIPFFCO, 0)
def NIKLBBMGCMJAddKAHDGAHCCIA(builder, KAHDGAHCCIA): builder.PrependInt32Slot(8, KAHDGAHCCIA, 0)
def NIKLBBMGCMJAddMEPPMLIHBMO(builder, MEPPMLIHBMO): builder.PrependInt32Slot(9, MEPPMLIHBMO, 0)
def NIKLBBMGCMJAddJMKPKEPKEIE(builder, JMKPKEPKEIE): builder.PrependInt32Slot(10, JMKPKEPKEIE, 0)
def NIKLBBMGCMJAddKIHAKHJBNLB(builder, KIHAKHJBNLB): builder.PrependInt32Slot(11, KIHAKHJBNLB, 0)
def NIKLBBMGCMJAddKBPNFEGENAF(builder, KBPNFEGENAF): builder.PrependInt32Slot(12, KBPNFEGENAF, 0)
def NIKLBBMGCMJAddJHKHCDBMCFN(builder, JHKHCDBMCFN): builder.PrependInt32Slot(13, JHKHCDBMCFN, 0)
def NIKLBBMGCMJEnd(builder): return builder.EndObject()
