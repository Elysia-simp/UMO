# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MCCEAMFIECM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMCCEAMFIECM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MCCEAMFIECM()
        x.Init(buf, n + offset)
        return x

    # MCCEAMFIECM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MCCEAMFIECM
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .APGJGCCJNJF import APGJGCCJNJF
            obj = APGJGCCJNJF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MCCEAMFIECM
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HFNALPGCIFB import HFNALPGCIFB
            obj = HFNALPGCIFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MCCEAMFIECM
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MCCEAMFIECM
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CNOCBANEBIK import CNOCBANEBIK
            obj = CNOCBANEBIK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MCCEAMFIECM
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MCCEAMFIECM
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DMNHOBFBIJD import DMNHOBFBIJD
            obj = DMNHOBFBIJD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MCCEAMFIECM
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MCCEAMFIECMStart(builder): builder.StartObject(4)
def MCCEAMFIECMAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def MCCEAMFIECMAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def MCCEAMFIECMStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MCCEAMFIECMAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def MCCEAMFIECMStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MCCEAMFIECMAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def MCCEAMFIECMStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MCCEAMFIECMEnd(builder): return builder.EndObject()
