# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class IABACDAGDAP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIABACDAGDAP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IABACDAGDAP()
        x.Init(buf, n + offset)
        return x

    # IABACDAGDAP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IABACDAGDAP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IABACDAGDAP
    def GGJFACAIOBF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IABACDAGDAP
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IABACDAGDAP
    def PIFAMBCEMKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IABACDAGDAP
    def COPFAKAHEMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IABACDAGDAP
    def IMOOHKAFLPP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def IABACDAGDAPStart(builder): builder.StartObject(6)
def IABACDAGDAPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def IABACDAGDAPAddGGJFACAIOBF(builder, GGJFACAIOBF): builder.PrependUint32Slot(1, GGJFACAIOBF, 0)
def IABACDAGDAPAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(2, LPJPOOHJKAE, 0)
def IABACDAGDAPAddPIFAMBCEMKL(builder, PIFAMBCEMKL): builder.PrependUint32Slot(3, PIFAMBCEMKL, 0)
def IABACDAGDAPAddCOPFAKAHEMN(builder, COPFAKAHEMN): builder.PrependUint32Slot(4, COPFAKAHEMN, 0)
def IABACDAGDAPAddIMOOHKAFLPP(builder, IMOOHKAFLPP): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(IMOOHKAFLPP), 0)
def IABACDAGDAPEnd(builder): return builder.EndObject()
