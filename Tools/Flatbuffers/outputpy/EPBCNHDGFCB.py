# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EPBCNHDGFCB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEPBCNHDGFCB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EPBCNHDGFCB()
        x.Init(buf, n + offset)
        return x

    # EPBCNHDGFCB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EPBCNHDGFCB
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def NAMFJMCKFIF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def EBFEIMNOLHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def EBFEIMNOLHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def KJPLOBLDNHJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def JNBJODMLPMO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def JNBJODMLPMOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def JFKBEBPJGBH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def JFKBEBPJGBHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def BPBBMFCKGGP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def BPBBMFCKGGPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EPBCNHDGFCB
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPBCNHDGFCB
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def HFKHLKGAJEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EPBCNHDGFCB
    def LFDLHFLPCNC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EPBCNHDGFCB
    def LFDLHFLPCNCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EPBCNHDGFCBStart(builder): builder.StartObject(33)
def EPBCNHDGFCBAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def EPBCNHDGFCBAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def EPBCNHDGFCBAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def EPBCNHDGFCBAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def EPBCNHDGFCBAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def EPBCNHDGFCBAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def EPBCNHDGFCBAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(6, DEPHCHOBAJG, 0)
def EPBCNHDGFCBAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(7, DJHKCHMBGHC, 0)
def EPBCNHDGFCBAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(8, BCKOLCDDIAG, 0)
def EPBCNHDGFCBAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(9, LKIBIHGHEMA, 0)
def EPBCNHDGFCBAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(10, ANELKJCGJJL, 0)
def EPBCNHDGFCBAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(11, AEOKLKJAKHB, 0)
def EPBCNHDGFCBAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(12, HKPPDACCCOH, 0)
def EPBCNHDGFCBAddNAMFJMCKFIF(builder, NAMFJMCKFIF): builder.PrependUint32Slot(13, NAMFJMCKFIF, 0)
def EPBCNHDGFCBAddEBFEIMNOLHP(builder, EBFEIMNOLHP): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(EBFEIMNOLHP), 0)
def EPBCNHDGFCBStartEBFEIMNOLHPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(15, OGBOPHDAMCI, 0)
def EPBCNHDGFCBAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(16, HGFJBAJCFNF, 0)
def EPBCNHDGFCBAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def EPBCNHDGFCBAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(18, BNOHOIBDHLP, 0)
def EPBCNHDGFCBAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def EPBCNHDGFCBAddKJPLOBLDNHJ(builder, KJPLOBLDNHJ): builder.PrependInt32Slot(20, KJPLOBLDNHJ, 0)
def EPBCNHDGFCBAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(21, LENBJLOPKLE, 0)
def EPBCNHDGFCBAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def EPBCNHDGFCBStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddJNBJODMLPMO(builder, JNBJODMLPMO): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(JNBJODMLPMO), 0)
def EPBCNHDGFCBStartJNBJODMLPMOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddJFKBEBPJGBH(builder, JFKBEBPJGBH): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(JFKBEBPJGBH), 0)
def EPBCNHDGFCBStartJFKBEBPJGBHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddBPBBMFCKGGP(builder, BPBBMFCKGGP): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(BPBBMFCKGGP), 0)
def EPBCNHDGFCBStartBPBBMFCKGGPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def EPBCNHDGFCBAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(27, ODMLFHELAJK, 0)
def EPBCNHDGFCBAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(28, JOIACOFCFAA, 0)
def EPBCNHDGFCBAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def EPBCNHDGFCBStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependInt32Slot(30, KPCNGKDBMHA, 0)
def EPBCNHDGFCBAddHFKHLKGAJEL(builder, HFKHLKGAJEL): builder.PrependInt32Slot(31, HFKHLKGAJEL, 0)
def EPBCNHDGFCBAddLFDLHFLPCNC(builder, LFDLHFLPCNC): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(LFDLHFLPCNC), 0)
def EPBCNHDGFCBStartLFDLHFLPCNCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EPBCNHDGFCBEnd(builder): return builder.EndObject()
