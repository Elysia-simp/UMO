# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FDCDAOBKLBM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFDCDAOBKLBM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FDCDAOBKLBM()
        x.Init(buf, n + offset)
        return x

    # FDCDAOBKLBM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FDCDAOBKLBM
    def GFAJCKHBDHL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FDCDAOBKLBM
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FDCDAOBKLBM
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FDCDAOBKLBM
    def ACHEDGADKFF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FDCDAOBKLBMStart(builder): builder.StartObject(4)
def FDCDAOBKLBMAddGFAJCKHBDHL(builder, GFAJCKHBDHL): builder.PrependInt32Slot(0, GFAJCKHBDHL, 0)
def FDCDAOBKLBMAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def FDCDAOBKLBMAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def FDCDAOBKLBMAddACHEDGADKFF(builder, ACHEDGADKFF): builder.PrependInt32Slot(3, ACHEDGADKFF, 0)
def FDCDAOBKLBMEnd(builder): return builder.EndObject()
