# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OIMNNAPBCGG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOIMNNAPBCGG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OIMNNAPBCGG()
        x.Init(buf, n + offset)
        return x

    # OIMNNAPBCGG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OIMNNAPBCGG
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LJKBFOAOAJG import LJKBFOAOAJG
            obj = LJKBFOAOAJG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def KJFDCEGGPPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DPJIIOJHIDD import DPJIIOJHIDD
            obj = DPJIIOJHIDD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def KJFDCEGGPPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FEGHFAKKEGO import FEGHFAKKEGO
            obj = FEGHFAKKEGO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def AOANPDIPJJI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IICAOBEAJHF import IICAOBEAJHF
            obj = IICAOBEAJHF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def AOANPDIPJJILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def OFDNIJAEIIF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MGJAIDMKMCE import MGJAIDMKMCE
            obj = MGJAIDMKMCE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def OFDNIJAEIIFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FKOAKLHPCHP import FKOAKLHPCHP
            obj = FKOAKLHPCHP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KKJAMCMMILC import KKJAMCMMILC
            obj = KKJAMCMMILC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CFPOOLLFNPL import CFPOOLLFNPL
            obj = CFPOOLLFNPL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def GGKDJGGAFKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BPAAICMLPOI import BPAAICMLPOI
            obj = BPAAICMLPOI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def GGKDJGGAFKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KBACMNEFKPH import KBACMNEFKPH
            obj = KBACMNEFKPH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def MBCMHJLOICP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NGMAEKGBJCM import NGMAEKGBJCM
            obj = NGMAEKGBJCM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def MBCMHJLOICPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def PONHONIGHOO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DFOHOJKKKDJ import DFOHOJKKKDJ
            obj = DFOHOJKKKDJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def PONHONIGHOOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def JHDOILHEBOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ONKCPJNPOHI import ONKCPJNPOHI
            obj = ONKCPJNPOHI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def JHDOILHEBOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BDHHMNFDCJO import BDHHMNFDCJO
            obj = BDHHMNFDCJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CGCBGGNEJKJ import CGCBGGNEJKJ
            obj = CGCBGGNEJKJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIMNNAPBCGG
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CKLOMKMJBLL import CKLOMKMJBLL
            obj = CKLOMKMJBLL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OIMNNAPBCGG
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OIMNNAPBCGGStart(builder): builder.StartObject(16)
def OIMNNAPBCGGAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def OIMNNAPBCGGAddKJFDCEGGPPH(builder, KJFDCEGGPPH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KJFDCEGGPPH), 0)
def OIMNNAPBCGGStartKJFDCEGGPPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def OIMNNAPBCGGStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddAOANPDIPJJI(builder, AOANPDIPJJI): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(AOANPDIPJJI), 0)
def OIMNNAPBCGGStartAOANPDIPJJIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddOFDNIJAEIIF(builder, OFDNIJAEIIF): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(OFDNIJAEIIF), 0)
def OIMNNAPBCGGStartOFDNIJAEIIFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def OIMNNAPBCGGStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def OIMNNAPBCGGStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def OIMNNAPBCGGStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddGGKDJGGAFKA(builder, GGKDJGGAFKA): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(GGKDJGGAFKA), 0)
def OIMNNAPBCGGStartGGKDJGGAFKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def OIMNNAPBCGGStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddMBCMHJLOICP(builder, MBCMHJLOICP): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(MBCMHJLOICP), 0)
def OIMNNAPBCGGStartMBCMHJLOICPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddPONHONIGHOO(builder, PONHONIGHOO): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(PONHONIGHOO), 0)
def OIMNNAPBCGGStartPONHONIGHOOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddJHDOILHEBOG(builder, JHDOILHEBOG): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(JHDOILHEBOG), 0)
def OIMNNAPBCGGStartJHDOILHEBOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def OIMNNAPBCGGStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def OIMNNAPBCGGStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def OIMNNAPBCGGStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIMNNAPBCGGEnd(builder): return builder.EndObject()
