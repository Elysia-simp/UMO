# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BKAHCKIDMFJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBKAHCKIDMFJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BKAHCKIDMFJ()
        x.Init(buf, n + offset)
        return x

    # BKAHCKIDMFJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BKAHCKIDMFJ
    def BPLBMCHILPG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # BKAHCKIDMFJ
    def DNPMJEFJFCN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # BKAHCKIDMFJ
    def NIBEHMBNEOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def BKAHCKIDMFJStart(builder): builder.StartObject(3)
def BKAHCKIDMFJAddBPLBMCHILPG(builder, BPLBMCHILPG): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BPLBMCHILPG), 0)
def BKAHCKIDMFJAddDNPMJEFJFCN(builder, DNPMJEFJFCN): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(DNPMJEFJFCN), 0)
def BKAHCKIDMFJAddNIBEHMBNEOM(builder, NIBEHMBNEOM): builder.PrependUint32Slot(2, NIBEHMBNEOM, 0)
def BKAHCKIDMFJEnd(builder): return builder.EndObject()
