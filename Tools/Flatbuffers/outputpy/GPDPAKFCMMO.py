# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GPDPAKFCMMO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGPDPAKFCMMO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GPDPAKFCMMO()
        x.Init(buf, n + offset)
        return x

    # GPDPAKFCMMO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GPDPAKFCMMO
    def FBFKOOCONJD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HHHCEGPGJII import HHHCEGPGJII
            obj = HHHCEGPGJII()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def FBFKOOCONJDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GPDPAKFCMMO
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DBDMELPOPMH import DBDMELPOPMH
            obj = DBDMELPOPMH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GPDPAKFCMMO
    def LDCIJBPBLPP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KBKAEPDDIME import KBKAEPDDIME
            obj = KBKAEPDDIME()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def LDCIJBPBLPPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GPDPAKFCMMO
    def FHDMFCBDPHA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KPCLMCOLBNC import KPCLMCOLBNC
            obj = KPCLMCOLBNC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def FHDMFCBDPHALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GPDPAKFCMMO
    def LCCFMDJBNAB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .INOFLJPLFAN import INOFLJPLFAN
            obj = INOFLJPLFAN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def LCCFMDJBNABLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GPDPAKFCMMO
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OAIMGJACOFK import OAIMGJACOFK
            obj = OAIMGJACOFK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GPDPAKFCMMO
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def GPDPAKFCMMOStart(builder): builder.StartObject(6)
def GPDPAKFCMMOAddFBFKOOCONJD(builder, FBFKOOCONJD): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(FBFKOOCONJD), 0)
def GPDPAKFCMMOStartFBFKOOCONJDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def GPDPAKFCMMOStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOAddLDCIJBPBLPP(builder, LDCIJBPBLPP): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LDCIJBPBLPP), 0)
def GPDPAKFCMMOStartLDCIJBPBLPPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOAddFHDMFCBDPHA(builder, FHDMFCBDPHA): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(FHDMFCBDPHA), 0)
def GPDPAKFCMMOStartFHDMFCBDPHAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOAddLCCFMDJBNAB(builder, LCCFMDJBNAB): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(LCCFMDJBNAB), 0)
def GPDPAKFCMMOStartLCCFMDJBNABVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def GPDPAKFCMMOStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GPDPAKFCMMOEnd(builder): return builder.EndObject()
