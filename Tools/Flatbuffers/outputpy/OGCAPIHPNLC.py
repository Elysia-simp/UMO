# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OGCAPIHPNLC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOGCAPIHPNLC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OGCAPIHPNLC()
        x.Init(buf, n + offset)
        return x

    # OGCAPIHPNLC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OGCAPIHPNLC
    def AMNNIENGDHI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BPDPIFOLPDM import BPDPIFOLPDM
            obj = BPDPIFOLPDM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGCAPIHPNLC
    def AMNNIENGDHILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGCAPIHPNLC
    def OAHKOBDODPG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HJIPOJKELHB import HJIPOJKELHB
            obj = HJIPOJKELHB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGCAPIHPNLC
    def OAHKOBDODPGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGCAPIHPNLC
    def PMHBCDENHAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GJNHKIDNFJO import GJNHKIDNFJO
            obj = GJNHKIDNFJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGCAPIHPNLC
    def PMHBCDENHAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGCAPIHPNLC
    def DABMEKCEBEP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .POLDFBLCDFN import POLDFBLCDFN
            obj = POLDFBLCDFN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGCAPIHPNLC
    def DABMEKCEBEPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OGCAPIHPNLC
    def EPPNEJBPKMF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JMGNAIJPDBF import JMGNAIJPDBF
            obj = JMGNAIJPDBF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OGCAPIHPNLC
    def EPPNEJBPKMFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OGCAPIHPNLCStart(builder): builder.StartObject(5)
def OGCAPIHPNLCAddAMNNIENGDHI(builder, AMNNIENGDHI): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(AMNNIENGDHI), 0)
def OGCAPIHPNLCStartAMNNIENGDHIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGCAPIHPNLCAddOAHKOBDODPG(builder, OAHKOBDODPG): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(OAHKOBDODPG), 0)
def OGCAPIHPNLCStartOAHKOBDODPGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGCAPIHPNLCAddPMHBCDENHAI(builder, PMHBCDENHAI): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(PMHBCDENHAI), 0)
def OGCAPIHPNLCStartPMHBCDENHAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGCAPIHPNLCAddDABMEKCEBEP(builder, DABMEKCEBEP): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DABMEKCEBEP), 0)
def OGCAPIHPNLCStartDABMEKCEBEPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGCAPIHPNLCAddEPPNEJBPKMF(builder, EPPNEJBPKMF): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(EPPNEJBPKMF), 0)
def OGCAPIHPNLCStartEPPNEJBPKMFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OGCAPIHPNLCEnd(builder): return builder.EndObject()
