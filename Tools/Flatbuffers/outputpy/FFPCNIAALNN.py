# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FFPCNIAALNN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFFPCNIAALNN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FFPCNIAALNN()
        x.Init(buf, n + offset)
        return x

    # FFPCNIAALNN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FFPCNIAALNN
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FFPCNIAALNN
    def CLGAMGOJHHH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FFPCNIAALNN
    def CLGAMGOJHHHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FFPCNIAALNN
    def LGEDAJAFHGG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FFPCNIAALNN
    def BJHDJMNLEPP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FFPCNIAALNN
    def BJHDJMNLEPPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FFPCNIAALNN
    def IKDLGFEPPDB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FFPCNIAALNN
    def IKDLGFEPPDBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FFPCNIAALNNStart(builder): builder.StartObject(5)
def FFPCNIAALNNAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def FFPCNIAALNNAddCLGAMGOJHHH(builder, CLGAMGOJHHH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CLGAMGOJHHH), 0)
def FFPCNIAALNNStartCLGAMGOJHHHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FFPCNIAALNNAddLGEDAJAFHGG(builder, LGEDAJAFHGG): builder.PrependInt32Slot(2, LGEDAJAFHGG, 0)
def FFPCNIAALNNAddBJHDJMNLEPP(builder, BJHDJMNLEPP): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(BJHDJMNLEPP), 0)
def FFPCNIAALNNStartBJHDJMNLEPPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FFPCNIAALNNAddIKDLGFEPPDB(builder, IKDLGFEPPDB): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IKDLGFEPPDB), 0)
def FFPCNIAALNNStartIKDLGFEPPDBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FFPCNIAALNNEnd(builder): return builder.EndObject()
