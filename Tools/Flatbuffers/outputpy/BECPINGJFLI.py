# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BECPINGJFLI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBECPINGJFLI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BECPINGJFLI()
        x.Init(buf, n + offset)
        return x

    # BECPINGJFLI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BECPINGJFLI
    def FMCNJAKFCID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OALBFMECCIL import OALBFMECCIL
            obj = OALBFMECCIL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BECPINGJFLI
    def FMCNJAKFCIDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def COJCIOPMDIE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IFOEEDHKMMF import IFOEEDHKMMF
            obj = IFOEEDHKMMF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BECPINGJFLI
    def COJCIOPMDIELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def BICLHKLAJLP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KAKPINDJHMG import KAKPINDJHMG
            obj = KAKPINDJHMG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BECPINGJFLI
    def BICLHKLAJLPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def NCBNELGABFH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EHCHNFGDMIN import EHCHNFGDMIN
            obj = EHCHNFGDMIN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BECPINGJFLI
    def NCBNELGABFHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def NGKPDABJNMK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BECPINGJFLI
    def NGKPDABJNMKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def AOKADHKMIFM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BECPINGJFLI
    def AOKADHKMIFMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def AKMNCOGDAIM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BECPINGJFLI
    def AKMNCOGDAIMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def LAHBHILKOHD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BECPINGJFLI
    def LAHBHILKOHDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BECPINGJFLI
    def NIGBGMIANCE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BECPINGJFLI
    def NIGBGMIANCELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def BECPINGJFLIStart(builder): builder.StartObject(9)
def BECPINGJFLIAddFMCNJAKFCID(builder, FMCNJAKFCID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(FMCNJAKFCID), 0)
def BECPINGJFLIStartFMCNJAKFCIDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddCOJCIOPMDIE(builder, COJCIOPMDIE): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(COJCIOPMDIE), 0)
def BECPINGJFLIStartCOJCIOPMDIEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddBICLHKLAJLP(builder, BICLHKLAJLP): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(BICLHKLAJLP), 0)
def BECPINGJFLIStartBICLHKLAJLPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddNCBNELGABFH(builder, NCBNELGABFH): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NCBNELGABFH), 0)
def BECPINGJFLIStartNCBNELGABFHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddNGKPDABJNMK(builder, NGKPDABJNMK): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NGKPDABJNMK), 0)
def BECPINGJFLIStartNGKPDABJNMKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddAOKADHKMIFM(builder, AOKADHKMIFM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AOKADHKMIFM), 0)
def BECPINGJFLIStartAOKADHKMIFMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddAKMNCOGDAIM(builder, AKMNCOGDAIM): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(AKMNCOGDAIM), 0)
def BECPINGJFLIStartAKMNCOGDAIMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddLAHBHILKOHD(builder, LAHBHILKOHD): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(LAHBHILKOHD), 0)
def BECPINGJFLIStartLAHBHILKOHDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIAddNIGBGMIANCE(builder, NIGBGMIANCE): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NIGBGMIANCE), 0)
def BECPINGJFLIStartNIGBGMIANCEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BECPINGJFLIEnd(builder): return builder.EndObject()
