# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KCMFPGDPCIG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKCMFPGDPCIG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KCMFPGDPCIG()
        x.Init(buf, n + offset)
        return x

    # KCMFPGDPCIG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KCMFPGDPCIG
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LMAOEFHMHNN import LMAOEFHMHNN
            obj = LMAOEFHMHNN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def POKLHFPANOF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LNEJLNKGPNE import LNEJLNKGPNE
            obj = LNEJLNKGPNE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def POKLHFPANOFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NFMLBJAPPIO import NFMLBJAPPIO
            obj = NFMLBJAPPIO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NHANJELFBGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NCIJKPJKNNJ import NCIJKPJKNNJ
            obj = NCIJKPJKNNJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NHANJELFBGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NEBBOBFGPPC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JBCLJHNMAEL import JBCLJHNMAEL
            obj = JBCLJHNMAEL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NEBBOBFGPPCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def AFJJPJKCDCM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HCIHHMAFHBD import HCIHHMAFHBD
            obj = HCIHHMAFHBD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def AFJJPJKCDCMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def MPLCLCLBJPA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MIICCHHAGJF import MIICCHHAGJF
            obj = MIICCHHAGJF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def MPLCLCLBJPALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def DDLMFMGDBIL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ECDHHNAFLCJ import ECDHHNAFLCJ
            obj = ECDHHNAFLCJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def DDLMFMGDBILLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DNHBOHGLGHF import DNHBOHGLGHF
            obj = DNHBOHGLGHF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EFEDOIIDFEC import EFEDOIIDFEC
            obj = EFEDOIIDFEC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def FHLMJLCFFFK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GHKANHJNIJD import GHKANHJNIJD
            obj = GHKANHJNIJD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def FHLMJLCFFFKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def CJCGFACIGEG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LFNFJEBKHGL import LFNFJEBKHGL
            obj = LFNFJEBKHGL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def CJCGFACIGEGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NCLHKEHIJJC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MOFHLFIPPNP import MOFHLFIPPNP
            obj = MOFHLFIPPNP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NCLHKEHIJJCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def HLCDDAGIMLE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LHNCOEINPJB import LHNCOEINPJB
            obj = LHNCOEINPJB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def HLCDDAGIMLELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def NNIGHPIKHNJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MKOEIFFJPKH import MKOEIFFJPKH
            obj = MKOEIFFJPKH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def NNIGHPIKHNJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def IEGBGJGGNJI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PKBJAHIOPOM import PKBJAHIOPOM
            obj = PKBJAHIOPOM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def IEGBGJGGNJILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def KMDPJKDLAAH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GIGLCNHCNEN import GIGLCNHCNEN
            obj = GIGLCNHCNEN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def KMDPJKDLAAHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def PKKCHMEBNOK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ILCAGMDDGIO import ILCAGMDDGIO
            obj = ILCAGMDDGIO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def PKKCHMEBNOKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def KCOMOLJANNE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ELJJEFEIEIK import ELJJEFEIEIK
            obj = ELJJEFEIEIK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def KCOMOLJANNELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KCMFPGDPCIG
    def PEJBPICDONN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PGFKEJKOOJD import PGFKEJKOOJD
            obj = PGFKEJKOOJD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KCMFPGDPCIG
    def PEJBPICDONNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KCMFPGDPCIGStart(builder): builder.StartObject(20)
def KCMFPGDPCIGAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def KCMFPGDPCIGAddPOKLHFPANOF(builder, POKLHFPANOF): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(POKLHFPANOF), 0)
def KCMFPGDPCIGStartPOKLHFPANOFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def KCMFPGDPCIGStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNHANJELFBGJ(builder, NHANJELFBGJ): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NHANJELFBGJ), 0)
def KCMFPGDPCIGStartNHANJELFBGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNEBBOBFGPPC(builder, NEBBOBFGPPC): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NEBBOBFGPPC), 0)
def KCMFPGDPCIGStartNEBBOBFGPPCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddAFJJPJKCDCM(builder, AFJJPJKCDCM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AFJJPJKCDCM), 0)
def KCMFPGDPCIGStartAFJJPJKCDCMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddMPLCLCLBJPA(builder, MPLCLCLBJPA): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(MPLCLCLBJPA), 0)
def KCMFPGDPCIGStartMPLCLCLBJPAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddDDLMFMGDBIL(builder, DDLMFMGDBIL): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(DDLMFMGDBIL), 0)
def KCMFPGDPCIGStartDDLMFMGDBILVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def KCMFPGDPCIGStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def KCMFPGDPCIGStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddFHLMJLCFFFK(builder, FHLMJLCFFFK): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(FHLMJLCFFFK), 0)
def KCMFPGDPCIGStartFHLMJLCFFFKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddCJCGFACIGEG(builder, CJCGFACIGEG): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(CJCGFACIGEG), 0)
def KCMFPGDPCIGStartCJCGFACIGEGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNCLHKEHIJJC(builder, NCLHKEHIJJC): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(NCLHKEHIJJC), 0)
def KCMFPGDPCIGStartNCLHKEHIJJCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddHLCDDAGIMLE(builder, HLCDDAGIMLE): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(HLCDDAGIMLE), 0)
def KCMFPGDPCIGStartHLCDDAGIMLEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddNNIGHPIKHNJ(builder, NNIGHPIKHNJ): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(NNIGHPIKHNJ), 0)
def KCMFPGDPCIGStartNNIGHPIKHNJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddIEGBGJGGNJI(builder, IEGBGJGGNJI): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(IEGBGJGGNJI), 0)
def KCMFPGDPCIGStartIEGBGJGGNJIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddKMDPJKDLAAH(builder, KMDPJKDLAAH): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(KMDPJKDLAAH), 0)
def KCMFPGDPCIGStartKMDPJKDLAAHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddPKKCHMEBNOK(builder, PKKCHMEBNOK): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(PKKCHMEBNOK), 0)
def KCMFPGDPCIGStartPKKCHMEBNOKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddKCOMOLJANNE(builder, KCOMOLJANNE): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(KCOMOLJANNE), 0)
def KCMFPGDPCIGStartKCOMOLJANNEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGAddPEJBPICDONN(builder, PEJBPICDONN): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(PEJBPICDONN), 0)
def KCMFPGDPCIGStartPEJBPICDONNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KCMFPGDPCIGEnd(builder): return builder.EndObject()
