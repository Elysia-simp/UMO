# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class APKGJCPIHGB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAPKGJCPIHGB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = APKGJCPIHGB()
        x.Init(buf, n + offset)
        return x

    # APKGJCPIHGB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # APKGJCPIHGB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def DEIHLMHACCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def JHAMBKOEJPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def MJHPFNPCLBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # APKGJCPIHGB
    def JDKBBEIBJBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def APKGJCPIHGBStart(builder): builder.StartObject(9)
def APKGJCPIHGBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def APKGJCPIHGBAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def APKGJCPIHGBAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def APKGJCPIHGBAddDEIHLMHACCH(builder, DEIHLMHACCH): builder.PrependUint32Slot(3, DEIHLMHACCH, 0)
def APKGJCPIHGBAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependUint32Slot(4, LMLNKHMPOIG, 0)
def APKGJCPIHGBAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(5, ODBPKGJPLMD, 0)
def APKGJCPIHGBAddJHAMBKOEJPL(builder, JHAMBKOEJPL): builder.PrependInt32Slot(6, JHAMBKOEJPL, 0)
def APKGJCPIHGBAddMJHPFNPCLBD(builder, MJHPFNPCLBD): builder.PrependInt32Slot(7, MJHPFNPCLBD, 0)
def APKGJCPIHGBAddJDKBBEIBJBD(builder, JDKBBEIBJBD): builder.PrependInt32Slot(8, JDKBBEIBJBD, 0)
def APKGJCPIHGBEnd(builder): return builder.EndObject()
