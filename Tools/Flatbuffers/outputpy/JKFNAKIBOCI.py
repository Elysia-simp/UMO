# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JKFNAKIBOCI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJKFNAKIBOCI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JKFNAKIBOCI()
        x.Init(buf, n + offset)
        return x

    # JKFNAKIBOCI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JKFNAKIBOCI
    def PMNLBNBKCDM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IGBINOLLPPB import IGBINOLLPPB
            obj = IGBINOLLPPB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def PMNLBNBKCDMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def IPFGDNLPHFA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CDCEKBNNJLL import CDCEKBNNJLL
            obj = CDCEKBNNJLL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def IPFGDNLPHFALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def CGHMONDBJAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FELDPFHIOHB import FELDPFHIOHB
            obj = FELDPFHIOHB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def CGHMONDBJAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def GCHBPMOLDHO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .COJOFJEOJDI import COJOFJEOJDI
            obj = COJOFJEOJDI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def GCHBPMOLDHOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def GPKPLHPBDJO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HMAOBLEJDAH import HMAOBLEJDAH
            obj = HMAOBLEJDAH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def GPKPLHPBDJOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def PGLIDFOBMEF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CGNIMFAHBJM import CGNIMFAHBJM
            obj = CGNIMFAHBJM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def PGLIDFOBMEFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def ENMMCFBMAGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EKIPCOEPMIF import EKIPCOEPMIF
            obj = EKIPCOEPMIF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def ENMMCFBMAGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def GCANFKHNPMB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BMALHADEABJ import BMALHADEABJ
            obj = BMALHADEABJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def GCANFKHNPMBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def CCBLOPIOPEG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JDNHKBBPAOI import JDNHKBBPAOI
            obj = JDNHKBBPAOI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def CCBLOPIOPEGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JKFNAKIBOCI
    def CGPPMMAJNGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JCFEECCNGIF import JCFEECCNGIF
            obj = JCFEECCNGIF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JKFNAKIBOCI
    def CGPPMMAJNGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def JKFNAKIBOCIStart(builder): builder.StartObject(10)
def JKFNAKIBOCIAddPMNLBNBKCDM(builder, PMNLBNBKCDM): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(PMNLBNBKCDM), 0)
def JKFNAKIBOCIStartPMNLBNBKCDMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddIPFGDNLPHFA(builder, IPFGDNLPHFA): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IPFGDNLPHFA), 0)
def JKFNAKIBOCIStartIPFGDNLPHFAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddCGHMONDBJAI(builder, CGHMONDBJAI): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CGHMONDBJAI), 0)
def JKFNAKIBOCIStartCGHMONDBJAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddGCHBPMOLDHO(builder, GCHBPMOLDHO): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GCHBPMOLDHO), 0)
def JKFNAKIBOCIStartGCHBPMOLDHOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddGPKPLHPBDJO(builder, GPKPLHPBDJO): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GPKPLHPBDJO), 0)
def JKFNAKIBOCIStartGPKPLHPBDJOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddPGLIDFOBMEF(builder, PGLIDFOBMEF): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(PGLIDFOBMEF), 0)
def JKFNAKIBOCIStartPGLIDFOBMEFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddENMMCFBMAGJ(builder, ENMMCFBMAGJ): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ENMMCFBMAGJ), 0)
def JKFNAKIBOCIStartENMMCFBMAGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddGCANFKHNPMB(builder, GCANFKHNPMB): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(GCANFKHNPMB), 0)
def JKFNAKIBOCIStartGCANFKHNPMBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddCCBLOPIOPEG(builder, CCBLOPIOPEG): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(CCBLOPIOPEG), 0)
def JKFNAKIBOCIStartCCBLOPIOPEGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIAddCGPPMMAJNGN(builder, CGPPMMAJNGN): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(CGPPMMAJNGN), 0)
def JKFNAKIBOCIStartCGPPMMAJNGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JKFNAKIBOCIEnd(builder): return builder.EndObject()
