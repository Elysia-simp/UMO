# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LNGIOBJMNKN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLNGIOBJMNKN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LNGIOBJMNKN()
        x.Init(buf, n + offset)
        return x

    # LNGIOBJMNKN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LNGIOBJMNKN
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def CDDMLDEPLAC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def DDMBKEJNPJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def FGONCIDNPDP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def KKJFKKJHCAI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def JPKONAPENGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def JJPIKBCKLGF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def ENPKFDIPGPF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def GJOHJJMJEND(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LNGIOBJMNKN
    def GJOHJJMJENDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LNGIOBJMNKN
    def NLNDCHHFDPC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LNGIOBJMNKN
    def NLNDCHHFDPCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LNGIOBJMNKN
    def DEICBCKPFNP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def EOOJFOJPOEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def KCPNGJFPKHG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LNGIOBJMNKN
    def KCPNGJFPKHGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LNGIOBJMNKN
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNGIOBJMNKN
    def AGOIMGHMGOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LNGIOBJMNKNStart(builder): builder.StartObject(19)
def LNGIOBJMNKNAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def LNGIOBJMNKNAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def LNGIOBJMNKNAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def LNGIOBJMNKNAddCDDMLDEPLAC(builder, CDDMLDEPLAC): builder.PrependInt32Slot(3, CDDMLDEPLAC, 0)
def LNGIOBJMNKNAddDDMBKEJNPJK(builder, DDMBKEJNPJK): builder.PrependInt32Slot(4, DDMBKEJNPJK, 0)
def LNGIOBJMNKNAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(5, LMLNKHMPOIG, 0)
def LNGIOBJMNKNAddFGONCIDNPDP(builder, FGONCIDNPDP): builder.PrependInt32Slot(6, FGONCIDNPDP, 0)
def LNGIOBJMNKNAddKKJFKKJHCAI(builder, KKJFKKJHCAI): builder.PrependInt32Slot(7, KKJFKKJHCAI, 0)
def LNGIOBJMNKNAddJPKONAPENGB(builder, JPKONAPENGB): builder.PrependUint32Slot(8, JPKONAPENGB, 0)
def LNGIOBJMNKNAddJJPIKBCKLGF(builder, JJPIKBCKLGF): builder.PrependInt32Slot(9, JJPIKBCKLGF, 0)
def LNGIOBJMNKNAddENPKFDIPGPF(builder, ENPKFDIPGPF): builder.PrependInt32Slot(10, ENPKFDIPGPF, 0)
def LNGIOBJMNKNAddGJOHJJMJEND(builder, GJOHJJMJEND): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(GJOHJJMJEND), 0)
def LNGIOBJMNKNStartGJOHJJMJENDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LNGIOBJMNKNAddNLNDCHHFDPC(builder, NLNDCHHFDPC): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(NLNDCHHFDPC), 0)
def LNGIOBJMNKNStartNLNDCHHFDPCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LNGIOBJMNKNAddDEICBCKPFNP(builder, DEICBCKPFNP): builder.PrependInt32Slot(13, DEICBCKPFNP, 0)
def LNGIOBJMNKNAddEOOJFOJPOEE(builder, EOOJFOJPOEE): builder.PrependInt32Slot(14, EOOJFOJPOEE, 0)
def LNGIOBJMNKNAddKCPNGJFPKHG(builder, KCPNGJFPKHG): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(KCPNGJFPKHG), 0)
def LNGIOBJMNKNStartKCPNGJFPKHGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LNGIOBJMNKNAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(16, NJLJEKDBPCH, 0)
def LNGIOBJMNKNAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(17, MAOAGDBDBIB, 0)
def LNGIOBJMNKNAddAGOIMGHMGOH(builder, AGOIMGHMGOH): builder.PrependInt32Slot(18, AGOIMGHMGOH, 0)
def LNGIOBJMNKNEnd(builder): return builder.EndObject()
