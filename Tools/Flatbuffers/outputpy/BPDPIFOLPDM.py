# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BPDPIFOLPDM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBPDPIFOLPDM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BPDPIFOLPDM()
        x.Init(buf, n + offset)
        return x

    # BPDPIFOLPDM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BPDPIFOLPDM
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def DDMBKEJNPJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def JLBMBKHBKBG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def EHIBOEAILLI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def OILFLMOBFJM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def KBGHNCHBLHN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def DAEBPADJEOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def JMADKJNCBCO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def DIGHIPFGPAP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def GNPNCHPOGNL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def CODDJJEBDNG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BPDPIFOLPDM
    def PGEKHEFEBOC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BPDPIFOLPDM
    def PGEKHEFEBOCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BPDPIFOLPDM
    def IIFJDHKAMED(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BPDPIFOLPDM
    def IIFJDHKAMEDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BPDPIFOLPDM
    def FCDHEJINFPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BPDPIFOLPDM
    def FCDHEJINFPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BPDPIFOLPDM
    def MFKMAPAOPLN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BPDPIFOLPDMStart(builder): builder.StartObject(17)
def BPDPIFOLPDMAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def BPDPIFOLPDMAddDDMBKEJNPJK(builder, DDMBKEJNPJK): builder.PrependUint32Slot(1, DDMBKEJNPJK, 0)
def BPDPIFOLPDMAddJLBMBKHBKBG(builder, JLBMBKHBKBG): builder.PrependUint32Slot(2, JLBMBKHBKBG, 0)
def BPDPIFOLPDMAddEHIBOEAILLI(builder, EHIBOEAILLI): builder.PrependUint32Slot(3, EHIBOEAILLI, 0)
def BPDPIFOLPDMAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def BPDPIFOLPDMAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(5, OFMGALJGDAO, 0)
def BPDPIFOLPDMAddOILFLMOBFJM(builder, OILFLMOBFJM): builder.PrependInt32Slot(6, OILFLMOBFJM, 0)
def BPDPIFOLPDMAddKBGHNCHBLHN(builder, KBGHNCHBLHN): builder.PrependInt32Slot(7, KBGHNCHBLHN, 0)
def BPDPIFOLPDMAddDAEBPADJEOK(builder, DAEBPADJEOK): builder.PrependInt32Slot(8, DAEBPADJEOK, 0)
def BPDPIFOLPDMAddJMADKJNCBCO(builder, JMADKJNCBCO): builder.PrependInt32Slot(9, JMADKJNCBCO, 0)
def BPDPIFOLPDMAddDIGHIPFGPAP(builder, DIGHIPFGPAP): builder.PrependInt32Slot(10, DIGHIPFGPAP, 0)
def BPDPIFOLPDMAddGNPNCHPOGNL(builder, GNPNCHPOGNL): builder.PrependInt32Slot(11, GNPNCHPOGNL, 0)
def BPDPIFOLPDMAddCODDJJEBDNG(builder, CODDJJEBDNG): builder.PrependInt32Slot(12, CODDJJEBDNG, 0)
def BPDPIFOLPDMAddPGEKHEFEBOC(builder, PGEKHEFEBOC): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(PGEKHEFEBOC), 0)
def BPDPIFOLPDMStartPGEKHEFEBOCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BPDPIFOLPDMAddIIFJDHKAMED(builder, IIFJDHKAMED): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(IIFJDHKAMED), 0)
def BPDPIFOLPDMStartIIFJDHKAMEDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BPDPIFOLPDMAddFCDHEJINFPH(builder, FCDHEJINFPH): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(FCDHEJINFPH), 0)
def BPDPIFOLPDMStartFCDHEJINFPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BPDPIFOLPDMAddMFKMAPAOPLN(builder, MFKMAPAOPLN): builder.PrependInt32Slot(16, MFKMAPAOPLN, 0)
def BPDPIFOLPDMEnd(builder): return builder.EndObject()
