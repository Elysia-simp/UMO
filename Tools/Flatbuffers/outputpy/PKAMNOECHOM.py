# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PKAMNOECHOM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPKAMNOECHOM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PKAMNOECHOM()
        x.Init(buf, n + offset)
        return x

    # PKAMNOECHOM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PKAMNOECHOM
    def IPCBHGGLEJA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PKAMNOECHOM
    def NABLNBMACHL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PKAMNOECHOM
    def OPDBBGBMPMM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PKAMNOECHOM
    def LMKLPPINLOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PKAMNOECHOM
    def LGJDLFJCCLK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PKAMNOECHOM
    def LGJDLFJCCLKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PKAMNOECHOM
    def LIGDKLEFBNM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PKAMNOECHOM
    def BMICKLAGCCD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PKAMNOECHOM
    def BMICKLAGCCDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PKAMNOECHOM
    def FLNOLLMJOKE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def PKAMNOECHOMStart(builder): builder.StartObject(8)
def PKAMNOECHOMAddIPCBHGGLEJA(builder, IPCBHGGLEJA): builder.PrependUint32Slot(0, IPCBHGGLEJA, 0)
def PKAMNOECHOMAddNABLNBMACHL(builder, NABLNBMACHL): builder.PrependUint32Slot(1, NABLNBMACHL, 0)
def PKAMNOECHOMAddOPDBBGBMPMM(builder, OPDBBGBMPMM): builder.PrependUint32Slot(2, OPDBBGBMPMM, 0)
def PKAMNOECHOMAddLMKLPPINLOK(builder, LMKLPPINLOK): builder.PrependUint32Slot(3, LMKLPPINLOK, 0)
def PKAMNOECHOMAddLGJDLFJCCLK(builder, LGJDLFJCCLK): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(LGJDLFJCCLK), 0)
def PKAMNOECHOMStartLGJDLFJCCLKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PKAMNOECHOMAddLIGDKLEFBNM(builder, LIGDKLEFBNM): builder.PrependUint32Slot(5, LIGDKLEFBNM, 0)
def PKAMNOECHOMAddBMICKLAGCCD(builder, BMICKLAGCCD): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(BMICKLAGCCD), 0)
def PKAMNOECHOMStartBMICKLAGCCDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PKAMNOECHOMAddFLNOLLMJOKE(builder, FLNOLLMJOKE): builder.PrependUint32Slot(7, FLNOLLMJOKE, 0)
def PKAMNOECHOMEnd(builder): return builder.EndObject()
