# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BEILOHDFALJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBEILOHDFALJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BEILOHDFALJ()
        x.Init(buf, n + offset)
        return x

    # BEILOHDFALJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BEILOHDFALJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def DEIHLMHACCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def EMGBMDNPBIC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def DMEMJNAEDHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def PJEDCALAIFP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def KCEANJAMDBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def DJCABBBPOPB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def OJFAPOIKHNG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def HMNFFFLCANH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def JHAMBKOEJPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def MJHPFNPCLBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BEILOHDFALJ
    def JDKBBEIBJBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BEILOHDFALJStart(builder): builder.StartObject(18)
def BEILOHDFALJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def BEILOHDFALJAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def BEILOHDFALJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def BEILOHDFALJAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(3, LPJPOOHJKAE, 0)
def BEILOHDFALJAddDEIHLMHACCH(builder, DEIHLMHACCH): builder.PrependInt32Slot(4, DEIHLMHACCH, 0)
def BEILOHDFALJAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependUint32Slot(5, LMLNKHMPOIG, 0)
def BEILOHDFALJAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(6, ODBPKGJPLMD, 0)
def BEILOHDFALJAddEMGBMDNPBIC(builder, EMGBMDNPBIC): builder.PrependUint32Slot(7, EMGBMDNPBIC, 0)
def BEILOHDFALJAddDMEMJNAEDHP(builder, DMEMJNAEDHP): builder.PrependUint32Slot(8, DMEMJNAEDHP, 0)
def BEILOHDFALJAddPJEDCALAIFP(builder, PJEDCALAIFP): builder.PrependInt32Slot(9, PJEDCALAIFP, 0)
def BEILOHDFALJAddKCEANJAMDBD(builder, KCEANJAMDBD): builder.PrependInt32Slot(10, KCEANJAMDBD, 0)
def BEILOHDFALJAddDJCABBBPOPB(builder, DJCABBBPOPB): builder.PrependInt32Slot(11, DJCABBBPOPB, 0)
def BEILOHDFALJAddOJFAPOIKHNG(builder, OJFAPOIKHNG): builder.PrependUint32Slot(12, OJFAPOIKHNG, 0)
def BEILOHDFALJAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependInt32Slot(13, AEAKMMJLLDK, 0)
def BEILOHDFALJAddHMNFFFLCANH(builder, HMNFFFLCANH): builder.PrependInt32Slot(14, HMNFFFLCANH, 0)
def BEILOHDFALJAddJHAMBKOEJPL(builder, JHAMBKOEJPL): builder.PrependInt32Slot(15, JHAMBKOEJPL, 0)
def BEILOHDFALJAddMJHPFNPCLBD(builder, MJHPFNPCLBD): builder.PrependInt32Slot(16, MJHPFNPCLBD, 0)
def BEILOHDFALJAddJDKBBEIBJBD(builder, JDKBBEIBJBD): builder.PrependInt32Slot(17, JDKBBEIBJBD, 0)
def BEILOHDFALJEnd(builder): return builder.EndObject()
