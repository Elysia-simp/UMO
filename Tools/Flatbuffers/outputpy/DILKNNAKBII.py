# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DILKNNAKBII(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDILKNNAKBII(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DILKNNAKBII()
        x.Init(buf, n + offset)
        return x

    # DILKNNAKBII
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DILKNNAKBII
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DILKNNAKBII
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DILKNNAKBII
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DILKNNAKBII
    def PIFAMBCEMKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DILKNNAKBII
    def AGPECCAGHFL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DILKNNAKBII
    def AGPECCAGHFLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DILKNNAKBIIStart(builder): builder.StartObject(5)
def DILKNNAKBIIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def DILKNNAKBIIAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def DILKNNAKBIIAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(2, LMLNKHMPOIG, 0)
def DILKNNAKBIIAddPIFAMBCEMKL(builder, PIFAMBCEMKL): builder.PrependInt32Slot(3, PIFAMBCEMKL, 0)
def DILKNNAKBIIAddAGPECCAGHFL(builder, AGPECCAGHFL): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(AGPECCAGHFL), 0)
def DILKNNAKBIIStartAGPECCAGHFLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DILKNNAKBIIEnd(builder): return builder.EndObject()
