# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HJHAEAPNEMD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHJHAEAPNEMD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HJHAEAPNEMD()
        x.Init(buf, n + offset)
        return x

    # HJHAEAPNEMD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HJHAEAPNEMD
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def IPHMJNCEPIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def JFJCBFNEOAB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def GPLJLPKJPAM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def DKMLEDJJFOI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HJHAEAPNEMD
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HJHAEAPNEMDStart(builder): builder.StartObject(10)
def HJHAEAPNEMDAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def HJHAEAPNEMDAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def HJHAEAPNEMDAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def HJHAEAPNEMDAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(3, NJLJEKDBPCH, 0)
def HJHAEAPNEMDAddIPHMJNCEPIJ(builder, IPHMJNCEPIJ): builder.PrependInt32Slot(4, IPHMJNCEPIJ, 0)
def HJHAEAPNEMDAddJFJCBFNEOAB(builder, JFJCBFNEOAB): builder.PrependInt32Slot(5, JFJCBFNEOAB, 0)
def HJHAEAPNEMDAddGPLJLPKJPAM(builder, GPLJLPKJPAM): builder.PrependInt32Slot(6, GPLJLPKJPAM, 0)
def HJHAEAPNEMDAddDKMLEDJJFOI(builder, DKMLEDJJFOI): builder.PrependInt32Slot(7, DKMLEDJJFOI, 0)
def HJHAEAPNEMDAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(8, LPJPOOHJKAE, 0)
def HJHAEAPNEMDAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependInt32Slot(9, KJFEBMBHKOC, 0)
def HJHAEAPNEMDEnd(builder): return builder.EndObject()
