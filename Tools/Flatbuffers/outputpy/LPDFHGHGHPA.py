# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LPDFHGHGHPA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLPDFHGHGHPA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LPDFHGHGHPA()
        x.Init(buf, n + offset)
        return x

    # LPDFHGHGHPA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LPDFHGHGHPA
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def PKKHBFGMNGA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LPDFHGHGHPA
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def NNNDHIHBMFL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def GJEJFAJHBME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def OPDKCCDMPHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def IALIGIAJJGP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def FKGLOPMFMCP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def FFBCKIHFJJJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HJJBMKIDKFG import HJJBMKIDKFG
            obj = HJJBMKIDKFG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LPDFHGHGHPA
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def BEJCCAMIPNB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LPDFHGHGHPA
    def LAIOEDGDIFO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LPDFHGHGHPAStart(builder): builder.StartObject(13)
def LPDFHGHGHPAAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def LPDFHGHGHPAAddPKKHBFGMNGA(builder, PKKHBFGMNGA): builder.PrependUint32Slot(1, PKKHBFGMNGA, 0)
def LPDFHGHGHPAAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def LPDFHGHGHPAAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(3, CFLMCGOJJJD, 0)
def LPDFHGHGHPAAddNNNDHIHBMFL(builder, NNNDHIHBMFL): builder.PrependUint32Slot(4, NNNDHIHBMFL, 0)
def LPDFHGHGHPAAddGJEJFAJHBME(builder, GJEJFAJHBME): builder.PrependUint32Slot(5, GJEJFAJHBME, 0)
def LPDFHGHGHPAAddOPDKCCDMPHA(builder, OPDKCCDMPHA): builder.PrependUint32Slot(6, OPDKCCDMPHA, 0)
def LPDFHGHGHPAAddIALIGIAJJGP(builder, IALIGIAJJGP): builder.PrependUint32Slot(7, IALIGIAJJGP, 0)
def LPDFHGHGHPAAddFKGLOPMFMCP(builder, FKGLOPMFMCP): builder.PrependUint32Slot(8, FKGLOPMFMCP, 0)
def LPDFHGHGHPAAddFFBCKIHFJJJ(builder, FFBCKIHFJJJ): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(FFBCKIHFJJJ), 0)
def LPDFHGHGHPAAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(10, OFMGALJGDAO, 0)
def LPDFHGHGHPAAddBEJCCAMIPNB(builder, BEJCCAMIPNB): builder.PrependUint32Slot(11, BEJCCAMIPNB, 0)
def LPDFHGHGHPAAddLAIOEDGDIFO(builder, LAIOEDGDIFO): builder.PrependUint32Slot(12, LAIOEDGDIFO, 0)
def LPDFHGHGHPAEnd(builder): return builder.EndObject()
