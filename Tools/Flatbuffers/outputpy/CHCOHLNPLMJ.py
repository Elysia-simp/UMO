# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CHCOHLNPLMJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCHCOHLNPLMJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CHCOHLNPLMJ()
        x.Init(buf, n + offset)
        return x

    # CHCOHLNPLMJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CHCOHLNPLMJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # CHCOHLNPLMJ
    def KGJOEPEIDMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def JMFEAOOLOEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def FOOEBKAHMCM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def DMNNOAFOPFI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def ACIJELOAHHD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def EFOBFEHCBHJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CHCOHLNPLMJ
    def LOJKHFENCOJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CHCOHLNPLMJStart(builder): builder.StartObject(9)
def CHCOHLNPLMJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def CHCOHLNPLMJAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def CHCOHLNPLMJAddKGJOEPEIDMO(builder, KGJOEPEIDMO): builder.PrependUint32Slot(2, KGJOEPEIDMO, 0)
def CHCOHLNPLMJAddJMFEAOOLOEG(builder, JMFEAOOLOEG): builder.PrependUint32Slot(3, JMFEAOOLOEG, 0)
def CHCOHLNPLMJAddFOOEBKAHMCM(builder, FOOEBKAHMCM): builder.PrependUint32Slot(4, FOOEBKAHMCM, 0)
def CHCOHLNPLMJAddDMNNOAFOPFI(builder, DMNNOAFOPFI): builder.PrependUint32Slot(5, DMNNOAFOPFI, 0)
def CHCOHLNPLMJAddACIJELOAHHD(builder, ACIJELOAHHD): builder.PrependUint32Slot(6, ACIJELOAHHD, 0)
def CHCOHLNPLMJAddEFOBFEHCBHJ(builder, EFOBFEHCBHJ): builder.PrependUint32Slot(7, EFOBFEHCBHJ, 0)
def CHCOHLNPLMJAddLOJKHFENCOJ(builder, LOJKHFENCOJ): builder.PrependUint32Slot(8, LOJKHFENCOJ, 0)
def CHCOHLNPLMJEnd(builder): return builder.EndObject()
