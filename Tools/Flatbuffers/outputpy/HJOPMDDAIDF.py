# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HJOPMDDAIDF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHJOPMDDAIDF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HJOPMDDAIDF()
        x.Init(buf, n + offset)
        return x

    # HJOPMDDAIDF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HJOPMDDAIDF
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .EPBCNHDGFCB import EPBCNHDGFCB
            obj = EPBCNHDGFCB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def KJFDCEGGPPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PAPIGFKKFAK import PAPIGFKKFAK
            obj = PAPIGFKKFAK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def KJFDCEGGPPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DLDBBNOCCJD import DLDBBNOCCJD
            obj = DLDBBNOCCJD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def LEDCBACGIDD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OFIGAJKJFPF import OFIGAJKJFPF
            obj = OFIGAJKJFPF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def LEDCBACGIDDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BMAKMHEEFEF import BMAKMHEEFEF
            obj = BMAKMHEEFEF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PBJDMDHLPIP import PBJDMDHLPIP
            obj = PBJDMDHLPIP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DEOAJNDLLLH import DEOAJNDLLLH
            obj = DEOAJNDLLLH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def GGKDJGGAFKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HCNLBIAHFHK import HCNLBIAHFHK
            obj = HCNLBIAHFHK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def GGKDJGGAFKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CHOEGDGADLA import CHOEGDGADLA
            obj = CHOEGDGADLA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HCMLGJBONGC import HCMLGJBONGC
            obj = HCMLGJBONGC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HJOPMDDAIDF
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DCBENCFJMOC import DCBENCFJMOC
            obj = DCBENCFJMOC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HJOPMDDAIDF
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HJOPMDDAIDFStart(builder): builder.StartObject(11)
def HJOPMDDAIDFAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def HJOPMDDAIDFAddKJFDCEGGPPH(builder, KJFDCEGGPPH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KJFDCEGGPPH), 0)
def HJOPMDDAIDFStartKJFDCEGGPPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def HJOPMDDAIDFStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddLEDCBACGIDD(builder, LEDCBACGIDD): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(LEDCBACGIDD), 0)
def HJOPMDDAIDFStartLEDCBACGIDDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def HJOPMDDAIDFStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def HJOPMDDAIDFStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def HJOPMDDAIDFStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddGGKDJGGAFKA(builder, GGKDJGGAFKA): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(GGKDJGGAFKA), 0)
def HJOPMDDAIDFStartGGKDJGGAFKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def HJOPMDDAIDFStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def HJOPMDDAIDFStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def HJOPMDDAIDFStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HJOPMDDAIDFEnd(builder): return builder.EndObject()
