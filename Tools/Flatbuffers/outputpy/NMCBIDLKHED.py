# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NMCBIDLKHED(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNMCBIDLKHED(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NMCBIDLKHED()
        x.Init(buf, n + offset)
        return x

    # NMCBIDLKHED
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NMCBIDLKHED
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDELGBLMJJO import NDELGBLMJJO
            obj = NDELGBLMJJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def KJFDCEGGPPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JPHCKOHCJKL import JPHCKOHCJKL
            obj = JPHCKOHCJKL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def KJFDCEGGPPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MOEAENJLEGI import MOEAENJLEGI
            obj = MOEAENJLEGI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MINHCKEGNDL import MINHCKEGNDL
            obj = MINHCKEGNDL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def EMBEBHJKMNC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HLJHIMHEACC import HLJHIMHEACC
            obj = HLJHIMHEACC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def EMBEBHJKMNCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def POCJDCJLODD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KDDOEACKIHA import KDDOEACKIHA
            obj = KDDOEACKIHA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def POCJDCJLODDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def LFKGJNLPMAE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IDOIMCLBFJA import IDOIMCLBFJA
            obj = IDOIMCLBFJA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def LFKGJNLPMAELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def FHJIGCFBFEN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JFGEKMJJBAO import JFGEKMJJBAO
            obj = JFGEKMJJBAO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def FHJIGCFBFENLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def OOMKKGEMBMO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CIJEJAKKDMB import CIJEJAKKDMB
            obj = CIJEJAKKDMB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def OOMKKGEMBMOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HDMKPCIFCKM import HDMKPCIFCKM
            obj = HDMKPCIFCKM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .POCLCIIAOED import POCLCIIAOED
            obj = POCLCIIAOED()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GIENJNNNCMN import GIENJNNNCMN
            obj = GIENJNNNCMN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def GGKDJGGAFKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FNEOAPMLFFD import FNEOAPMLFFD
            obj = FNEOAPMLFFD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def GGKDJGGAFKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def JHDOILHEBOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ICAMEMFMEPB import ICAMEMFMEPB
            obj = ICAMEMFMEPB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def JHDOILHEBOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EPOOCHGHFNI import EPOOCHGHFNI
            obj = EPOOCHGHFNI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PCEMLBKHFFI import PCEMLBKHFFI
            obj = PCEMLBKHFFI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NMCBIDLKHED
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MANCFDNPDOD import MANCFDNPDOD
            obj = MANCFDNPDOD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NMCBIDLKHED
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NMCBIDLKHEDStart(builder): builder.StartObject(17)
def NMCBIDLKHEDAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def NMCBIDLKHEDAddKJFDCEGGPPH(builder, KJFDCEGGPPH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KJFDCEGGPPH), 0)
def NMCBIDLKHEDStartKJFDCEGGPPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def NMCBIDLKHEDStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def NMCBIDLKHEDStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddEMBEBHJKMNC(builder, EMBEBHJKMNC): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(EMBEBHJKMNC), 0)
def NMCBIDLKHEDStartEMBEBHJKMNCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddPOCJDCJLODD(builder, POCJDCJLODD): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(POCJDCJLODD), 0)
def NMCBIDLKHEDStartPOCJDCJLODDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddLFKGJNLPMAE(builder, LFKGJNLPMAE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LFKGJNLPMAE), 0)
def NMCBIDLKHEDStartLFKGJNLPMAEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddFHJIGCFBFEN(builder, FHJIGCFBFEN): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(FHJIGCFBFEN), 0)
def NMCBIDLKHEDStartFHJIGCFBFENVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddOOMKKGEMBMO(builder, OOMKKGEMBMO): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(OOMKKGEMBMO), 0)
def NMCBIDLKHEDStartOOMKKGEMBMOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def NMCBIDLKHEDStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def NMCBIDLKHEDStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def NMCBIDLKHEDStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddGGKDJGGAFKA(builder, GGKDJGGAFKA): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(GGKDJGGAFKA), 0)
def NMCBIDLKHEDStartGGKDJGGAFKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddJHDOILHEBOG(builder, JHDOILHEBOG): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(JHDOILHEBOG), 0)
def NMCBIDLKHEDStartJHDOILHEBOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def NMCBIDLKHEDStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def NMCBIDLKHEDStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def NMCBIDLKHEDStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NMCBIDLKHEDEnd(builder): return builder.EndObject()
