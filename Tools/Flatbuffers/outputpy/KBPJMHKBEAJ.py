# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KBPJMHKBEAJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKBPJMHKBEAJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KBPJMHKBEAJ()
        x.Init(buf, n + offset)
        return x

    # KBPJMHKBEAJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KBPJMHKBEAJ
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .EGJJJNCPNPD import EGJJJNCPNPD
            obj = EGJJJNCPNPD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def KJFDCEGGPPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NKAGFIBDIJL import NKAGFIBDIJL
            obj = NKAGFIBDIJL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def KJFDCEGGPPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AEDNLIGLDLI import AEDNLIGLDLI
            obj = AEDNLIGLDLI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HNIEJMNIBMD import HNIEJMNIBMD
            obj = HNIEJMNIBMD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MAAGLHIIMOK import MAAGLHIIMOK
            obj = MAAGLHIIMOK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EKBIGBOIGPH import EKBIGBOIGPH
            obj = EKBIGBOIGPH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KAGKHJNAHHL import KAGKHJNAHHL
            obj = KAGKHJNAHHL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def GGKDJGGAFKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EEBNFEADGDN import EEBNFEADGDN
            obj = EEBNFEADGDN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def GGKDJGGAFKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def JHDOILHEBOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PHLPHMPPNON import PHLPHMPPNON
            obj = PHLPHMPPNON()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def JHDOILHEBOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DGPHIEINKFP import DGPHIEINKFP
            obj = DGPHIEINKFP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DMAHJEKCGNM import DMAHJEKCGNM
            obj = DMAHJEKCGNM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KBPJMHKBEAJ
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MAJJICHLHLP import MAJJICHLHLP
            obj = MAJJICHLHLP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KBPJMHKBEAJ
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KBPJMHKBEAJStart(builder): builder.StartObject(12)
def KBPJMHKBEAJAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def KBPJMHKBEAJAddKJFDCEGGPPH(builder, KJFDCEGGPPH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KJFDCEGGPPH), 0)
def KBPJMHKBEAJStartKJFDCEGGPPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def KBPJMHKBEAJStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def KBPJMHKBEAJStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def KBPJMHKBEAJStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def KBPJMHKBEAJStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def KBPJMHKBEAJStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddGGKDJGGAFKA(builder, GGKDJGGAFKA): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(GGKDJGGAFKA), 0)
def KBPJMHKBEAJStartGGKDJGGAFKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddJHDOILHEBOG(builder, JHDOILHEBOG): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(JHDOILHEBOG), 0)
def KBPJMHKBEAJStartJHDOILHEBOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def KBPJMHKBEAJStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def KBPJMHKBEAJStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def KBPJMHKBEAJStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KBPJMHKBEAJEnd(builder): return builder.EndObject()
