# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KHKJEJCOAHJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKHKJEJCOAHJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KHKJEJCOAHJ()
        x.Init(buf, n + offset)
        return x

    # KHKJEJCOAHJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KHKJEJCOAHJ
    def KNPAODNMJMK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HOIBFMCEOJO import HOIBFMCEOJO
            obj = HOIBFMCEOJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KHKJEJCOAHJ
    def KNPAODNMJMKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KHKJEJCOAHJ
    def ACFJPKHNLHI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .APIFHKKHODH import APIFHKKHODH
            obj = APIFHKKHODH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KHKJEJCOAHJ
    def ACFJPKHNLHILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KHKJEJCOAHJ
    def ACKHFBIGNFJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GDNMLJHGFMI import GDNMLJHGFMI
            obj = GDNMLJHGFMI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KHKJEJCOAHJ
    def ACKHFBIGNFJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KHKJEJCOAHJ
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ACNIPCFGMAE import ACNIPCFGMAE
            obj = ACNIPCFGMAE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KHKJEJCOAHJ
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KHKJEJCOAHJ
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OGLBCNFMFEK import OGLBCNFMFEK
            obj = OGLBCNFMFEK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KHKJEJCOAHJ
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KHKJEJCOAHJStart(builder): builder.StartObject(5)
def KHKJEJCOAHJAddKNPAODNMJMK(builder, KNPAODNMJMK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(KNPAODNMJMK), 0)
def KHKJEJCOAHJStartKNPAODNMJMKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KHKJEJCOAHJAddACFJPKHNLHI(builder, ACFJPKHNLHI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ACFJPKHNLHI), 0)
def KHKJEJCOAHJStartACFJPKHNLHIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KHKJEJCOAHJAddACKHFBIGNFJ(builder, ACKHFBIGNFJ): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ACKHFBIGNFJ), 0)
def KHKJEJCOAHJStartACKHFBIGNFJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KHKJEJCOAHJAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def KHKJEJCOAHJStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KHKJEJCOAHJAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def KHKJEJCOAHJStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KHKJEJCOAHJEnd(builder): return builder.EndObject()
