# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LJKBFOAOAJG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLJKBFOAOAJG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LJKBFOAOAJG()
        x.Init(buf, n + offset)
        return x

    # LJKBFOAOAJG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LJKBFOAOAJG
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def NNCGCDNLJEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def LIBHMBEONKC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def IDMMPIIIPLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def NAMFJMCKFIF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def EBFEIMNOLHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def EBFEIMNOLHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def JFKBEBPJGBH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def JFKBEBPJGBHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def OJBCAEPBACP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def OJBCAEPBACPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LJKBFOAOAJG
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LJKBFOAOAJG
    def NIPICAKPCOJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def NIPICAKPCOJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def HDHNOMIENLO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LJKBFOAOAJG
    def HDHNOMIENLOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LJKBFOAOAJG
    def HFKHLKGAJEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LJKBFOAOAJGStart(builder): builder.StartObject(36)
def LJKBFOAOAJGAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def LJKBFOAOAJGAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def LJKBFOAOAJGAddNNCGCDNLJEE(builder, NNCGCDNLJEE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNCGCDNLJEE), 0)
def LJKBFOAOAJGAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(3, MAIJBDCJPNJ, 0)
def LJKBFOAOAJGAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def LJKBFOAOAJGAddLIBHMBEONKC(builder, LIBHMBEONKC): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(LIBHMBEONKC), 0)
def LJKBFOAOAJGAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(6, MCHOEAGDGJP, 0)
def LJKBFOAOAJGAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(7, LLJNABNBDMN, 0)
def LJKBFOAOAJGAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(8, DEPHCHOBAJG, 0)
def LJKBFOAOAJGAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(9, DJHKCHMBGHC, 0)
def LJKBFOAOAJGAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(10, BCKOLCDDIAG, 0)
def LJKBFOAOAJGAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(11, LKIBIHGHEMA, 0)
def LJKBFOAOAJGAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(12, ANELKJCGJJL, 0)
def LJKBFOAOAJGAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(13, AEOKLKJAKHB, 0)
def LJKBFOAOAJGAddIDMMPIIIPLL(builder, IDMMPIIIPLL): builder.PrependUint32Slot(14, IDMMPIIIPLL, 0)
def LJKBFOAOAJGAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(15, HKPPDACCCOH, 0)
def LJKBFOAOAJGAddNAMFJMCKFIF(builder, NAMFJMCKFIF): builder.PrependUint32Slot(16, NAMFJMCKFIF, 0)
def LJKBFOAOAJGAddEBFEIMNOLHP(builder, EBFEIMNOLHP): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(EBFEIMNOLHP), 0)
def LJKBFOAOAJGStartEBFEIMNOLHPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(18, OGBOPHDAMCI, 0)
def LJKBFOAOAJGAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(19, HGFJBAJCFNF, 0)
def LJKBFOAOAJGAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def LJKBFOAOAJGAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def LJKBFOAOAJGAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(22, BNOHOIBDHLP, 0)
def LJKBFOAOAJGAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def LJKBFOAOAJGAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(24, LENBJLOPKLE, 0)
def LJKBFOAOAJGAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def LJKBFOAOAJGStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddJFKBEBPJGBH(builder, JFKBEBPJGBH): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(JFKBEBPJGBH), 0)
def LJKBFOAOAJGStartJFKBEBPJGBHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddOJBCAEPBACP(builder, OJBCAEPBACP): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(OJBCAEPBACP), 0)
def LJKBFOAOAJGStartOJBCAEPBACPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def LJKBFOAOAJGAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(29, ODMLFHELAJK, 0)
def LJKBFOAOAJGAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(30, JOIACOFCFAA, 0)
def LJKBFOAOAJGAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def LJKBFOAOAJGStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependInt32Slot(32, KPCNGKDBMHA, 0)
def LJKBFOAOAJGAddNIPICAKPCOJ(builder, NIPICAKPCOJ): builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(NIPICAKPCOJ), 0)
def LJKBFOAOAJGStartNIPICAKPCOJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddHDHNOMIENLO(builder, HDHNOMIENLO): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(HDHNOMIENLO), 0)
def LJKBFOAOAJGStartHDHNOMIENLOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LJKBFOAOAJGAddHFKHLKGAJEL(builder, HFKHLKGAJEL): builder.PrependInt32Slot(35, HFKHLKGAJEL, 0)
def LJKBFOAOAJGEnd(builder): return builder.EndObject()
