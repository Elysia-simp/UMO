# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CJBNLNDKLKA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCJBNLNDKLKA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CJBNLNDKLKA()
        x.Init(buf, n + offset)
        return x

    # CJBNLNDKLKA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CJBNLNDKLKA
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def CFCGMIMJKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def OFGPIPFIPKB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def LHABMCKNLFG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def AIIPAPCLGGO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def ACHLKLEIOJJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CJBNLNDKLKA
    def GGIDBEGABBO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CJBNLNDKLKAStart(builder): builder.StartObject(7)
def CJBNLNDKLKAAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependUint32Slot(0, MBBJMJAAODG, 0)
def CJBNLNDKLKAAddCFCGMIMJKLE(builder, CFCGMIMJKLE): builder.PrependInt32Slot(1, CFCGMIMJKLE, 0)
def CJBNLNDKLKAAddOFGPIPFIPKB(builder, OFGPIPFIPKB): builder.PrependInt32Slot(2, OFGPIPFIPKB, 0)
def CJBNLNDKLKAAddLHABMCKNLFG(builder, LHABMCKNLFG): builder.PrependUint32Slot(3, LHABMCKNLFG, 0)
def CJBNLNDKLKAAddAIIPAPCLGGO(builder, AIIPAPCLGGO): builder.PrependUint32Slot(4, AIIPAPCLGGO, 0)
def CJBNLNDKLKAAddACHLKLEIOJJ(builder, ACHLKLEIOJJ): builder.PrependUint32Slot(5, ACHLKLEIOJJ, 0)
def CJBNLNDKLKAAddGGIDBEGABBO(builder, GGIDBEGABBO): builder.PrependUint32Slot(6, GGIDBEGABBO, 0)
def CJBNLNDKLKAEnd(builder): return builder.EndObject()
