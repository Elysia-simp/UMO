# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OIGIKHKPIOF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOIGIKHKPIOF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OIGIKHKPIOF()
        x.Init(buf, n + offset)
        return x

    # OIGIKHKPIOF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OIGIKHKPIOF
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OIGIKHKPIOF
    def EKJDPPJFKOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OIGIKHKPIOF
    def ALPALMJMJJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OIGIKHKPIOF
    def MJGENHDKIFB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OIGIKHKPIOF
    def JFLHEINHLOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OIGIKHKPIOF
    def GJBNEGIFCDG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # OIGIKHKPIOF
    def AGPECCAGHFL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OIGIKHKPIOF
    def AGPECCAGHFLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIGIKHKPIOF
    def EKPDMIAPDKB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OIGIKHKPIOF
    def EKPDMIAPDKBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OIGIKHKPIOF
    def AGOIMGHMGOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OIGIKHKPIOFStart(builder): builder.StartObject(9)
def OIGIKHKPIOFAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def OIGIKHKPIOFAddEKJDPPJFKOK(builder, EKJDPPJFKOK): builder.PrependInt32Slot(1, EKJDPPJFKOK, 0)
def OIGIKHKPIOFAddALPALMJMJJK(builder, ALPALMJMJJK): builder.PrependInt32Slot(2, ALPALMJMJJK, 0)
def OIGIKHKPIOFAddMJGENHDKIFB(builder, MJGENHDKIFB): builder.PrependInt32Slot(3, MJGENHDKIFB, 0)
def OIGIKHKPIOFAddJFLHEINHLOC(builder, JFLHEINHLOC): builder.PrependInt32Slot(4, JFLHEINHLOC, 0)
def OIGIKHKPIOFAddGJBNEGIFCDG(builder, GJBNEGIFCDG): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(GJBNEGIFCDG), 0)
def OIGIKHKPIOFAddAGPECCAGHFL(builder, AGPECCAGHFL): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(AGPECCAGHFL), 0)
def OIGIKHKPIOFStartAGPECCAGHFLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIGIKHKPIOFAddEKPDMIAPDKB(builder, EKPDMIAPDKB): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(EKPDMIAPDKB), 0)
def OIGIKHKPIOFStartEKPDMIAPDKBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OIGIKHKPIOFAddAGOIMGHMGOH(builder, AGOIMGHMGOH): builder.PrependUint32Slot(8, AGOIMGHMGOH, 0)
def OIGIKHKPIOFEnd(builder): return builder.EndObject()
