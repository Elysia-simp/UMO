# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GHBCOHFGDMM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGHBCOHFGDMM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GHBCOHFGDMM()
        x.Init(buf, n + offset)
        return x

    # GHBCOHFGDMM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GHBCOHFGDMM
    def NOAABMLLCEI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GHBCOHFGDMM
    def LOIDCOGHAOJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GHBCOHFGDMM
    def DMEMJNAEDHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GHBCOHFGDMM
    def JEOALGELOHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GHBCOHFGDMM
    def GNGJHKKAAIN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GHBCOHFGDMM
    def GNGJHKKAAINLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def GHBCOHFGDMMStart(builder): builder.StartObject(5)
def GHBCOHFGDMMAddNOAABMLLCEI(builder, NOAABMLLCEI): builder.PrependUint32Slot(0, NOAABMLLCEI, 0)
def GHBCOHFGDMMAddLOIDCOGHAOJ(builder, LOIDCOGHAOJ): builder.PrependUint32Slot(1, LOIDCOGHAOJ, 0)
def GHBCOHFGDMMAddDMEMJNAEDHP(builder, DMEMJNAEDHP): builder.PrependUint32Slot(2, DMEMJNAEDHP, 0)
def GHBCOHFGDMMAddJEOALGELOHK(builder, JEOALGELOHK): builder.PrependUint32Slot(3, JEOALGELOHK, 0)
def GHBCOHFGDMMAddGNGJHKKAAIN(builder, GNGJHKKAAIN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GNGJHKKAAIN), 0)
def GHBCOHFGDMMStartGNGJHKKAAINVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GHBCOHFGDMMEnd(builder): return builder.EndObject()
