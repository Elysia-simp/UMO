# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DEMFEEEPCCO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDEMFEEEPCCO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DEMFEEEPCCO()
        x.Init(buf, n + offset)
        return x

    # DEMFEEEPCCO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DEMFEEEPCCO
    def ADNNNAFIBLD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OCJCBHOBGJJ import OCJCBHOBGJJ
            obj = OCJCBHOBGJJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DEMFEEEPCCO
    def ADNNNAFIBLDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEMFEEEPCCO
    def NEPBOHLLOGM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JCPFGFKDDJP import JCPFGFKDDJP
            obj = JCPFGFKDDJP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DEMFEEEPCCO
    def NEPBOHLLOGMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEMFEEEPCCO
    def MMKDCMGIEKM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AHKFABMCFNG import AHKFABMCFNG
            obj = AHKFABMCFNG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DEMFEEEPCCO
    def MMKDCMGIEKMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEMFEEEPCCO
    def OANLFAKIJOF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NCHJODAGBPK import NCHJODAGBPK
            obj = NCHJODAGBPK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DEMFEEEPCCO
    def OANLFAKIJOFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DEMFEEEPCCOStart(builder): builder.StartObject(4)
def DEMFEEEPCCOAddADNNNAFIBLD(builder, ADNNNAFIBLD): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ADNNNAFIBLD), 0)
def DEMFEEEPCCOStartADNNNAFIBLDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DEMFEEEPCCOAddNEPBOHLLOGM(builder, NEPBOHLLOGM): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NEPBOHLLOGM), 0)
def DEMFEEEPCCOStartNEPBOHLLOGMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DEMFEEEPCCOAddMMKDCMGIEKM(builder, MMKDCMGIEKM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(MMKDCMGIEKM), 0)
def DEMFEEEPCCOStartMMKDCMGIEKMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DEMFEEEPCCOAddOANLFAKIJOF(builder, OANLFAKIJOF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OANLFAKIJOF), 0)
def DEMFEEEPCCOStartOANLFAKIJOFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DEMFEEEPCCOEnd(builder): return builder.EndObject()
