# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EHCHNFGDMIN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEHCHNFGDMIN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EHCHNFGDMIN()
        x.Init(buf, n + offset)
        return x

    # EHCHNFGDMIN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EHCHNFGDMIN
    def MJOCIHPPKNO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EHCHNFGDMIN
    def LEFPIGNDJNC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EHCHNFGDMIN
    def LEFPIGNDJNCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EHCHNFGDMINStart(builder): builder.StartObject(2)
def EHCHNFGDMINAddMJOCIHPPKNO(builder, MJOCIHPPKNO): builder.PrependUint32Slot(0, MJOCIHPPKNO, 0)
def EHCHNFGDMINAddLEFPIGNDJNC(builder, LEFPIGNDJNC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(LEFPIGNDJNC), 0)
def EHCHNFGDMINStartLEFPIGNDJNCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EHCHNFGDMINEnd(builder): return builder.EndObject()
