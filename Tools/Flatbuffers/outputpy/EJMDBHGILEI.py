# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EJMDBHGILEI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEJMDBHGILEI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EJMDBHGILEI()
        x.Init(buf, n + offset)
        return x

    # EJMDBHGILEI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EJMDBHGILEI
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def HLPHBGLMBIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def BPMBFFDNMDD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def AFJJKGBHFJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EJMDBHGILEI
    def NKCBBELDHOI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EJMDBHGILEI
    def NKCBBELDHOILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EJMDBHGILEI
    def PPGJPNONPDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def COBFEKPMGIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def CCIHMCAPHCB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def GEJGMBBCFEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EJMDBHGILEI
    def CNNEAFFOPAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EJMDBHGILEIStart(builder): builder.StartObject(13)
def EJMDBHGILEIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def EJMDBHGILEIAddHLPHBGLMBIO(builder, HLPHBGLMBIO): builder.PrependInt32Slot(1, HLPHBGLMBIO, 0)
def EJMDBHGILEIAddBPMBFFDNMDD(builder, BPMBFFDNMDD): builder.PrependInt32Slot(2, BPMBFFDNMDD, 0)
def EJMDBHGILEIAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(3, LPJPOOHJKAE, 0)
def EJMDBHGILEIAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(4, CFLMCGOJJJD, 0)
def EJMDBHGILEIAddAFJJKGBHFJP(builder, AFJJKGBHFJP): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AFJJKGBHFJP), 0)
def EJMDBHGILEIAddNKCBBELDHOI(builder, NKCBBELDHOI): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NKCBBELDHOI), 0)
def EJMDBHGILEIStartNKCBBELDHOIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EJMDBHGILEIAddPPGJPNONPDB(builder, PPGJPNONPDB): builder.PrependInt32Slot(7, PPGJPNONPDB, 0)
def EJMDBHGILEIAddCOBFEKPMGIB(builder, COBFEKPMGIB): builder.PrependInt32Slot(8, COBFEKPMGIB, 0)
def EJMDBHGILEIAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(9, OFMGALJGDAO, 0)
def EJMDBHGILEIAddCCIHMCAPHCB(builder, CCIHMCAPHCB): builder.PrependInt32Slot(10, CCIHMCAPHCB, 0)
def EJMDBHGILEIAddGEJGMBBCFEE(builder, GEJGMBBCFEE): builder.PrependInt32Slot(11, GEJGMBBCFEE, 0)
def EJMDBHGILEIAddCNNEAFFOPAO(builder, CNNEAFFOPAO): builder.PrependInt32Slot(12, CNNEAFFOPAO, 0)
def EJMDBHGILEIEnd(builder): return builder.EndObject()
