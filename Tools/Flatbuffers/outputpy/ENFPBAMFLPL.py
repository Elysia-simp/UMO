# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ENFPBAMFLPL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsENFPBAMFLPL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ENFPBAMFLPL()
        x.Init(buf, n + offset)
        return x

    # ENFPBAMFLPL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ENFPBAMFLPL
    def BJOOKJIOGHF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ENFPBAMFLPL
    def BJOOKJIOGHFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ENFPBAMFLPL
    def AKKGNHMOBPP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ENFPBAMFLPL
    def AKKGNHMOBPPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ENFPBAMFLPL
    def CGKGLCKCAMC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ENFPBAMFLPL
    def CGKGLCKCAMCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ENFPBAMFLPLStart(builder): builder.StartObject(3)
def ENFPBAMFLPLAddBJOOKJIOGHF(builder, BJOOKJIOGHF): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BJOOKJIOGHF), 0)
def ENFPBAMFLPLStartBJOOKJIOGHFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ENFPBAMFLPLAddAKKGNHMOBPP(builder, AKKGNHMOBPP): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(AKKGNHMOBPP), 0)
def ENFPBAMFLPLStartAKKGNHMOBPPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ENFPBAMFLPLAddCGKGLCKCAMC(builder, CGKGLCKCAMC): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CGKGLCKCAMC), 0)
def ENFPBAMFLPLStartCGKGLCKCAMCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ENFPBAMFLPLEnd(builder): return builder.EndObject()
