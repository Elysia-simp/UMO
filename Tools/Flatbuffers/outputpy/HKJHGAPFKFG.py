# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HKJHGAPFKFG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHKJHGAPFKFG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HKJHGAPFKFG()
        x.Init(buf, n + offset)
        return x

    # HKJHGAPFKFG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HKJHGAPFKFG
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def DJEINFKCDBL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def CDDMLDEPLAC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def FGONCIDNPDP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def JPKONAPENGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def JJPIKBCKLGF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def ENPKFDIPGPF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def GJOHJJMJEND(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HKJHGAPFKFG
    def GJOHJJMJENDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HKJHGAPFKFG
    def NLNDCHHFDPC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HKJHGAPFKFG
    def NLNDCHHFDPCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HKJHGAPFKFG
    def DEICBCKPFNP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def EOOJFOJPOEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def KCPNGJFPKHG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # HKJHGAPFKFG
    def KCPNGJFPKHGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HKJHGAPFKFG
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HKJHGAPFKFG
    def AGOIMGHMGOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HKJHGAPFKFGStart(builder): builder.StartObject(18)
def HKJHGAPFKFGAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def HKJHGAPFKFGAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def HKJHGAPFKFGAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def HKJHGAPFKFGAddDJEINFKCDBL(builder, DJEINFKCDBL): builder.PrependInt32Slot(3, DJEINFKCDBL, 0)
def HKJHGAPFKFGAddCDDMLDEPLAC(builder, CDDMLDEPLAC): builder.PrependInt32Slot(4, CDDMLDEPLAC, 0)
def HKJHGAPFKFGAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(5, LMLNKHMPOIG, 0)
def HKJHGAPFKFGAddFGONCIDNPDP(builder, FGONCIDNPDP): builder.PrependInt32Slot(6, FGONCIDNPDP, 0)
def HKJHGAPFKFGAddJPKONAPENGB(builder, JPKONAPENGB): builder.PrependUint32Slot(7, JPKONAPENGB, 0)
def HKJHGAPFKFGAddJJPIKBCKLGF(builder, JJPIKBCKLGF): builder.PrependInt32Slot(8, JJPIKBCKLGF, 0)
def HKJHGAPFKFGAddENPKFDIPGPF(builder, ENPKFDIPGPF): builder.PrependInt32Slot(9, ENPKFDIPGPF, 0)
def HKJHGAPFKFGAddGJOHJJMJEND(builder, GJOHJJMJEND): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(GJOHJJMJEND), 0)
def HKJHGAPFKFGStartGJOHJJMJENDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HKJHGAPFKFGAddNLNDCHHFDPC(builder, NLNDCHHFDPC): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(NLNDCHHFDPC), 0)
def HKJHGAPFKFGStartNLNDCHHFDPCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HKJHGAPFKFGAddDEICBCKPFNP(builder, DEICBCKPFNP): builder.PrependInt32Slot(12, DEICBCKPFNP, 0)
def HKJHGAPFKFGAddEOOJFOJPOEE(builder, EOOJFOJPOEE): builder.PrependInt32Slot(13, EOOJFOJPOEE, 0)
def HKJHGAPFKFGAddKCPNGJFPKHG(builder, KCPNGJFPKHG): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(KCPNGJFPKHG), 0)
def HKJHGAPFKFGStartKCPNGJFPKHGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HKJHGAPFKFGAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(15, NJLJEKDBPCH, 0)
def HKJHGAPFKFGAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(16, MAOAGDBDBIB, 0)
def HKJHGAPFKFGAddAGOIMGHMGOH(builder, AGOIMGHMGOH): builder.PrependInt32Slot(17, AGOIMGHMGOH, 0)
def HKJHGAPFKFGEnd(builder): return builder.EndObject()
