# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GGCGMFLDFMA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGGCGMFLDFMA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GGCGMFLDFMA()
        x.Init(buf, n + offset)
        return x

    # GGCGMFLDFMA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GGCGMFLDFMA
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGCGMFLDFMA
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GGCGMFLDFMA
    def IBDFJIDNDJH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGCGMFLDFMA
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GGCGMFLDFMAStart(builder): builder.StartObject(4)
def GGCGMFLDFMAAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def GGCGMFLDFMAAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def GGCGMFLDFMAAddIBDFJIDNDJH(builder, IBDFJIDNDJH): builder.PrependInt32Slot(2, IBDFJIDNDJH, 0)
def GGCGMFLDFMAAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(3, OFMGALJGDAO, 0)
def GGCGMFLDFMAEnd(builder): return builder.EndObject()
