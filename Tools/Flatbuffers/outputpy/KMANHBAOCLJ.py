# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KMANHBAOCLJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKMANHBAOCLJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KMANHBAOCLJ()
        x.Init(buf, n + offset)
        return x

    # KMANHBAOCLJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KMANHBAOCLJ
    def PIIOHCJFHBD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OIGIKHKPIOF import OIGIKHKPIOF
            obj = OIGIKHKPIOF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KMANHBAOCLJ
    def PIIOHCJFHBDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KMANHBAOCLJ
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HLDFFNGONFE import HLDFFNGONFE
            obj = HLDFFNGONFE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KMANHBAOCLJ
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KMANHBAOCLJ
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OLDFIFPNMJO import OLDFIFPNMJO
            obj = OLDFIFPNMJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KMANHBAOCLJ
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KMANHBAOCLJStart(builder): builder.StartObject(3)
def KMANHBAOCLJAddPIIOHCJFHBD(builder, PIIOHCJFHBD): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(PIIOHCJFHBD), 0)
def KMANHBAOCLJStartPIIOHCJFHBDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KMANHBAOCLJAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def KMANHBAOCLJStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KMANHBAOCLJAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def KMANHBAOCLJStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KMANHBAOCLJEnd(builder): return builder.EndObject()
