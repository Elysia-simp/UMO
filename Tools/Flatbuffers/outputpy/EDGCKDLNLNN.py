# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EDGCKDLNLNN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEDGCKDLNLNN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EDGCKDLNLNN()
        x.Init(buf, n + offset)
        return x

    # EDGCKDLNLNN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EDGCKDLNLNN
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EDGCKDLNLNN
    def EOHDEKFEONI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EDGCKDLNLNN
    def PLPNKMFFPLE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EDGCKDLNLNN
    def PLPNKMFFPLELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EDGCKDLNLNN
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EDGCKDLNLNN
    def PAEGHLMNPNO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EDGCKDLNLNN
    def OPOLOJINLPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EDGCKDLNLNN
    def NMKAIHMOFNA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EDGCKDLNLNN
    def NMKAIHMOFNALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EDGCKDLNLNNStart(builder): builder.StartObject(7)
def EDGCKDLNLNNAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def EDGCKDLNLNNAddEOHDEKFEONI(builder, EOHDEKFEONI): builder.PrependUint32Slot(1, EOHDEKFEONI, 0)
def EDGCKDLNLNNAddPLPNKMFFPLE(builder, PLPNKMFFPLE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(PLPNKMFFPLE), 0)
def EDGCKDLNLNNStartPLPNKMFFPLEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDGCKDLNLNNAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(3, LPJPOOHJKAE, 0)
def EDGCKDLNLNNAddPAEGHLMNPNO(builder, PAEGHLMNPNO): builder.PrependUint32Slot(4, PAEGHLMNPNO, 0)
def EDGCKDLNLNNAddOPOLOJINLPI(builder, OPOLOJINLPI): builder.PrependUint32Slot(5, OPOLOJINLPI, 0)
def EDGCKDLNLNNAddNMKAIHMOFNA(builder, NMKAIHMOFNA): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NMKAIHMOFNA), 0)
def EDGCKDLNLNNStartNMKAIHMOFNAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDGCKDLNLNNEnd(builder): return builder.EndObject()
