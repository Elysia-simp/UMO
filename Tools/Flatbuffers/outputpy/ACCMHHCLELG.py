# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ACCMHHCLELG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsACCMHHCLELG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ACCMHHCLELG()
        x.Init(buf, n + offset)
        return x

    # ACCMHHCLELG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ACCMHHCLELG
    def ODLAFHPCDEC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JLIDEAHFDEA import JLIDEAHFDEA
            obj = JLIDEAHFDEA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ACCMHHCLELG
    def ODLAFHPCDECLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ACCMHHCLELG
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CKMEIOAPABF import CKMEIOAPABF
            obj = CKMEIOAPABF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ACCMHHCLELG
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ACCMHHCLELG
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BEHBIEJAFJL import BEHBIEJAFJL
            obj = BEHBIEJAFJL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ACCMHHCLELG
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ACCMHHCLELGStart(builder): builder.StartObject(3)
def ACCMHHCLELGAddODLAFHPCDEC(builder, ODLAFHPCDEC): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ODLAFHPCDEC), 0)
def ACCMHHCLELGStartODLAFHPCDECVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ACCMHHCLELGAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def ACCMHHCLELGStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ACCMHHCLELGAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def ACCMHHCLELGStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ACCMHHCLELGEnd(builder): return builder.EndObject()
