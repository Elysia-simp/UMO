# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EDPJPHELMBH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEDPJPHELMBH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EDPJPHELMBH()
        x.Init(buf, n + offset)
        return x

    # EDPJPHELMBH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EDPJPHELMBH
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EDPJPHELMBH
    def HEFLJHJEIJC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DGKLGFOIGJB import DGKLGFOIGJB
            obj = DGKLGFOIGJB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EDPJPHELMBH
    def HEFLJHJEIJCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EDPJPHELMBH
    def ILBKJACHOHM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DILKNNAKBII import DILKNNAKBII
            obj = DILKNNAKBII()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EDPJPHELMBH
    def ILBKJACHOHMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EDPJPHELMBH
    def DELLLBAKAAA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DMMAPNIMIIK import DMMAPNIMIIK
            obj = DMMAPNIMIIK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EDPJPHELMBH
    def DELLLBAKAAALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EDPJPHELMBH
    def GFEGLNILLEE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CONJKLGMJJE import CONJKLGMJJE
            obj = CONJKLGMJJE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EDPJPHELMBH
    def GFEGLNILLEELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EDPJPHELMBH
    def BFINILLMFOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BHJMBLJJLNM import BHJMBLJJLNM
            obj = BHJMBLJJLNM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EDPJPHELMBH
    def BFINILLMFOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EDPJPHELMBHStart(builder): builder.StartObject(6)
def EDPJPHELMBHAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def EDPJPHELMBHAddHEFLJHJEIJC(builder, HEFLJHJEIJC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HEFLJHJEIJC), 0)
def EDPJPHELMBHStartHEFLJHJEIJCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDPJPHELMBHAddILBKJACHOHM(builder, ILBKJACHOHM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ILBKJACHOHM), 0)
def EDPJPHELMBHStartILBKJACHOHMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDPJPHELMBHAddDELLLBAKAAA(builder, DELLLBAKAAA): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DELLLBAKAAA), 0)
def EDPJPHELMBHStartDELLLBAKAAAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDPJPHELMBHAddGFEGLNILLEE(builder, GFEGLNILLEE): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GFEGLNILLEE), 0)
def EDPJPHELMBHStartGFEGLNILLEEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDPJPHELMBHAddBFINILLMFOM(builder, BFINILLMFOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(BFINILLMFOM), 0)
def EDPJPHELMBHStartBFINILLMFOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EDPJPHELMBHEnd(builder): return builder.EndObject()
