# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class AHKFABMCFNG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAHKFABMCFNG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AHKFABMCFNG()
        x.Init(buf, n + offset)
        return x

    # AHKFABMCFNG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AHKFABMCFNG
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AHKFABMCFNG
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AHKFABMCFNG
    def JFJLBDICHHJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AHKFABMCFNG
    def BLJLFEDLAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AHKFABMCFNG
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AHKFABMCFNG
    def BPOKEPDFBCO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AHKFABMCFNG
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AHKFABMCFNGStart(builder): builder.StartObject(7)
def AHKFABMCFNGAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependInt32Slot(0, HOENDPOGFIO, 0)
def AHKFABMCFNGAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def AHKFABMCFNGAddJFJLBDICHHJ(builder, JFJLBDICHHJ): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(JFJLBDICHHJ), 0)
def AHKFABMCFNGAddBLJLFEDLAME(builder, BLJLFEDLAME): builder.PrependUint32Slot(3, BLJLFEDLAME, 0)
def AHKFABMCFNGAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def AHKFABMCFNGAddBPOKEPDFBCO(builder, BPOKEPDFBCO): builder.PrependInt32Slot(5, BPOKEPDFBCO, 0)
def AHKFABMCFNGAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(6, LMLNKHMPOIG, 0)
def AHKFABMCFNGEnd(builder): return builder.EndObject()
