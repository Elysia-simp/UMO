# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FELDPFHIOHB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFELDPFHIOHB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FELDPFHIOHB()
        x.Init(buf, n + offset)
        return x

    # FELDPFHIOHB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FELDPFHIOHB
    def CFDDADEOMJE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def KCDJCBMMALB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def JDDPFMAIEJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def ALGLINABMBO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def OPEDKFOOFMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def CLGDAMPNKAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def GJEJFAJHBME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def JPNENGEPDED(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def JPBEMBKMEON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def ALNLKFDILHL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def EHJPHAAHMEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def FKICJENKKIC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def INBPHKHGIAM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def IMPIDEOCBKK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def EELICAHAECD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FELDPFHIOHB
    def JKDAMKCJMLD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FELDPFHIOHBStart(builder): builder.StartObject(17)
def FELDPFHIOHBAddCFDDADEOMJE(builder, CFDDADEOMJE): builder.PrependUint32Slot(0, CFDDADEOMJE, 0)
def FELDPFHIOHBAddKCDJCBMMALB(builder, KCDJCBMMALB): builder.PrependUint32Slot(1, KCDJCBMMALB, 0)
def FELDPFHIOHBAddJDDPFMAIEJK(builder, JDDPFMAIEJK): builder.PrependUint32Slot(2, JDDPFMAIEJK, 0)
def FELDPFHIOHBAddALGLINABMBO(builder, ALGLINABMBO): builder.PrependUint32Slot(3, ALGLINABMBO, 0)
def FELDPFHIOHBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(4, BBPHAPFBFHK, 0)
def FELDPFHIOHBAddOPEDKFOOFMO(builder, OPEDKFOOFMO): builder.PrependUint32Slot(5, OPEDKFOOFMO, 0)
def FELDPFHIOHBAddCLGDAMPNKAA(builder, CLGDAMPNKAA): builder.PrependUint32Slot(6, CLGDAMPNKAA, 0)
def FELDPFHIOHBAddGJEJFAJHBME(builder, GJEJFAJHBME): builder.PrependUint32Slot(7, GJEJFAJHBME, 0)
def FELDPFHIOHBAddJPNENGEPDED(builder, JPNENGEPDED): builder.PrependUint32Slot(8, JPNENGEPDED, 0)
def FELDPFHIOHBAddJPBEMBKMEON(builder, JPBEMBKMEON): builder.PrependUint32Slot(9, JPBEMBKMEON, 0)
def FELDPFHIOHBAddALNLKFDILHL(builder, ALNLKFDILHL): builder.PrependUint32Slot(10, ALNLKFDILHL, 0)
def FELDPFHIOHBAddEHJPHAAHMEF(builder, EHJPHAAHMEF): builder.PrependUint32Slot(11, EHJPHAAHMEF, 0)
def FELDPFHIOHBAddFKICJENKKIC(builder, FKICJENKKIC): builder.PrependUint32Slot(12, FKICJENKKIC, 0)
def FELDPFHIOHBAddINBPHKHGIAM(builder, INBPHKHGIAM): builder.PrependUint32Slot(13, INBPHKHGIAM, 0)
def FELDPFHIOHBAddIMPIDEOCBKK(builder, IMPIDEOCBKK): builder.PrependUint32Slot(14, IMPIDEOCBKK, 0)
def FELDPFHIOHBAddEELICAHAECD(builder, EELICAHAECD): builder.PrependUint32Slot(15, EELICAHAECD, 0)
def FELDPFHIOHBAddJKDAMKCJMLD(builder, JKDAMKCJMLD): builder.PrependUint32Slot(16, JKDAMKCJMLD, 0)
def FELDPFHIOHBEnd(builder): return builder.EndObject()
