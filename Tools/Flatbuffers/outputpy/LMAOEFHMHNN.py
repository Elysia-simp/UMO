# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LMAOEFHMHNN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLMAOEFHMHNN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LMAOEFHMHNN()
        x.Init(buf, n + offset)
        return x

    # LMAOEFHMHNN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LMAOEFHMHNN
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def HEMLBADKAOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def JFPEOBHPALH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LMAOEFHMHNN
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def JFNKDHPAEGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LMAOEFHMHNN
    def KIPKMBIKLDO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LMAOEFHMHNNStart(builder): builder.StartObject(24)
def LMAOEFHMHNNAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def LMAOEFHMHNNAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(1, MAIJBDCJPNJ, 0)
def LMAOEFHMHNNAddHEMLBADKAOA(builder, HEMLBADKAOA): builder.PrependUint32Slot(2, HEMLBADKAOA, 0)
def LMAOEFHMHNNAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def LMAOEFHMHNNAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def LMAOEFHMHNNAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def LMAOEFHMHNNAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(6, DJHKCHMBGHC, 0)
def LMAOEFHMHNNAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(7, BCKOLCDDIAG, 0)
def LMAOEFHMHNNAddJFPEOBHPALH(builder, JFPEOBHPALH): builder.PrependUint32Slot(8, JFPEOBHPALH, 0)
def LMAOEFHMHNNAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(9, LKIBIHGHEMA, 0)
def LMAOEFHMHNNAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(10, ANELKJCGJJL, 0)
def LMAOEFHMHNNAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(11, AEOKLKJAKHB, 0)
def LMAOEFHMHNNAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(12, OGBOPHDAMCI, 0)
def LMAOEFHMHNNAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(13, HGFJBAJCFNF, 0)
def LMAOEFHMHNNAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def LMAOEFHMHNNAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def LMAOEFHMHNNAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(16, BNOHOIBDHLP, 0)
def LMAOEFHMHNNAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def LMAOEFHMHNNAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(18, LENBJLOPKLE, 0)
def LMAOEFHMHNNAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def LMAOEFHMHNNAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(20, ODMLFHELAJK, 0)
def LMAOEFHMHNNAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(21, JOIACOFCFAA, 0)
def LMAOEFHMHNNAddJFNKDHPAEGD(builder, JFNKDHPAEGD): builder.PrependUint32Slot(22, JFNKDHPAEGD, 0)
def LMAOEFHMHNNAddKIPKMBIKLDO(builder, KIPKMBIKLDO): builder.PrependUint32Slot(23, KIPKMBIKLDO, 0)
def LMAOEFHMHNNEnd(builder): return builder.EndObject()
