# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GGALCNFLIBP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGGALCNFLIBP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GGALCNFLIBP()
        x.Init(buf, n + offset)
        return x

    # GGALCNFLIBP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GGALCNFLIBP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GGALCNFLIBP
    def NBMJDIEAMAB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def GMMOOPMEKKG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GGALCNFLIBP
    def KGOFDIKBIHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def ALPALMJMJJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def AIIPAPCLGGO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def NCADHENBLDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def NFAOINKHBIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def PMEGAJICHMB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def DKAFKOABCJA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GGALCNFLIBP
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def PEGBGEGKCGA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def GOOHAMCBHAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def LECDAEGCIMH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GGALCNFLIBP
    def PMFELBFGCJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GGALCNFLIBPStart(builder): builder.StartObject(19)
def GGALCNFLIBPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def GGALCNFLIBPAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def GGALCNFLIBPAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def GGALCNFLIBPAddNBMJDIEAMAB(builder, NBMJDIEAMAB): builder.PrependUint32Slot(3, NBMJDIEAMAB, 0)
def GGALCNFLIBPAddGMMOOPMEKKG(builder, GMMOOPMEKKG): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GMMOOPMEKKG), 0)
def GGALCNFLIBPAddKGOFDIKBIHE(builder, KGOFDIKBIHE): builder.PrependUint32Slot(5, KGOFDIKBIHE, 0)
def GGALCNFLIBPAddALPALMJMJJK(builder, ALPALMJMJJK): builder.PrependUint32Slot(6, ALPALMJMJJK, 0)
def GGALCNFLIBPAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(7, NJLJEKDBPCH, 0)
def GGALCNFLIBPAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(8, MAOAGDBDBIB, 0)
def GGALCNFLIBPAddAIIPAPCLGGO(builder, AIIPAPCLGGO): builder.PrependUint32Slot(9, AIIPAPCLGGO, 0)
def GGALCNFLIBPAddNCADHENBLDB(builder, NCADHENBLDB): builder.PrependUint32Slot(10, NCADHENBLDB, 0)
def GGALCNFLIBPAddNFAOINKHBIG(builder, NFAOINKHBIG): builder.PrependUint32Slot(11, NFAOINKHBIG, 0)
def GGALCNFLIBPAddPMEGAJICHMB(builder, PMEGAJICHMB): builder.PrependUint32Slot(12, PMEGAJICHMB, 0)
def GGALCNFLIBPAddDKAFKOABCJA(builder, DKAFKOABCJA): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(DKAFKOABCJA), 0)
def GGALCNFLIBPAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(14, OFMGALJGDAO, 0)
def GGALCNFLIBPAddPEGBGEGKCGA(builder, PEGBGEGKCGA): builder.PrependInt32Slot(15, PEGBGEGKCGA, 0)
def GGALCNFLIBPAddGOOHAMCBHAE(builder, GOOHAMCBHAE): builder.PrependInt32Slot(16, GOOHAMCBHAE, 0)
def GGALCNFLIBPAddLECDAEGCIMH(builder, LECDAEGCIMH): builder.PrependInt32Slot(17, LECDAEGCIMH, 0)
def GGALCNFLIBPAddPMFELBFGCJG(builder, PMFELBFGCJG): builder.PrependUint32Slot(18, PMFELBFGCJG, 0)
def GGALCNFLIBPEnd(builder): return builder.EndObject()
