# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KMMGHIGKELN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKMMGHIGKELN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KMMGHIGKELN()
        x.Init(buf, n + offset)
        return x

    # KMMGHIGKELN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KMMGHIGKELN
    def COPFAKAHEMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KMMGHIGKELN
    def NCIKNCJLFBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KMMGHIGKELN
    def EEEHIFGPKON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KMMGHIGKELN
    def ANDMOLFOEDG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def KMMGHIGKELNStart(builder): builder.StartObject(4)
def KMMGHIGKELNAddCOPFAKAHEMN(builder, COPFAKAHEMN): builder.PrependUint32Slot(0, COPFAKAHEMN, 0)
def KMMGHIGKELNAddNCIKNCJLFBI(builder, NCIKNCJLFBI): builder.PrependUint32Slot(1, NCIKNCJLFBI, 0)
def KMMGHIGKELNAddEEEHIFGPKON(builder, EEEHIFGPKON): builder.PrependUint32Slot(2, EEEHIFGPKON, 0)
def KMMGHIGKELNAddANDMOLFOEDG(builder, ANDMOLFOEDG): builder.PrependUint32Slot(3, ANDMOLFOEDG, 0)
def KMMGHIGKELNEnd(builder): return builder.EndObject()
