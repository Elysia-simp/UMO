# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DMOMBIHFCKP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDMOMBIHFCKP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DMOMBIHFCKP()
        x.Init(buf, n + offset)
        return x

    # DMOMBIHFCKP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DMOMBIHFCKP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMOMBIHFCKP
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMOMBIHFCKP
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMOMBIHFCKP
    def LMGFPOBNLNL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def LCMOIMEFAHI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def FPGDEJAAOFB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def OGJMNHLILJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMOMBIHFCKP
    def IPHMJNCEPIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMOMBIHFCKP
    def KIAICBJEHIE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def LGGLABALAGL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def BAGGFHGLOOG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMOMBIHFCKP
    def DCMLFKEGICD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def DMOMBIHFCKPStart(builder): builder.StartObject(13)
def DMOMBIHFCKPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def DMOMBIHFCKPAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def DMOMBIHFCKPAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def DMOMBIHFCKPAddLMGFPOBNLNL(builder, LMGFPOBNLNL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(LMGFPOBNLNL), 0)
def DMOMBIHFCKPAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def DMOMBIHFCKPAddLCMOIMEFAHI(builder, LCMOIMEFAHI): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(LCMOIMEFAHI), 0)
def DMOMBIHFCKPAddFPGDEJAAOFB(builder, FPGDEJAAOFB): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(FPGDEJAAOFB), 0)
def DMOMBIHFCKPAddOGJMNHLILJG(builder, OGJMNHLILJG): builder.PrependInt32Slot(7, OGJMNHLILJG, 0)
def DMOMBIHFCKPAddIPHMJNCEPIJ(builder, IPHMJNCEPIJ): builder.PrependInt32Slot(8, IPHMJNCEPIJ, 0)
def DMOMBIHFCKPAddKIAICBJEHIE(builder, KIAICBJEHIE): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(KIAICBJEHIE), 0)
def DMOMBIHFCKPAddLGGLABALAGL(builder, LGGLABALAGL): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(LGGLABALAGL), 0)
def DMOMBIHFCKPAddBAGGFHGLOOG(builder, BAGGFHGLOOG): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(BAGGFHGLOOG), 0)
def DMOMBIHFCKPAddDCMLFKEGICD(builder, DCMLFKEGICD): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(DCMLFKEGICD), 0)
def DMOMBIHFCKPEnd(builder): return builder.EndObject()
