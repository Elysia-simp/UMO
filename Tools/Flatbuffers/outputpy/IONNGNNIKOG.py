# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class IONNGNNIKOG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIONNGNNIKOG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IONNGNNIKOG()
        x.Init(buf, n + offset)
        return x

    # IONNGNNIKOG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IONNGNNIKOG
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IONNGNNIKOG
    def HFJLPAOGLEH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IONNGNNIKOG
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # IONNGNNIKOG
    def EPHHJONMFBP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # IONNGNNIKOG
    def IIGJOMDOEDO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # IONNGNNIKOG
    def NHMKEMIMBML(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IONNGNNIKOG
    def BJBNCHAIOHH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IONNGNNIKOG
    def BJBNCHAIOHHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IONNGNNIKOG
    def BNCIPLKECMC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IONNGNNIKOG
    def BNCIPLKECMCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IONNGNNIKOG
    def IBIAJNFJICN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def IONNGNNIKOGStart(builder): builder.StartObject(9)
def IONNGNNIKOGAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def IONNGNNIKOGAddHFJLPAOGLEH(builder, HFJLPAOGLEH): builder.PrependInt32Slot(1, HFJLPAOGLEH, 0)
def IONNGNNIKOGAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def IONNGNNIKOGAddEPHHJONMFBP(builder, EPHHJONMFBP): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(EPHHJONMFBP), 0)
def IONNGNNIKOGAddIIGJOMDOEDO(builder, IIGJOMDOEDO): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IIGJOMDOEDO), 0)
def IONNGNNIKOGAddNHMKEMIMBML(builder, NHMKEMIMBML): builder.PrependInt32Slot(5, NHMKEMIMBML, 0)
def IONNGNNIKOGAddBJBNCHAIOHH(builder, BJBNCHAIOHH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(BJBNCHAIOHH), 0)
def IONNGNNIKOGStartBJBNCHAIOHHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IONNGNNIKOGAddBNCIPLKECMC(builder, BNCIPLKECMC): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(BNCIPLKECMC), 0)
def IONNGNNIKOGStartBNCIPLKECMCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IONNGNNIKOGAddIBIAJNFJICN(builder, IBIAJNFJICN): builder.PrependInt32Slot(8, IBIAJNFJICN, 0)
def IONNGNNIKOGEnd(builder): return builder.EndObject()
