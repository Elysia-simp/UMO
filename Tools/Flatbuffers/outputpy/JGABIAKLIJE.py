# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JGABIAKLIJE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJGABIAKLIJE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JGABIAKLIJE()
        x.Init(buf, n + offset)
        return x

    # JGABIAKLIJE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JGABIAKLIJE
    def GMMJCFGMCJH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .POKOMFMBPID import POKOMFMBPID
            obj = POKOMFMBPID()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JGABIAKLIJE
    def GMMJCFGMCJHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGABIAKLIJE
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KAAOOFNDCML import KAAOOFNDCML
            obj = KAAOOFNDCML()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JGABIAKLIJE
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGABIAKLIJE
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LKAHFKFPLAH import LKAHFKFPLAH
            obj = LKAHFKFPLAH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JGABIAKLIJE
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGABIAKLIJE
    def KDCENEMGIFL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EDPJPHELMBH import EDPJPHELMBH
            obj = EDPJPHELMBH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # JGABIAKLIJE
    def KDCENEMGIFLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def JGABIAKLIJEStart(builder): builder.StartObject(4)
def JGABIAKLIJEAddGMMJCFGMCJH(builder, GMMJCFGMCJH): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(GMMJCFGMCJH), 0)
def JGABIAKLIJEStartGMMJCFGMCJHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGABIAKLIJEAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def JGABIAKLIJEStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGABIAKLIJEAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def JGABIAKLIJEStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGABIAKLIJEAddKDCENEMGIFL(builder, KDCENEMGIFL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(KDCENEMGIFL), 0)
def JGABIAKLIJEStartKDCENEMGIFLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGABIAKLIJEEnd(builder): return builder.EndObject()
