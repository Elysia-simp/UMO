# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PHJEGIBPDAG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPHJEGIBPDAG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PHJEGIBPDAG()
        x.Init(buf, n + offset)
        return x

    # PHJEGIBPDAG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PHJEGIBPDAG
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def OADMJNEOKLC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def GDLJMMPFINH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # PHJEGIBPDAG
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def BCJCBHDMCDP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PHJEGIBPDAG
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def PHJEGIBPDAGStart(builder): builder.StartObject(10)
def PHJEGIBPDAGAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def PHJEGIBPDAGAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def PHJEGIBPDAGAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def PHJEGIBPDAGAddOADMJNEOKLC(builder, OADMJNEOKLC): builder.PrependUint32Slot(3, OADMJNEOKLC, 0)
def PHJEGIBPDAGAddGDLJMMPFINH(builder, GDLJMMPFINH): builder.PrependUint32Slot(4, GDLJMMPFINH, 0)
def PHJEGIBPDAGAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def PHJEGIBPDAGAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependInt32Slot(6, MBBJMJAAODG, 0)
def PHJEGIBPDAGAddBCJCBHDMCDP(builder, BCJCBHDMCDP): builder.PrependInt32Slot(7, BCJCBHDMCDP, 0)
def PHJEGIBPDAGAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(8, NJLJEKDBPCH, 0)
def PHJEGIBPDAGAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(9, MAOAGDBDBIB, 0)
def PHJEGIBPDAGEnd(builder): return builder.EndObject()
