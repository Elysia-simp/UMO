# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MOHBMMEAEON(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMOHBMMEAEON(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MOHBMMEAEON()
        x.Init(buf, n + offset)
        return x

    # MOHBMMEAEON
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MOHBMMEAEON
    def IJOFIDAFJGA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .APKGJCPIHGB import APKGJCPIHGB
            obj = APKGJCPIHGB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def IJOFIDAFJGALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def IEAIJABOLID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BEILOHDFALJ import BEILOHDFALJ
            obj = BEILOHDFALJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def IEAIJABOLIDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def ICJLGDHMIEA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NPBONKLNFED import NPBONKLNFED
            obj = NPBONKLNFED()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def ICJLGDHMIEALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def IHLFHOBNKEN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BOPHBBPHOBP import BOPHBBPHOBP
            obj = BOPHBBPHOBP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def IHLFHOBNKENLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def HANOBLAKEKM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CIGCHPCDJEH import CIGCHPCDJEH
            obj = CIGCHPCDJEH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def HANOBLAKEKMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def MMKDCMGIEKM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OLIHMDDCGNO import OLIHMDDCGNO
            obj = OLIHMDDCGNO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def MMKDCMGIEKMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def HOMGLAADLBL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CMACEEIOAPP import CMACEEIOAPP
            obj = CMACEEIOAPP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def HOMGLAADLBLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DKMEHGBGCPO import DKMEHGBGCPO
            obj = DKMEHGBGCPO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MOHBMMEAEON
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KHFKCGEANFO import KHFKCGEANFO
            obj = KHFKCGEANFO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MOHBMMEAEON
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MOHBMMEAEONStart(builder): builder.StartObject(9)
def MOHBMMEAEONAddIJOFIDAFJGA(builder, IJOFIDAFJGA): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IJOFIDAFJGA), 0)
def MOHBMMEAEONStartIJOFIDAFJGAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddIEAIJABOLID(builder, IEAIJABOLID): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IEAIJABOLID), 0)
def MOHBMMEAEONStartIEAIJABOLIDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddICJLGDHMIEA(builder, ICJLGDHMIEA): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ICJLGDHMIEA), 0)
def MOHBMMEAEONStartICJLGDHMIEAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddIHLFHOBNKEN(builder, IHLFHOBNKEN): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IHLFHOBNKEN), 0)
def MOHBMMEAEONStartIHLFHOBNKENVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddHANOBLAKEKM(builder, HANOBLAKEKM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(HANOBLAKEKM), 0)
def MOHBMMEAEONStartHANOBLAKEKMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddMMKDCMGIEKM(builder, MMKDCMGIEKM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(MMKDCMGIEKM), 0)
def MOHBMMEAEONStartMMKDCMGIEKMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddHOMGLAADLBL(builder, HOMGLAADLBL): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(HOMGLAADLBL), 0)
def MOHBMMEAEONStartHOMGLAADLBLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def MOHBMMEAEONStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def MOHBMMEAEONStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MOHBMMEAEONEnd(builder): return builder.EndObject()
