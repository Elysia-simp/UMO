# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GANHIMHLHLJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGANHIMHLHLJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GANHIMHLHLJ()
        x.Init(buf, n + offset)
        return x

    # GANHIMHLHLJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GANHIMHLHLJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def AEHGIANDFOD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def AEJMLNBHEMI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def IDCGACFOAAM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def AFPJFEKONDG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def BJPPPPAKBFG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def LGNAOHMECOJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GANHIMHLHLJ
    def BAJIIIIOPHO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GANHIMHLHLJStart(builder): builder.StartObject(9)
def GANHIMHLHLJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def GANHIMHLHLJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def GANHIMHLHLJAddAEHGIANDFOD(builder, AEHGIANDFOD): builder.PrependUint32Slot(2, AEHGIANDFOD, 0)
def GANHIMHLHLJAddAEJMLNBHEMI(builder, AEJMLNBHEMI): builder.PrependUint32Slot(3, AEJMLNBHEMI, 0)
def GANHIMHLHLJAddIDCGACFOAAM(builder, IDCGACFOAAM): builder.PrependUint32Slot(4, IDCGACFOAAM, 0)
def GANHIMHLHLJAddAFPJFEKONDG(builder, AFPJFEKONDG): builder.PrependUint32Slot(5, AFPJFEKONDG, 0)
def GANHIMHLHLJAddBJPPPPAKBFG(builder, BJPPPPAKBFG): builder.PrependUint32Slot(6, BJPPPPAKBFG, 0)
def GANHIMHLHLJAddLGNAOHMECOJ(builder, LGNAOHMECOJ): builder.PrependUint32Slot(7, LGNAOHMECOJ, 0)
def GANHIMHLHLJAddBAJIIIIOPHO(builder, BAJIIIIOPHO): builder.PrependUint32Slot(8, BAJIIIIOPHO, 0)
def GANHIMHLHLJEnd(builder): return builder.EndObject()
