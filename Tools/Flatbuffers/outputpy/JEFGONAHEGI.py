# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JEFGONAHEGI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJEFGONAHEGI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JEFGONAHEGI()
        x.Init(buf, n + offset)
        return x

    # JEFGONAHEGI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JEFGONAHEGI
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def GONOGEBKNLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def EBLEOMJJDMC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def GKPLGGIHHBJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def NCADHENBLDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JEFGONAHEGI
    def DKAFKOABCJA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def JEFGONAHEGIStart(builder): builder.StartObject(9)
def JEFGONAHEGIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def JEFGONAHEGIAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def JEFGONAHEGIAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def JEFGONAHEGIAddGONOGEBKNLE(builder, GONOGEBKNLE): builder.PrependInt32Slot(3, GONOGEBKNLE, 0)
def JEFGONAHEGIAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(4, LPJPOOHJKAE, 0)
def JEFGONAHEGIAddEBLEOMJJDMC(builder, EBLEOMJJDMC): builder.PrependInt32Slot(5, EBLEOMJJDMC, 0)
def JEFGONAHEGIAddGKPLGGIHHBJ(builder, GKPLGGIHHBJ): builder.PrependInt32Slot(6, GKPLGGIHHBJ, 0)
def JEFGONAHEGIAddNCADHENBLDB(builder, NCADHENBLDB): builder.PrependInt32Slot(7, NCADHENBLDB, 0)
def JEFGONAHEGIAddDKAFKOABCJA(builder, DKAFKOABCJA): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(DKAFKOABCJA), 0)
def JEFGONAHEGIEnd(builder): return builder.EndObject()
