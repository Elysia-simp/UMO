# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FEGHFAKKEGO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFEGHFAKKEGO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FEGHFAKKEGO()
        x.Init(buf, n + offset)
        return x

    # FEGHFAKKEGO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FEGHFAKKEGO
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # FEGHFAKKEGO
    def JGAGKFPAAIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # FEGHFAKKEGO
    def NMGIFIOPMIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def NFPKGHADCCP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def PJCPCILBICH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def GAHFANCNFIH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def ANOHJLDOAAK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def GJJPLLHMMAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def AJHANMOKKDF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def PBAJJGLCCDO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def MPMOLHBIKKG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def ENECIEOGIJC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def IMCFOKIBEMC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def OADMJNEOKLC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def EGCKDOIIACL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def GPBKFHCJEPD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def EBBBDFADIPN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def GLIIHLOLPEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def KMEODDMBHHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FEGHFAKKEGO
    def HBHEHJDPEBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FEGHFAKKEGOStart(builder): builder.StartObject(25)
def FEGHFAKKEGOAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def FEGHFAKKEGOAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def FEGHFAKKEGOAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(2, LPJPOOHJKAE, 0)
def FEGHFAKKEGOAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(3, AEAKMMJLLDK, 0)
def FEGHFAKKEGOAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def FEGHFAKKEGOAddJGAGKFPAAIB(builder, JGAGKFPAAIB): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(JGAGKFPAAIB), 0)
def FEGHFAKKEGOAddNMGIFIOPMIJ(builder, NMGIFIOPMIJ): builder.PrependUint32Slot(6, NMGIFIOPMIJ, 0)
def FEGHFAKKEGOAddNFPKGHADCCP(builder, NFPKGHADCCP): builder.PrependUint32Slot(7, NFPKGHADCCP, 0)
def FEGHFAKKEGOAddPJCPCILBICH(builder, PJCPCILBICH): builder.PrependUint32Slot(8, PJCPCILBICH, 0)
def FEGHFAKKEGOAddGAHFANCNFIH(builder, GAHFANCNFIH): builder.PrependUint32Slot(9, GAHFANCNFIH, 0)
def FEGHFAKKEGOAddANOHJLDOAAK(builder, ANOHJLDOAAK): builder.PrependUint32Slot(10, ANOHJLDOAAK, 0)
def FEGHFAKKEGOAddGJJPLLHMMAF(builder, GJJPLLHMMAF): builder.PrependUint32Slot(11, GJJPLLHMMAF, 0)
def FEGHFAKKEGOAddAJHANMOKKDF(builder, AJHANMOKKDF): builder.PrependUint32Slot(12, AJHANMOKKDF, 0)
def FEGHFAKKEGOAddPBAJJGLCCDO(builder, PBAJJGLCCDO): builder.PrependUint32Slot(13, PBAJJGLCCDO, 0)
def FEGHFAKKEGOAddMPMOLHBIKKG(builder, MPMOLHBIKKG): builder.PrependUint32Slot(14, MPMOLHBIKKG, 0)
def FEGHFAKKEGOAddENECIEOGIJC(builder, ENECIEOGIJC): builder.PrependUint32Slot(15, ENECIEOGIJC, 0)
def FEGHFAKKEGOAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependUint32Slot(16, MBBJMJAAODG, 0)
def FEGHFAKKEGOAddIMCFOKIBEMC(builder, IMCFOKIBEMC): builder.PrependUint32Slot(17, IMCFOKIBEMC, 0)
def FEGHFAKKEGOAddOADMJNEOKLC(builder, OADMJNEOKLC): builder.PrependUint32Slot(18, OADMJNEOKLC, 0)
def FEGHFAKKEGOAddEGCKDOIIACL(builder, EGCKDOIIACL): builder.PrependUint32Slot(19, EGCKDOIIACL, 0)
def FEGHFAKKEGOAddGPBKFHCJEPD(builder, GPBKFHCJEPD): builder.PrependUint32Slot(20, GPBKFHCJEPD, 0)
def FEGHFAKKEGOAddEBBBDFADIPN(builder, EBBBDFADIPN): builder.PrependUint32Slot(21, EBBBDFADIPN, 0)
def FEGHFAKKEGOAddGLIIHLOLPEF(builder, GLIIHLOLPEF): builder.PrependUint32Slot(22, GLIIHLOLPEF, 0)
def FEGHFAKKEGOAddKMEODDMBHHE(builder, KMEODDMBHHE): builder.PrependUint32Slot(23, KMEODDMBHHE, 0)
def FEGHFAKKEGOAddHBHEHJDPEBI(builder, HBHEHJDPEBI): builder.PrependUint32Slot(24, HBHEHJDPEBI, 0)
def FEGHFAKKEGOEnd(builder): return builder.EndObject()
