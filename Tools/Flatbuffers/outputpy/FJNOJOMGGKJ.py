# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FJNOJOMGGKJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFJNOJOMGGKJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FJNOJOMGGKJ()
        x.Init(buf, n + offset)
        return x

    # FJNOJOMGGKJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FJNOJOMGGKJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def BDGDHOAJDFM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FJNOJOMGGKJ
    def NCADHENBLDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FJNOJOMGGKJStart(builder): builder.StartObject(7)
def FJNOJOMGGKJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def FJNOJOMGGKJAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def FJNOJOMGGKJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def FJNOJOMGGKJAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(3, NJLJEKDBPCH, 0)
def FJNOJOMGGKJAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependInt32Slot(4, MAOAGDBDBIB, 0)
def FJNOJOMGGKJAddBDGDHOAJDFM(builder, BDGDHOAJDFM): builder.PrependInt32Slot(5, BDGDHOAJDFM, 0)
def FJNOJOMGGKJAddNCADHENBLDB(builder, NCADHENBLDB): builder.PrependInt32Slot(6, NCADHENBLDB, 0)
def FJNOJOMGGKJEnd(builder): return builder.EndObject()
