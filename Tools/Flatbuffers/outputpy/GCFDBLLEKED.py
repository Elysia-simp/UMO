# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GCFDBLLEKED(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGCFDBLLEKED(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GCFDBLLEKED()
        x.Init(buf, n + offset)
        return x

    # GCFDBLLEKED
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GCFDBLLEKED
    def CILHGCNPEFO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def OAHLFBDGEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def IDHMHHMGAHM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def DPKCMAHGHNI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def JIDEBKHEBDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def EGLEPNNDBFM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def CFCGMIMJKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def OFGPIPFIPKB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def OJPMHDDPLNB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def HKAOHJLHFIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def LGDGBMPGHFO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def PGHDIKKMIBA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def IEBDGJNJDNI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def BBNNMGEMEGM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def FIGDHKGEOOF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def OHANDJDIPGG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def PMIPDCPFJHH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def FFELJDJOGMI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GCFDBLLEKED
    def MJGMLHPCJKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def ILAPCKCGCJO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GCFDBLLEKED
    def HPLGKGLOAGC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GCFDBLLEKEDStart(builder): builder.StartObject(22)
def GCFDBLLEKEDAddCILHGCNPEFO(builder, CILHGCNPEFO): builder.PrependInt32Slot(0, CILHGCNPEFO, 0)
def GCFDBLLEKEDAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def GCFDBLLEKEDAddOAHLFBDGEMA(builder, OAHLFBDGEMA): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OAHLFBDGEMA), 0)
def GCFDBLLEKEDAddIDHMHHMGAHM(builder, IDHMHHMGAHM): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IDHMHHMGAHM), 0)
def GCFDBLLEKEDAddDPKCMAHGHNI(builder, DPKCMAHGHNI): builder.PrependInt32Slot(4, DPKCMAHGHNI, 0)
def GCFDBLLEKEDAddJIDEBKHEBDK(builder, JIDEBKHEBDK): builder.PrependInt32Slot(5, JIDEBKHEBDK, 0)
def GCFDBLLEKEDAddEGLEPNNDBFM(builder, EGLEPNNDBFM): builder.PrependInt32Slot(6, EGLEPNNDBFM, 0)
def GCFDBLLEKEDAddCFCGMIMJKLE(builder, CFCGMIMJKLE): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(CFCGMIMJKLE), 0)
def GCFDBLLEKEDAddOFGPIPFIPKB(builder, OFGPIPFIPKB): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(OFGPIPFIPKB), 0)
def GCFDBLLEKEDAddOJPMHDDPLNB(builder, OJPMHDDPLNB): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(OJPMHDDPLNB), 0)
def GCFDBLLEKEDAddHKAOHJLHFIB(builder, HKAOHJLHFIB): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(HKAOHJLHFIB), 0)
def GCFDBLLEKEDAddLGDGBMPGHFO(builder, LGDGBMPGHFO): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(LGDGBMPGHFO), 0)
def GCFDBLLEKEDAddPGHDIKKMIBA(builder, PGHDIKKMIBA): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(PGHDIKKMIBA), 0)
def GCFDBLLEKEDAddIEBDGJNJDNI(builder, IEBDGJNJDNI): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(IEBDGJNJDNI), 0)
def GCFDBLLEKEDAddBBNNMGEMEGM(builder, BBNNMGEMEGM): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(BBNNMGEMEGM), 0)
def GCFDBLLEKEDAddFIGDHKGEOOF(builder, FIGDHKGEOOF): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(FIGDHKGEOOF), 0)
def GCFDBLLEKEDAddOHANDJDIPGG(builder, OHANDJDIPGG): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(OHANDJDIPGG), 0)
def GCFDBLLEKEDAddPMIPDCPFJHH(builder, PMIPDCPFJHH): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(PMIPDCPFJHH), 0)
def GCFDBLLEKEDAddFFELJDJOGMI(builder, FFELJDJOGMI): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(FFELJDJOGMI), 0)
def GCFDBLLEKEDAddMJGMLHPCJKL(builder, MJGMLHPCJKL): builder.PrependInt32Slot(19, MJGMLHPCJKL, 0)
def GCFDBLLEKEDAddILAPCKCGCJO(builder, ILAPCKCGCJO): builder.PrependInt32Slot(20, ILAPCKCGCJO, 0)
def GCFDBLLEKEDAddHPLGKGLOAGC(builder, HPLGKGLOAGC): builder.PrependInt32Slot(21, HPLGKGLOAGC, 0)
def GCFDBLLEKEDEnd(builder): return builder.EndObject()
