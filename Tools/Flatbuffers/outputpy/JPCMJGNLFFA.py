# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JPCMJGNLFFA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJPCMJGNLFFA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JPCMJGNLFFA()
        x.Init(buf, n + offset)
        return x

    # JPCMJGNLFFA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JPCMJGNLFFA
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def GEJGMBBCFEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JPCMJGNLFFA
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def JPCMJGNLFFAStart(builder): builder.StartObject(8)
def JPCMJGNLFFAAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def JPCMJGNLFFAAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(1, ADCLAGBHDBC, 0)
def JPCMJGNLFFAAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependUint32Slot(2, KJFEBMBHKOC, 0)
def JPCMJGNLFFAAddGEJGMBBCFEE(builder, GEJGMBBCFEE): builder.PrependUint32Slot(3, GEJGMBBCFEE, 0)
def JPCMJGNLFFAAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def JPCMJGNLFFAAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(5, OFMGALJGDAO, 0)
def JPCMJGNLFFAAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(6, ODBPKGJPLMD, 0)
def JPCMJGNLFFAAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(7, AEAKMMJLLDK, 0)
def JPCMJGNLFFAEnd(builder): return builder.EndObject()
