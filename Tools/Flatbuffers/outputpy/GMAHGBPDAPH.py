# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GMAHGBPDAPH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGMAHGBPDAPH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GMAHGBPDAPH()
        x.Init(buf, n + offset)
        return x

    # GMAHGBPDAPH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GMAHGBPDAPH
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def DPHNIALHDJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def HDGPONIHIBP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def GFPLLOGJMHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def EJNIJBKBNGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GMAHGBPDAPH
    def DGMDFCHIBKD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GMAHGBPDAPHStart(builder): builder.StartObject(8)
def GMAHGBPDAPHAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def GMAHGBPDAPHAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def GMAHGBPDAPHAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(2, OFMGALJGDAO, 0)
def GMAHGBPDAPHAddDPHNIALHDJK(builder, DPHNIALHDJK): builder.PrependUint32Slot(3, DPHNIALHDJK, 0)
def GMAHGBPDAPHAddHDGPONIHIBP(builder, HDGPONIHIBP): builder.PrependUint32Slot(4, HDGPONIHIBP, 0)
def GMAHGBPDAPHAddGFPLLOGJMHE(builder, GFPLLOGJMHE): builder.PrependUint32Slot(5, GFPLLOGJMHE, 0)
def GMAHGBPDAPHAddEJNIJBKBNGE(builder, EJNIJBKBNGE): builder.PrependUint32Slot(6, EJNIJBKBNGE, 0)
def GMAHGBPDAPHAddDGMDFCHIBKD(builder, DGMDFCHIBKD): builder.PrependUint32Slot(7, DGMDFCHIBKD, 0)
def GMAHGBPDAPHEnd(builder): return builder.EndObject()
