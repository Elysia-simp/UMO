# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class IGBINOLLPPB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIGBINOLLPPB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IGBINOLLPPB()
        x.Init(buf, n + offset)
        return x

    # IGBINOLLPPB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IGBINOLLPPB
    def HLCDELCABOF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def EJCJCAMDFGF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def NAJHJIHCOON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def AMFPDKACLLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def OFLDIKGIPBL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def DLGFIIKAOJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def LNHODOPAJIL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def HOFPKKMIOAL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def HOFPKKMIOALLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def CPOGAPIBMHF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def CPOGAPIBMHFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def GFFCGBEAKDP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def GFFCGBEAKDPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def NBOHLKPDNKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def NBOHLKPDNKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def DHHLJCLLPAF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def DHHLJCLLPAFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def OHBEDDIGFKG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def OHBEDDIGFKGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def DNHAKGCPLOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def DNHAKGCPLOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def PLKKDJCPONF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def KACDPANCECF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def MKCOKBLMLBH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def BDJNKDFFIKF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def PFIBELFMLLM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def INCDOBNIIPH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def BBLLPBBJHDG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def HIDEDIMKGAI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def GGAGCGHLDAB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def KAJAOOEGKBP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def HEJFHKLCDOC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def HEJFHKLCDOCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def ONNPLNPMNIE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def ONNPLNPMNIELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def FCLPDBPKMGH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def FCLPDBPKMGHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def KLADDKGABOD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def KLADDKGABODLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def FECBKKEGDKJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def FECBKKEGDKJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def IJKGNDLDHOD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def IJKGNDLDHODLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def ALBAAFNCALM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IGBINOLLPPB
    def ALBAAFNCALMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IGBINOLLPPB
    def HBGBAPHAHOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # IGBINOLLPPB
    def DHIEDHMBKNB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def IGBINOLLPPBStart(builder): builder.StartObject(37)
def IGBINOLLPPBAddHLCDELCABOF(builder, HLCDELCABOF): builder.PrependUint32Slot(0, HLCDELCABOF, 0)
def IGBINOLLPPBAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(1, ADCLAGBHDBC, 0)
def IGBINOLLPPBAddEJCJCAMDFGF(builder, EJCJCAMDFGF): builder.PrependUint32Slot(2, EJCJCAMDFGF, 0)
def IGBINOLLPPBAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(3, CFLMCGOJJJD, 0)
def IGBINOLLPPBAddNAJHJIHCOON(builder, NAJHJIHCOON): builder.PrependUint32Slot(4, NAJHJIHCOON, 0)
def IGBINOLLPPBAddAMFPDKACLLL(builder, AMFPDKACLLL): builder.PrependUint32Slot(5, AMFPDKACLLL, 0)
def IGBINOLLPPBAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(6, AEAKMMJLLDK, 0)
def IGBINOLLPPBAddOFLDIKGIPBL(builder, OFLDIKGIPBL): builder.PrependUint32Slot(7, OFLDIKGIPBL, 0)
def IGBINOLLPPBAddDLGFIIKAOJD(builder, DLGFIIKAOJD): builder.PrependUint32Slot(8, DLGFIIKAOJD, 0)
def IGBINOLLPPBAddLNHODOPAJIL(builder, LNHODOPAJIL): builder.PrependUint32Slot(9, LNHODOPAJIL, 0)
def IGBINOLLPPBAddHOFPKKMIOAL(builder, HOFPKKMIOAL): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(HOFPKKMIOAL), 0)
def IGBINOLLPPBStartHOFPKKMIOALVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddCPOGAPIBMHF(builder, CPOGAPIBMHF): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(CPOGAPIBMHF), 0)
def IGBINOLLPPBStartCPOGAPIBMHFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddGFFCGBEAKDP(builder, GFFCGBEAKDP): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(GFFCGBEAKDP), 0)
def IGBINOLLPPBStartGFFCGBEAKDPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddNBOHLKPDNKA(builder, NBOHLKPDNKA): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(NBOHLKPDNKA), 0)
def IGBINOLLPPBStartNBOHLKPDNKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddDHHLJCLLPAF(builder, DHHLJCLLPAF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(DHHLJCLLPAF), 0)
def IGBINOLLPPBStartDHHLJCLLPAFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddOHBEDDIGFKG(builder, OHBEDDIGFKG): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(OHBEDDIGFKG), 0)
def IGBINOLLPPBStartOHBEDDIGFKGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddDNHAKGCPLOG(builder, DNHAKGCPLOG): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(DNHAKGCPLOG), 0)
def IGBINOLLPPBStartDNHAKGCPLOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddPLKKDJCPONF(builder, PLKKDJCPONF): builder.PrependUint32Slot(17, PLKKDJCPONF, 0)
def IGBINOLLPPBAddKACDPANCECF(builder, KACDPANCECF): builder.PrependUint32Slot(18, KACDPANCECF, 0)
def IGBINOLLPPBAddMKCOKBLMLBH(builder, MKCOKBLMLBH): builder.PrependUint32Slot(19, MKCOKBLMLBH, 0)
def IGBINOLLPPBAddBDJNKDFFIKF(builder, BDJNKDFFIKF): builder.PrependUint32Slot(20, BDJNKDFFIKF, 0)
def IGBINOLLPPBAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(21, OFMGALJGDAO, 0)
def IGBINOLLPPBAddPFIBELFMLLM(builder, PFIBELFMLLM): builder.PrependInt32Slot(22, PFIBELFMLLM, 0)
def IGBINOLLPPBAddINCDOBNIIPH(builder, INCDOBNIIPH): builder.PrependInt32Slot(23, INCDOBNIIPH, 0)
def IGBINOLLPPBAddBBLLPBBJHDG(builder, BBLLPBBJHDG): builder.PrependInt32Slot(24, BBLLPBBJHDG, 0)
def IGBINOLLPPBAddHIDEDIMKGAI(builder, HIDEDIMKGAI): builder.PrependUint32Slot(25, HIDEDIMKGAI, 0)
def IGBINOLLPPBAddGGAGCGHLDAB(builder, GGAGCGHLDAB): builder.PrependUint32Slot(26, GGAGCGHLDAB, 0)
def IGBINOLLPPBAddKAJAOOEGKBP(builder, KAJAOOEGKBP): builder.PrependUint32Slot(27, KAJAOOEGKBP, 0)
def IGBINOLLPPBAddHEJFHKLCDOC(builder, HEJFHKLCDOC): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(HEJFHKLCDOC), 0)
def IGBINOLLPPBStartHEJFHKLCDOCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddONNPLNPMNIE(builder, ONNPLNPMNIE): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(ONNPLNPMNIE), 0)
def IGBINOLLPPBStartONNPLNPMNIEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddFCLPDBPKMGH(builder, FCLPDBPKMGH): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(FCLPDBPKMGH), 0)
def IGBINOLLPPBStartFCLPDBPKMGHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddKLADDKGABOD(builder, KLADDKGABOD): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(KLADDKGABOD), 0)
def IGBINOLLPPBStartKLADDKGABODVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddFECBKKEGDKJ(builder, FECBKKEGDKJ): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(FECBKKEGDKJ), 0)
def IGBINOLLPPBStartFECBKKEGDKJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddIJKGNDLDHOD(builder, IJKGNDLDHOD): builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(IJKGNDLDHOD), 0)
def IGBINOLLPPBStartIJKGNDLDHODVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddALBAAFNCALM(builder, ALBAAFNCALM): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(ALBAAFNCALM), 0)
def IGBINOLLPPBStartALBAAFNCALMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IGBINOLLPPBAddHBGBAPHAHOA(builder, HBGBAPHAHOA): builder.PrependInt32Slot(35, HBGBAPHAHOA, 0)
def IGBINOLLPPBAddDHIEDHMBKNB(builder, DHIEDHMBKNB): builder.PrependUint32Slot(36, DHIEDHMBKNB, 0)
def IGBINOLLPPBEnd(builder): return builder.EndObject()
