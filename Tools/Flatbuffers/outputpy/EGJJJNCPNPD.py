# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EGJJJNCPNPD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEGJJJNCPNPD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EGJJJNCPNPD()
        x.Init(buf, n + offset)
        return x

    # EGJJJNCPNPD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EGJJJNCPNPD
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def NNCGCDNLJEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def HEMLBADKAOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def LIBHMBEONKC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def IDMMPIIIPLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def NAMFJMCKFIF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def EBFEIMNOLHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EGJJJNCPNPD
    def EBFEIMNOLHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EGJJJNCPNPD
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def ALNLBALBCJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def GPCEIBGOEGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def IAOHBNNABEA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def GPGAAMAIPOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def CKPGPEBLNFH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def MCBLMLBNNJJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def LCDPKHOIDJH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EGJJJNCPNPD
    def LCDPKHOIDJHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EGJJJNCPNPD
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EGJJJNCPNPD
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EGJJJNCPNPD
    def KMDIENAOMLH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EGJJJNCPNPD
    def KMDIENAOMLHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EGJJJNCPNPD
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EGJJJNCPNPD
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EGJJJNCPNPD
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EGJJJNCPNPD
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EGJJJNCPNPD
    def HFKHLKGAJEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EGJJJNCPNPDStart(builder): builder.StartObject(41)
def EGJJJNCPNPDAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def EGJJJNCPNPDAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def EGJJJNCPNPDAddNNCGCDNLJEE(builder, NNCGCDNLJEE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNCGCDNLJEE), 0)
def EGJJJNCPNPDAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(3, MAIJBDCJPNJ, 0)
def EGJJJNCPNPDAddHEMLBADKAOA(builder, HEMLBADKAOA): builder.PrependUint32Slot(4, HEMLBADKAOA, 0)
def EGJJJNCPNPDAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def EGJJJNCPNPDAddLIBHMBEONKC(builder, LIBHMBEONKC): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LIBHMBEONKC), 0)
def EGJJJNCPNPDAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(7, MCHOEAGDGJP, 0)
def EGJJJNCPNPDAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(8, LLJNABNBDMN, 0)
def EGJJJNCPNPDAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(9, DEPHCHOBAJG, 0)
def EGJJJNCPNPDAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(10, DJHKCHMBGHC, 0)
def EGJJJNCPNPDAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(11, BCKOLCDDIAG, 0)
def EGJJJNCPNPDAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(12, LKIBIHGHEMA, 0)
def EGJJJNCPNPDAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(13, ANELKJCGJJL, 0)
def EGJJJNCPNPDAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(14, AEOKLKJAKHB, 0)
def EGJJJNCPNPDAddIDMMPIIIPLL(builder, IDMMPIIIPLL): builder.PrependUint32Slot(15, IDMMPIIIPLL, 0)
def EGJJJNCPNPDAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(16, HKPPDACCCOH, 0)
def EGJJJNCPNPDAddNAMFJMCKFIF(builder, NAMFJMCKFIF): builder.PrependUint32Slot(17, NAMFJMCKFIF, 0)
def EGJJJNCPNPDAddEBFEIMNOLHP(builder, EBFEIMNOLHP): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(EBFEIMNOLHP), 0)
def EGJJJNCPNPDStartEBFEIMNOLHPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EGJJJNCPNPDAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(19, OGBOPHDAMCI, 0)
def EGJJJNCPNPDAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(20, HGFJBAJCFNF, 0)
def EGJJJNCPNPDAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def EGJJJNCPNPDAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def EGJJJNCPNPDAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(23, BNOHOIBDHLP, 0)
def EGJJJNCPNPDAddALNLBALBCJK(builder, ALNLBALBCJK): builder.PrependUint32Slot(24, ALNLBALBCJK, 0)
def EGJJJNCPNPDAddGPCEIBGOEGB(builder, GPCEIBGOEGB): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(GPCEIBGOEGB), 0)
def EGJJJNCPNPDAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependUint32Slot(26, KPCNGKDBMHA, 0)
def EGJJJNCPNPDAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def EGJJJNCPNPDAddIAOHBNNABEA(builder, IAOHBNNABEA): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(IAOHBNNABEA), 0)
def EGJJJNCPNPDAddGPGAAMAIPOA(builder, GPGAAMAIPOA): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(GPGAAMAIPOA), 0)
def EGJJJNCPNPDAddCKPGPEBLNFH(builder, CKPGPEBLNFH): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(CKPGPEBLNFH), 0)
def EGJJJNCPNPDAddMCBLMLBNNJJ(builder, MCBLMLBNNJJ): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(MCBLMLBNNJJ), 0)
def EGJJJNCPNPDAddLCDPKHOIDJH(builder, LCDPKHOIDJH): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(LCDPKHOIDJH), 0)
def EGJJJNCPNPDStartLCDPKHOIDJHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EGJJJNCPNPDAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(33, LENBJLOPKLE, 0)
def EGJJJNCPNPDAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def EGJJJNCPNPDStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EGJJJNCPNPDAddKMDIENAOMLH(builder, KMDIENAOMLH): builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(KMDIENAOMLH), 0)
def EGJJJNCPNPDStartKMDIENAOMLHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EGJJJNCPNPDAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def EGJJJNCPNPDAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(37, ODMLFHELAJK, 0)
def EGJJJNCPNPDAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(38, JOIACOFCFAA, 0)
def EGJJJNCPNPDAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def EGJJJNCPNPDStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EGJJJNCPNPDAddHFKHLKGAJEL(builder, HFKHLKGAJEL): builder.PrependInt32Slot(40, HFKHLKGAJEL, 0)
def EGJJJNCPNPDEnd(builder): return builder.EndObject()
