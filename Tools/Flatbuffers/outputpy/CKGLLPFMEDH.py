# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CKGLLPFMEDH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCKGLLPFMEDH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CKGLLPFMEDH()
        x.Init(buf, n + offset)
        return x

    # CKGLLPFMEDH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CKGLLPFMEDH
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def JHAMBKOEJPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def MJHPFNPCLBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def JDKBBEIBJBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def CGHIJPPACBC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CKGLLPFMEDH
    def CGHIJPPACBCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CKGLLPFMEDH
    def HMNFFFLCANH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CKGLLPFMEDH
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CKGLLPFMEDHStart(builder): builder.StartObject(10)
def CKGLLPFMEDHAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def CKGLLPFMEDHAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def CKGLLPFMEDHAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def CKGLLPFMEDHAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependInt32Slot(3, ODBPKGJPLMD, 0)
def CKGLLPFMEDHAddJHAMBKOEJPL(builder, JHAMBKOEJPL): builder.PrependInt32Slot(4, JHAMBKOEJPL, 0)
def CKGLLPFMEDHAddMJHPFNPCLBD(builder, MJHPFNPCLBD): builder.PrependInt32Slot(5, MJHPFNPCLBD, 0)
def CKGLLPFMEDHAddJDKBBEIBJBD(builder, JDKBBEIBJBD): builder.PrependInt32Slot(6, JDKBBEIBJBD, 0)
def CKGLLPFMEDHAddCGHIJPPACBC(builder, CGHIJPPACBC): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(CGHIJPPACBC), 0)
def CKGLLPFMEDHStartCGHIJPPACBCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CKGLLPFMEDHAddHMNFFFLCANH(builder, HMNFFFLCANH): builder.PrependInt32Slot(8, HMNFFFLCANH, 0)
def CKGLLPFMEDHAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(9, LMLNKHMPOIG, 0)
def CKGLLPFMEDHEnd(builder): return builder.EndObject()
