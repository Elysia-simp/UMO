# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NLMKDBJHCCM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNLMKDBJHCCM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NLMKDBJHCCM()
        x.Init(buf, n + offset)
        return x

    # NLMKDBJHCCM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NLMKDBJHCCM
    def EOKPHAFLHBG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def EOKPHAFLHBGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def FOGBEEHMDJM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def FOGBEEHMDJMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def CGHMONDBJAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PLJHMEIABJO import PLJHMEIABJO
            obj = PLJHMEIABJO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NLMKDBJHCCM
    def CGHMONDBJAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def JPNFHMDOLDI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def JPNFHMDOLDILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def DDIHJIBBICG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def DDIHJIBBICGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def JBGHINGOKLJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def JBGHINGOKLJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def IBLGLCALOMG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CJBKPOKAIDA import CJBKPOKAIDA
            obj = CJBKPOKAIDA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NLMKDBJHCCM
    def IBLGLCALOMGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NLMKDBJHCCM
    def GNOLKLKMNFP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NLMKDBJHCCM
    def GNOLKLKMNFPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NLMKDBJHCCMStart(builder): builder.StartObject(8)
def NLMKDBJHCCMAddEOKPHAFLHBG(builder, EOKPHAFLHBG): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EOKPHAFLHBG), 0)
def NLMKDBJHCCMStartEOKPHAFLHBGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddFOGBEEHMDJM(builder, FOGBEEHMDJM): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FOGBEEHMDJM), 0)
def NLMKDBJHCCMStartFOGBEEHMDJMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddCGHMONDBJAI(builder, CGHMONDBJAI): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CGHMONDBJAI), 0)
def NLMKDBJHCCMStartCGHMONDBJAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddJPNFHMDOLDI(builder, JPNFHMDOLDI): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(JPNFHMDOLDI), 0)
def NLMKDBJHCCMStartJPNFHMDOLDIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddDDIHJIBBICG(builder, DDIHJIBBICG): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(DDIHJIBBICG), 0)
def NLMKDBJHCCMStartDDIHJIBBICGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddJBGHINGOKLJ(builder, JBGHINGOKLJ): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(JBGHINGOKLJ), 0)
def NLMKDBJHCCMStartJBGHINGOKLJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddIBLGLCALOMG(builder, IBLGLCALOMG): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(IBLGLCALOMG), 0)
def NLMKDBJHCCMStartIBLGLCALOMGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMAddGNOLKLKMNFP(builder, GNOLKLKMNFP): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(GNOLKLKMNFP), 0)
def NLMKDBJHCCMStartGNOLKLKMNFPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NLMKDBJHCCMEnd(builder): return builder.EndObject()
