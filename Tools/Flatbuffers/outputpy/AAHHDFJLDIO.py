# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class AAHHDFJLDIO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAAHHDFJLDIO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AAHHDFJLDIO()
        x.Init(buf, n + offset)
        return x

    # AAHHDFJLDIO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AAHHDFJLDIO
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AAHHDFJLDIO
    def DKMLEDJJFOI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def GHHPIICJHDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AAHHDFJLDIO
    def IJKHPPCHPGK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AAHHDFJLDIO
    def CLEEFGNMCEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def IPHMJNCEPIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def JBAHJKKJPEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def OIMEOBNAAHH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def EOHDEKFEONI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def LCMOIMEFAHI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # AAHHDFJLDIO
    def PELKLPGCMFN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def IDKJOALBKAA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AAHHDFJLDIO
    def IDKJOALBKAALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AAHHDFJLDIO
    def AFDJJJOJBMO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AAHHDFJLDIO
    def AFDJJJOJBMOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AAHHDFJLDIO
    def MCPMLMHKKOP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AAHHDFJLDIO
    def BPMBFFDNMDD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AAHHDFJLDIOStart(builder): builder.StartObject(18)
def AAHHDFJLDIOAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def AAHHDFJLDIOAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def AAHHDFJLDIOAddDKMLEDJJFOI(builder, DKMLEDJJFOI): builder.PrependInt32Slot(2, DKMLEDJJFOI, 0)
def AAHHDFJLDIOAddGHHPIICJHDB(builder, GHHPIICJHDB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GHHPIICJHDB), 0)
def AAHHDFJLDIOAddIJKHPPCHPGK(builder, IJKHPPCHPGK): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IJKHPPCHPGK), 0)
def AAHHDFJLDIOAddCLEEFGNMCEL(builder, CLEEFGNMCEL): builder.PrependInt32Slot(5, CLEEFGNMCEL, 0)
def AAHHDFJLDIOAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(6, LPJPOOHJKAE, 0)
def AAHHDFJLDIOAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(7, NJLJEKDBPCH, 0)
def AAHHDFJLDIOAddIPHMJNCEPIJ(builder, IPHMJNCEPIJ): builder.PrependInt32Slot(8, IPHMJNCEPIJ, 0)
def AAHHDFJLDIOAddJBAHJKKJPEG(builder, JBAHJKKJPEG): builder.PrependInt32Slot(9, JBAHJKKJPEG, 0)
def AAHHDFJLDIOAddOIMEOBNAAHH(builder, OIMEOBNAAHH): builder.PrependInt32Slot(10, OIMEOBNAAHH, 0)
def AAHHDFJLDIOAddEOHDEKFEONI(builder, EOHDEKFEONI): builder.PrependInt32Slot(11, EOHDEKFEONI, 0)
def AAHHDFJLDIOAddLCMOIMEFAHI(builder, LCMOIMEFAHI): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(LCMOIMEFAHI), 0)
def AAHHDFJLDIOAddPELKLPGCMFN(builder, PELKLPGCMFN): builder.PrependInt32Slot(13, PELKLPGCMFN, 0)
def AAHHDFJLDIOAddIDKJOALBKAA(builder, IDKJOALBKAA): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(IDKJOALBKAA), 0)
def AAHHDFJLDIOStartIDKJOALBKAAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AAHHDFJLDIOAddAFDJJJOJBMO(builder, AFDJJJOJBMO): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(AFDJJJOJBMO), 0)
def AAHHDFJLDIOStartAFDJJJOJBMOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AAHHDFJLDIOAddMCPMLMHKKOP(builder, MCPMLMHKKOP): builder.PrependInt32Slot(16, MCPMLMHKKOP, 0)
def AAHHDFJLDIOAddBPMBFFDNMDD(builder, BPMBFFDNMDD): builder.PrependInt32Slot(17, BPMBFFDNMDD, 0)
def AAHHDFJLDIOEnd(builder): return builder.EndObject()
