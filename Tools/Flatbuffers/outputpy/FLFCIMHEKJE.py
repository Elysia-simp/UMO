# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FLFCIMHEKJE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFLFCIMHEKJE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FLFCIMHEKJE()
        x.Init(buf, n + offset)
        return x

    # FLFCIMHEKJE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FLFCIMHEKJE
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def GEJGMBBCFEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def AEAKMMJLLDK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def HHGNAFHNHEK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FLFCIMHEKJE
    def LFLGAOPCDLC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FLFCIMHEKJEStart(builder): builder.StartObject(10)
def FLFCIMHEKJEAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def FLFCIMHEKJEAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependUint32Slot(1, ADCLAGBHDBC, 0)
def FLFCIMHEKJEAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependUint32Slot(2, KJFEBMBHKOC, 0)
def FLFCIMHEKJEAddGEJGMBBCFEE(builder, GEJGMBBCFEE): builder.PrependUint32Slot(3, GEJGMBBCFEE, 0)
def FLFCIMHEKJEAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def FLFCIMHEKJEAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(5, OFMGALJGDAO, 0)
def FLFCIMHEKJEAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(6, ODBPKGJPLMD, 0)
def FLFCIMHEKJEAddAEAKMMJLLDK(builder, AEAKMMJLLDK): builder.PrependUint32Slot(7, AEAKMMJLLDK, 0)
def FLFCIMHEKJEAddHHGNAFHNHEK(builder, HHGNAFHNHEK): builder.PrependUint32Slot(8, HHGNAFHNHEK, 0)
def FLFCIMHEKJEAddLFLGAOPCDLC(builder, LFLGAOPCDLC): builder.PrependUint32Slot(9, LFLGAOPCDLC, 0)
def FLFCIMHEKJEEnd(builder): return builder.EndObject()
