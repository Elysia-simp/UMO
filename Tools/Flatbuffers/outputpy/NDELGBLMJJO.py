# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NDELGBLMJJO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNDELGBLMJJO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NDELGBLMJJO()
        x.Init(buf, n + offset)
        return x

    # NDELGBLMJJO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NDELGBLMJJO
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def HEMLBADKAOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def NLPMPPCENKD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NDELGBLMJJO
    def NLPMPPCENKDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NDELGBLMJJO
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def DEPHCHOBAJG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def IDMMPIIIPLL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def HKPPDACCCOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def NAMFJMCKFIF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def EBFEIMNOLHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NDELGBLMJJO
    def EBFEIMNOLHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NDELGBLMJJO
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def PPCOEAIPHKA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def ALNLBALBCJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def KPCNGKDBMHA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NDELGBLMJJO
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NDELGBLMJJO
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # NDELGBLMJJO
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NDELGBLMJJO
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NDELGBLMJJO
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NDELGBLMJJO
    def HFKHLKGAJEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NDELGBLMJJOStart(builder): builder.StartObject(33)
def NDELGBLMJJOAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def NDELGBLMJJOAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def NDELGBLMJJOAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def NDELGBLMJJOAddHEMLBADKAOA(builder, HEMLBADKAOA): builder.PrependUint32Slot(3, HEMLBADKAOA, 0)
def NDELGBLMJJOAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def NDELGBLMJJOAddNLPMPPCENKD(builder, NLPMPPCENKD): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NLPMPPCENKD), 0)
def NDELGBLMJJOStartNLPMPPCENKDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NDELGBLMJJOAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(6, MCHOEAGDGJP, 0)
def NDELGBLMJJOAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(7, LLJNABNBDMN, 0)
def NDELGBLMJJOAddDEPHCHOBAJG(builder, DEPHCHOBAJG): builder.PrependUint32Slot(8, DEPHCHOBAJG, 0)
def NDELGBLMJJOAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(9, DJHKCHMBGHC, 0)
def NDELGBLMJJOAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(10, BCKOLCDDIAG, 0)
def NDELGBLMJJOAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(11, LKIBIHGHEMA, 0)
def NDELGBLMJJOAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(12, ANELKJCGJJL, 0)
def NDELGBLMJJOAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(13, AEOKLKJAKHB, 0)
def NDELGBLMJJOAddIDMMPIIIPLL(builder, IDMMPIIIPLL): builder.PrependUint32Slot(14, IDMMPIIIPLL, 0)
def NDELGBLMJJOAddHKPPDACCCOH(builder, HKPPDACCCOH): builder.PrependUint32Slot(15, HKPPDACCCOH, 0)
def NDELGBLMJJOAddNAMFJMCKFIF(builder, NAMFJMCKFIF): builder.PrependUint32Slot(16, NAMFJMCKFIF, 0)
def NDELGBLMJJOAddEBFEIMNOLHP(builder, EBFEIMNOLHP): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(EBFEIMNOLHP), 0)
def NDELGBLMJJOStartEBFEIMNOLHPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NDELGBLMJJOAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(18, OGBOPHDAMCI, 0)
def NDELGBLMJJOAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(19, HGFJBAJCFNF, 0)
def NDELGBLMJJOAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def NDELGBLMJJOAddPPCOEAIPHKA(builder, PPCOEAIPHKA): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(PPCOEAIPHKA), 0)
def NDELGBLMJJOAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(22, BNOHOIBDHLP, 0)
def NDELGBLMJJOAddALNLBALBCJK(builder, ALNLBALBCJK): builder.PrependUint32Slot(23, ALNLBALBCJK, 0)
def NDELGBLMJJOAddKPCNGKDBMHA(builder, KPCNGKDBMHA): builder.PrependUint32Slot(24, KPCNGKDBMHA, 0)
def NDELGBLMJJOAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def NDELGBLMJJOAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(26, LENBJLOPKLE, 0)
def NDELGBLMJJOAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def NDELGBLMJJOStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NDELGBLMJJOAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def NDELGBLMJJOAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(29, ODMLFHELAJK, 0)
def NDELGBLMJJOAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(30, JOIACOFCFAA, 0)
def NDELGBLMJJOAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def NDELGBLMJJOStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NDELGBLMJJOAddHFKHLKGAJEL(builder, HFKHLKGAJEL): builder.PrependInt32Slot(32, HFKHLKGAJEL, 0)
def NDELGBLMJJOEnd(builder): return builder.EndObject()
