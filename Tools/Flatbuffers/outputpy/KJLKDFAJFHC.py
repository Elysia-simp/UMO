# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KJLKDFAJFHC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKJLKDFAJFHC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KJLKDFAJFHC()
        x.Init(buf, n + offset)
        return x

    # KJLKDFAJFHC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KJLKDFAJFHC
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def DPHNIALHDJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def CIOGNKLHPDE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def HDGPONIHIBP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def GFPLLOGJMHE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def EJNIJBKBNGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def DGMDFCHIBKD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def NABLNBMACHL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def BKKAFNHOJFE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def PGKFEHHDIBH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # KJLKDFAJFHC
    def DDMBKEJNPJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def KJLKDFAJFHCStart(builder): builder.StartObject(13)
def KJLKDFAJFHCAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def KJLKDFAJFHCAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def KJLKDFAJFHCAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(2, OFMGALJGDAO, 0)
def KJLKDFAJFHCAddDPHNIALHDJK(builder, DPHNIALHDJK): builder.PrependUint32Slot(3, DPHNIALHDJK, 0)
def KJLKDFAJFHCAddCIOGNKLHPDE(builder, CIOGNKLHPDE): builder.PrependInt32Slot(4, CIOGNKLHPDE, 0)
def KJLKDFAJFHCAddHDGPONIHIBP(builder, HDGPONIHIBP): builder.PrependUint32Slot(5, HDGPONIHIBP, 0)
def KJLKDFAJFHCAddGFPLLOGJMHE(builder, GFPLLOGJMHE): builder.PrependUint32Slot(6, GFPLLOGJMHE, 0)
def KJLKDFAJFHCAddEJNIJBKBNGE(builder, EJNIJBKBNGE): builder.PrependUint32Slot(7, EJNIJBKBNGE, 0)
def KJLKDFAJFHCAddDGMDFCHIBKD(builder, DGMDFCHIBKD): builder.PrependUint32Slot(8, DGMDFCHIBKD, 0)
def KJLKDFAJFHCAddNABLNBMACHL(builder, NABLNBMACHL): builder.PrependUint32Slot(9, NABLNBMACHL, 0)
def KJLKDFAJFHCAddBKKAFNHOJFE(builder, BKKAFNHOJFE): builder.PrependUint32Slot(10, BKKAFNHOJFE, 0)
def KJLKDFAJFHCAddPGKFEHHDIBH(builder, PGKFEHHDIBH): builder.PrependUint32Slot(11, PGKFEHHDIBH, 0)
def KJLKDFAJFHCAddDDMBKEJNPJK(builder, DDMBKEJNPJK): builder.PrependUint32Slot(12, DDMBKEJNPJK, 0)
def KJLKDFAJFHCEnd(builder): return builder.EndObject()
