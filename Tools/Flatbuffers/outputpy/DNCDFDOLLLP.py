# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DNCDFDOLLLP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDNCDFDOLLLP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DNCDFDOLLLP()
        x.Init(buf, n + offset)
        return x

    # DNCDFDOLLLP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DNCDFDOLLLP
    def ECNEAMKNNNM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HLDKLHBADBM import HLDKLHBADBM
            obj = HLDKLHBADBM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def ECNEAMKNNNMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def MACMCDFLODP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HKJHGAPFKFG import HKJHGAPFKFG
            obj = HKJHGAPFKFG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def MACMCDFLODPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def HJALJJFNNLI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LNGIOBJMNKN import LNGIOBJMNKN
            obj = LNGIOBJMNKN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def HJALJJFNNLILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def IHFFBHLKBAK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BFLEGKOBHNB import BFLEGKOBHNB
            obj = BFLEGKOBHNB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def IHFFBHLKBAKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def CEIOPDAJNFE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DMKFEPCLDFH import DMKFEPCLDFH
            obj = DMKFEPCLDFH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def CEIOPDAJNFELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def AKMPJKBIHJE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NKMABFBAGCI import NKMABFBAGCI
            obj = NKMABFBAGCI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def AKMPJKBIHJELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def AEEHBCCPMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JFEDJIABBJE import JFEDJIABBJE
            obj = JFEDJIABBJE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def AEEHBCCPMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def NNIGHPIKHNJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DBCEGDLCGJB import DBCEGDLCGJB
            obj = DBCEGDLCGJB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def NNIGHPIKHNJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def AMJMMNDDEKL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NIKLBBMGCMJ import NIKLBBMGCMJ
            obj = NIKLBBMGCMJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def AMJMMNDDEKLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def KFIADONNLFB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HPNFLBIHKOL import HPNFLBIHKOL
            obj = HPNFLBIHKOL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def KFIADONNLFBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def IFCJEFKPCKN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GNGHIOBEPCP import GNGHIOBEPCP
            obj = GNGHIOBEPCP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def IFCJEFKPCKNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def IPCJKBLICOE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BACFACJMMDL import BACFACJMMDL
            obj = BACFACJMMDL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def IPCJKBLICOELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def HPPIKOIFDCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EHHOIAKGOEI import EHHOIAKGOEI
            obj = EHHOIAKGOEI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def HPPIKOIFDCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def MLHDCEOKPJF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CEJOCIJJFLC import CEJOCIJJFLC
            obj = CEJOCIJJFLC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def MLHDCEOKPJFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def HEGLIJCBLBO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LAOGFGDCCBK import LAOGFGDCCBK
            obj = LAOGFGDCCBK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def HEGLIJCBLBOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def HINPHILDBCA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JGHMLKFMFBM import JGHMLKFMFBM
            obj = JGHMLKFMFBM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def HINPHILDBCALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def BIGIGPCDBGL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BDBHJDOCHLC import BDBHJDOCHLC
            obj = BDBHJDOCHLC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def BIGIGPCDBGLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CHHPPGPBPND import CHHPPGPBPND
            obj = CHHPPGPBPND()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DNCDFDOLLLP
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CBOIPIHLLEF import CBOIPIHLLEF
            obj = CBOIPIHLLEF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DNCDFDOLLLP
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DNCDFDOLLLPStart(builder): builder.StartObject(19)
def DNCDFDOLLLPAddECNEAMKNNNM(builder, ECNEAMKNNNM): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ECNEAMKNNNM), 0)
def DNCDFDOLLLPStartECNEAMKNNNMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddMACMCDFLODP(builder, MACMCDFLODP): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(MACMCDFLODP), 0)
def DNCDFDOLLLPStartMACMCDFLODPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddHJALJJFNNLI(builder, HJALJJFNNLI): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(HJALJJFNNLI), 0)
def DNCDFDOLLLPStartHJALJJFNNLIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddIHFFBHLKBAK(builder, IHFFBHLKBAK): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IHFFBHLKBAK), 0)
def DNCDFDOLLLPStartIHFFBHLKBAKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddCEIOPDAJNFE(builder, CEIOPDAJNFE): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CEIOPDAJNFE), 0)
def DNCDFDOLLLPStartCEIOPDAJNFEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddAKMPJKBIHJE(builder, AKMPJKBIHJE): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AKMPJKBIHJE), 0)
def DNCDFDOLLLPStartAKMPJKBIHJEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddAEEHBCCPMCB(builder, AEEHBCCPMCB): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(AEEHBCCPMCB), 0)
def DNCDFDOLLLPStartAEEHBCCPMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddNNIGHPIKHNJ(builder, NNIGHPIKHNJ): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(NNIGHPIKHNJ), 0)
def DNCDFDOLLLPStartNNIGHPIKHNJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddAMJMMNDDEKL(builder, AMJMMNDDEKL): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(AMJMMNDDEKL), 0)
def DNCDFDOLLLPStartAMJMMNDDEKLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddKFIADONNLFB(builder, KFIADONNLFB): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(KFIADONNLFB), 0)
def DNCDFDOLLLPStartKFIADONNLFBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddIFCJEFKPCKN(builder, IFCJEFKPCKN): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(IFCJEFKPCKN), 0)
def DNCDFDOLLLPStartIFCJEFKPCKNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddIPCJKBLICOE(builder, IPCJKBLICOE): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(IPCJKBLICOE), 0)
def DNCDFDOLLLPStartIPCJKBLICOEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddHPPIKOIFDCB(builder, HPPIKOIFDCB): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(HPPIKOIFDCB), 0)
def DNCDFDOLLLPStartHPPIKOIFDCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddMLHDCEOKPJF(builder, MLHDCEOKPJF): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(MLHDCEOKPJF), 0)
def DNCDFDOLLLPStartMLHDCEOKPJFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddHEGLIJCBLBO(builder, HEGLIJCBLBO): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HEGLIJCBLBO), 0)
def DNCDFDOLLLPStartHEGLIJCBLBOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddHINPHILDBCA(builder, HINPHILDBCA): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(HINPHILDBCA), 0)
def DNCDFDOLLLPStartHINPHILDBCAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddBIGIGPCDBGL(builder, BIGIGPCDBGL): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(BIGIGPCDBGL), 0)
def DNCDFDOLLLPStartBIGIGPCDBGLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def DNCDFDOLLLPStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def DNCDFDOLLLPStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DNCDFDOLLLPEnd(builder): return builder.EndObject()
