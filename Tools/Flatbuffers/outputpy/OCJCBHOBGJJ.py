# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OCJCBHOBGJJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOCJCBHOBGJJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OCJCBHOBGJJ()
        x.Init(buf, n + offset)
        return x

    # OCJCBHOBGJJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OCJCBHOBGJJ
    def OCCGFNHHECN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # OCJCBHOBGJJ
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def FKLNFLAFBDH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def BLJLFEDLAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OCJCBHOBGJJ
    def KKJFKKJHCAI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def OCJCBHOBGJJStart(builder): builder.StartObject(8)
def OCJCBHOBGJJAddOCCGFNHHECN(builder, OCCGFNHHECN): builder.PrependUint32Slot(0, OCCGFNHHECN, 0)
def OCJCBHOBGJJAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def OCJCBHOBGJJAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(2, LPJPOOHJKAE, 0)
def OCJCBHOBGJJAddFKLNFLAFBDH(builder, FKLNFLAFBDH): builder.PrependInt32Slot(3, FKLNFLAFBDH, 0)
def OCJCBHOBGJJAddBLJLFEDLAME(builder, BLJLFEDLAME): builder.PrependInt32Slot(4, BLJLFEDLAME, 0)
def OCJCBHOBGJJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(5, CFLMCGOJJJD, 0)
def OCJCBHOBGJJAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(6, OFMGALJGDAO, 0)
def OCJCBHOBGJJAddKKJFKKJHCAI(builder, KKJFKKJHCAI): builder.PrependUint32Slot(7, KKJFKKJHCAI, 0)
def OCJCBHOBGJJEnd(builder): return builder.EndObject()
