# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OLKBCLJBFAA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOLKBCLJBFAA(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OLKBCLJBFAA()
        x.Init(buf, n + offset)
        return x

    # OLKBCLJBFAA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OLKBCLJBFAA
    def KPONLGHOAMB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OLKBCLJBFAA
    def KPONLGHOAMBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OLKBCLJBFAA
    def CCIHMCAPHCB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLKBCLJBFAA
    def PIFAMBCEMKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OLKBCLJBFAAStart(builder): builder.StartObject(3)
def OLKBCLJBFAAAddKPONLGHOAMB(builder, KPONLGHOAMB): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(KPONLGHOAMB), 0)
def OLKBCLJBFAAStartKPONLGHOAMBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OLKBCLJBFAAAddCCIHMCAPHCB(builder, CCIHMCAPHCB): builder.PrependInt32Slot(1, CCIHMCAPHCB, 0)
def OLKBCLJBFAAAddPIFAMBCEMKL(builder, PIFAMBCEMKL): builder.PrependInt32Slot(2, PIFAMBCEMKL, 0)
def OLKBCLJBFAAEnd(builder): return builder.EndObject()
