# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PFOCKFPDBBD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPFOCKFPDBBD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PFOCKFPDBBD()
        x.Init(buf, n + offset)
        return x

    # PFOCKFPDBBD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PFOCKFPDBBD
    def BPEEDMNFPFB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def BPEEDMNFPFBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def BHBHJAACKOJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def BHBHJAACKOJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def OHBEDDIGFKG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def OHBEDDIGFKGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def DNHAKGCPLOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def DNHAKGCPLOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def ABBLHKCMKNN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def ABBLHKCMKNNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def JECKFMMDCDJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def JECKFMMDCDJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def DDLOGGPICAC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def DDLOGGPICACLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def JCAADAADPCD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def JCAADAADPCDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def HCCKPLJOCGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def HCCKPLJOCGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def NGCLLHHHOMF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def NGCLLHHHOMFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def OJDIFMNPMDF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def OJDIFMNPMDFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def JEALHBOJNFB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .CODGDOGMIDK import CODGDOGMIDK
            obj = CODGDOGMIDK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PFOCKFPDBBD
    def NBOHLKPDNKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def NBOHLKPDNKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def GFFCGBEAKDP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def GFFCGBEAKDPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def DHHLJCLLPAF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def DHHLJCLLPAFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def GGMFFACEAEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HHKGAENKODC import HHKGAENKODC
            obj = HHKGAENKODC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PFOCKFPDBBD
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OIDILPBJLEP import OIDILPBJLEP
            obj = OIDILPBJLEP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PFOCKFPDBBD
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def BOPJHCBICOB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CNLOCJHENHP import CNLOCJHENHP
            obj = CNLOCJHENHP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PFOCKFPDBBD
    def BOPJHCBICOBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def AFNAONIMHGM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def AFNAONIMHGMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def MMLGJGGCCOC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def MMLGJGGCCOCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def BMMPJNMGCGI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def BMMPJNMGCGILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def NOPFKAGCJAP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def NOPFKAGCJAPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def LMFIILEOAPK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def LMFIILEOAPKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def EACEANFJEEM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def EACEANFJEEMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def NLHNKAOMIPA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def NLHNKAOMIPALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def DGPFGIEPPFJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def DGPFGIEPPFJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def JLHFBBBHJLP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def JLHFBBBHJLPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def IJKGNDLDHOD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def IJKGNDLDHODLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def ALBAAFNCALM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def ALBAAFNCALMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def GLDKCDPNJHO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def GLDKCDPNJHOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def LEOIKCKHCIN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def LEOIKCKHCINLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def BCMGPILFLFF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def BCMGPILFLFFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def AJLMHCAJGNM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def AJLMHCAJGNMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def LKKFIEDGJCP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def LKKFIEDGJCPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def KKLBLAKPINK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def KKLBLAKPINKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def KLADDKGABOD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def KLADDKGABODLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def FCLPDBPKMGH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def FCLPDBPKMGHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def FECBKKEGDKJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def FECBKKEGDKJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def NNLMIGEBOLA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def NNLMIGEBOLALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PFOCKFPDBBD
    def AKJFOALPMNH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PFOCKFPDBBD
    def AKJFOALPMNHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PFOCKFPDBBDStart(builder): builder.StartObject(40)
def PFOCKFPDBBDAddBPEEDMNFPFB(builder, BPEEDMNFPFB): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BPEEDMNFPFB), 0)
def PFOCKFPDBBDStartBPEEDMNFPFBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddBHBHJAACKOJ(builder, BHBHJAACKOJ): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(BHBHJAACKOJ), 0)
def PFOCKFPDBBDStartBHBHJAACKOJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddOHBEDDIGFKG(builder, OHBEDDIGFKG): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OHBEDDIGFKG), 0)
def PFOCKFPDBBDStartOHBEDDIGFKGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddDNHAKGCPLOG(builder, DNHAKGCPLOG): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DNHAKGCPLOG), 0)
def PFOCKFPDBBDStartDNHAKGCPLOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddABBLHKCMKNN(builder, ABBLHKCMKNN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ABBLHKCMKNN), 0)
def PFOCKFPDBBDStartABBLHKCMKNNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddJECKFMMDCDJ(builder, JECKFMMDCDJ): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(JECKFMMDCDJ), 0)
def PFOCKFPDBBDStartJECKFMMDCDJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddDDLOGGPICAC(builder, DDLOGGPICAC): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(DDLOGGPICAC), 0)
def PFOCKFPDBBDStartDDLOGGPICACVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddJCAADAADPCD(builder, JCAADAADPCD): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(JCAADAADPCD), 0)
def PFOCKFPDBBDStartJCAADAADPCDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddHCCKPLJOCGJ(builder, HCCKPLJOCGJ): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(HCCKPLJOCGJ), 0)
def PFOCKFPDBBDStartHCCKPLJOCGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddNGCLLHHHOMF(builder, NGCLLHHHOMF): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(NGCLLHHHOMF), 0)
def PFOCKFPDBBDStartNGCLLHHHOMFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddOJDIFMNPMDF(builder, OJDIFMNPMDF): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(OJDIFMNPMDF), 0)
def PFOCKFPDBBDStartOJDIFMNPMDFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddJEALHBOJNFB(builder, JEALHBOJNFB): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(JEALHBOJNFB), 0)
def PFOCKFPDBBDAddNBOHLKPDNKA(builder, NBOHLKPDNKA): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(NBOHLKPDNKA), 0)
def PFOCKFPDBBDStartNBOHLKPDNKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddGFFCGBEAKDP(builder, GFFCGBEAKDP): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(GFFCGBEAKDP), 0)
def PFOCKFPDBBDStartGFFCGBEAKDPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddDHHLJCLLPAF(builder, DHHLJCLLPAF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(DHHLJCLLPAF), 0)
def PFOCKFPDBBDStartDHHLJCLLPAFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddGGMFFACEAEF(builder, GGMFFACEAEF): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(GGMFFACEAEF), 0)
def PFOCKFPDBBDAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def PFOCKFPDBBDStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddBOPJHCBICOB(builder, BOPJHCBICOB): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(BOPJHCBICOB), 0)
def PFOCKFPDBBDStartBOPJHCBICOBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddAFNAONIMHGM(builder, AFNAONIMHGM): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(AFNAONIMHGM), 0)
def PFOCKFPDBBDStartAFNAONIMHGMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddMMLGJGGCCOC(builder, MMLGJGGCCOC): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(MMLGJGGCCOC), 0)
def PFOCKFPDBBDStartMMLGJGGCCOCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddBMMPJNMGCGI(builder, BMMPJNMGCGI): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(BMMPJNMGCGI), 0)
def PFOCKFPDBBDStartBMMPJNMGCGIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddNOPFKAGCJAP(builder, NOPFKAGCJAP): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(NOPFKAGCJAP), 0)
def PFOCKFPDBBDStartNOPFKAGCJAPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddLMFIILEOAPK(builder, LMFIILEOAPK): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(LMFIILEOAPK), 0)
def PFOCKFPDBBDStartLMFIILEOAPKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddEACEANFJEEM(builder, EACEANFJEEM): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(EACEANFJEEM), 0)
def PFOCKFPDBBDStartEACEANFJEEMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddNLHNKAOMIPA(builder, NLHNKAOMIPA): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(NLHNKAOMIPA), 0)
def PFOCKFPDBBDStartNLHNKAOMIPAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddDGPFGIEPPFJ(builder, DGPFGIEPPFJ): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(DGPFGIEPPFJ), 0)
def PFOCKFPDBBDStartDGPFGIEPPFJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddJLHFBBBHJLP(builder, JLHFBBBHJLP): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(JLHFBBBHJLP), 0)
def PFOCKFPDBBDStartJLHFBBBHJLPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddIJKGNDLDHOD(builder, IJKGNDLDHOD): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(IJKGNDLDHOD), 0)
def PFOCKFPDBBDStartIJKGNDLDHODVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddALBAAFNCALM(builder, ALBAAFNCALM): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(ALBAAFNCALM), 0)
def PFOCKFPDBBDStartALBAAFNCALMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddGLDKCDPNJHO(builder, GLDKCDPNJHO): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(GLDKCDPNJHO), 0)
def PFOCKFPDBBDStartGLDKCDPNJHOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddLEOIKCKHCIN(builder, LEOIKCKHCIN): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(LEOIKCKHCIN), 0)
def PFOCKFPDBBDStartLEOIKCKHCINVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddBCMGPILFLFF(builder, BCMGPILFLFF): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(BCMGPILFLFF), 0)
def PFOCKFPDBBDStartBCMGPILFLFFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddAJLMHCAJGNM(builder, AJLMHCAJGNM): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(AJLMHCAJGNM), 0)
def PFOCKFPDBBDStartAJLMHCAJGNMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddLKKFIEDGJCP(builder, LKKFIEDGJCP): builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(LKKFIEDGJCP), 0)
def PFOCKFPDBBDStartLKKFIEDGJCPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddKKLBLAKPINK(builder, KKLBLAKPINK): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(KKLBLAKPINK), 0)
def PFOCKFPDBBDStartKKLBLAKPINKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddKLADDKGABOD(builder, KLADDKGABOD): builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(KLADDKGABOD), 0)
def PFOCKFPDBBDStartKLADDKGABODVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddFCLPDBPKMGH(builder, FCLPDBPKMGH): builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(FCLPDBPKMGH), 0)
def PFOCKFPDBBDStartFCLPDBPKMGHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddFECBKKEGDKJ(builder, FECBKKEGDKJ): builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(FECBKKEGDKJ), 0)
def PFOCKFPDBBDStartFECBKKEGDKJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddNNLMIGEBOLA(builder, NNLMIGEBOLA): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(NNLMIGEBOLA), 0)
def PFOCKFPDBBDStartNNLMIGEBOLAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDAddAKJFOALPMNH(builder, AKJFOALPMNH): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(AKJFOALPMNH), 0)
def PFOCKFPDBBDStartAKJFOALPMNHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PFOCKFPDBBDEnd(builder): return builder.EndObject()
