# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OLIHMDDCGNO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOLIHMDDCGNO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OLIHMDDCGNO()
        x.Init(buf, n + offset)
        return x

    # OLIHMDDCGNO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OLIHMDDCGNO
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def JHAMBKOEJPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def MJHPFNPCLBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def JDKBBEIBJBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OLIHMDDCGNO
    def ONFIAKMPBCK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OLIHMDDCGNO
    def ONFIAKMPBCKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OLIHMDDCGNOStart(builder): builder.StartObject(11)
def OLIHMDDCGNOAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def OLIHMDDCGNOAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def OLIHMDDCGNOAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def OLIHMDDCGNOAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependInt32Slot(3, HOENDPOGFIO, 0)
def OLIHMDDCGNOAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(4, LPJPOOHJKAE, 0)
def OLIHMDDCGNOAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependUint32Slot(5, LMLNKHMPOIG, 0)
def OLIHMDDCGNOAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(6, ODBPKGJPLMD, 0)
def OLIHMDDCGNOAddJHAMBKOEJPL(builder, JHAMBKOEJPL): builder.PrependInt32Slot(7, JHAMBKOEJPL, 0)
def OLIHMDDCGNOAddMJHPFNPCLBD(builder, MJHPFNPCLBD): builder.PrependInt32Slot(8, MJHPFNPCLBD, 0)
def OLIHMDDCGNOAddJDKBBEIBJBD(builder, JDKBBEIBJBD): builder.PrependInt32Slot(9, JDKBBEIBJBD, 0)
def OLIHMDDCGNOAddONFIAKMPBCK(builder, ONFIAKMPBCK): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ONFIAKMPBCK), 0)
def OLIHMDDCGNOStartONFIAKMPBCKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OLIHMDDCGNOEnd(builder): return builder.EndObject()
