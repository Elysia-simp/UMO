# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OJJCFKMBCCG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOJJCFKMBCCG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OJJCFKMBCCG()
        x.Init(buf, n + offset)
        return x

    # OJJCFKMBCCG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OJJCFKMBCCG
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OJJCFKMBCCG
    def HDALNHDJPLP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OJJCFKMBCCG
    def HDALNHDJPLPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OJJCFKMBCCG
    def LGMFAKNICMB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OJJCFKMBCCG
    def LGMFAKNICMBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OJJCFKMBCCG
    def LLPOHOGEHMG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OJJCFKMBCCG
    def LLPOHOGEHMGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OJJCFKMBCCG
    def IEIMHJDMABN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OJJCFKMBCCG
    def IEIMHJDMABNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OJJCFKMBCCGStart(builder): builder.StartObject(5)
def OJJCFKMBCCGAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def OJJCFKMBCCGAddHDALNHDJPLP(builder, HDALNHDJPLP): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HDALNHDJPLP), 0)
def OJJCFKMBCCGStartHDALNHDJPLPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OJJCFKMBCCGAddLGMFAKNICMB(builder, LGMFAKNICMB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LGMFAKNICMB), 0)
def OJJCFKMBCCGStartLGMFAKNICMBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OJJCFKMBCCGAddLLPOHOGEHMG(builder, LLPOHOGEHMG): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(LLPOHOGEHMG), 0)
def OJJCFKMBCCGStartLLPOHOGEHMGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OJJCFKMBCCGAddIEIMHJDMABN(builder, IEIMHJDMABN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IEIMHJDMABN), 0)
def OJJCFKMBCCGStartIEIMHJDMABNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OJJCFKMBCCGEnd(builder): return builder.EndObject()
