# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FDGDGGHOJBP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFDGDGGHOJBP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FDGDGGHOJBP()
        x.Init(buf, n + offset)
        return x

    # FDGDGGHOJBP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FDGDGGHOJBP
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HGBICHMJHMI import HGBICHMJHMI
            obj = HGBICHMJHMI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def BEINKIKDHCO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PNLDFJMHBJH import PNLDFJMHBJH
            obj = PNLDFJMHBJH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def BEINKIKDHCOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FDGDGGHOJBP
    def MMKDCMGIEKM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IABACDAGDAP import IABACDAGDAP
            obj = IABACDAGDAP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def MMKDCMGIEKMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FDGDGGHOJBP
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IGPIHCHKGPE import IGPIHCHKGPE
            obj = IGPIHCHKGPE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FDGDGGHOJBP
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ALMNNMCFOHL import ALMNNMCFOHL
            obj = ALMNNMCFOHL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FDGDGGHOJBP
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GMBEOADAJAE import GMBEOADAJAE
            obj = GMBEOADAJAE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FDGDGGHOJBP
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FDGDGGHOJBPStart(builder): builder.StartObject(6)
def FDGDGGHOJBPAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def FDGDGGHOJBPAddBEINKIKDHCO(builder, BEINKIKDHCO): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(BEINKIKDHCO), 0)
def FDGDGGHOJBPStartBEINKIKDHCOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FDGDGGHOJBPAddMMKDCMGIEKM(builder, MMKDCMGIEKM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(MMKDCMGIEKM), 0)
def FDGDGGHOJBPStartMMKDCMGIEKMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FDGDGGHOJBPAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def FDGDGGHOJBPStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FDGDGGHOJBPAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def FDGDGGHOJBPStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FDGDGGHOJBPAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def FDGDGGHOJBPStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FDGDGGHOJBPEnd(builder): return builder.EndObject()
