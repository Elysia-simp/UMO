# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NHPNFFMICJP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNHPNFFMICJP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NHPNFFMICJP()
        x.Init(buf, n + offset)
        return x

    # NHPNFFMICJP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NHPNFFMICJP
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NHPNFFMICJP
    def OFJEKBGFFPB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NHPNFFMICJP
    def OFJEKBGFFPBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NHPNFFMICJP
    def KNOOHMIHJNL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NHPNFFMICJP
    def KNOOHMIHJNLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def IKDLGFEPPDB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NHPNFFMICJP
    def IKDLGFEPPDBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NHPNFFMICJP
    def EECIECJDLGC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NHPNFFMICJP
    def CFBPBOLLPHH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NHPNFFMICJP
    def CFBPBOLLPHHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def KMLACADFKIN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NHPNFFMICJP
    def KMLACADFKINLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def EGMHEAOKLND(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NHPNFFMICJP
    def EGMHEAOKLNDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NHPNFFMICJP
    def OILFLMOBFJM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NHPNFFMICJP
    def CMNENMNDDMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NHPNFFMICJPStart(builder): builder.StartObject(12)
def NHPNFFMICJPAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def NHPNFFMICJPAddOFJEKBGFFPB(builder, OFJEKBGFFPB): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(OFJEKBGFFPB), 0)
def NHPNFFMICJPStartOFJEKBGFFPBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def NHPNFFMICJPAddKNOOHMIHJNL(builder, KNOOHMIHJNL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(KNOOHMIHJNL), 0)
def NHPNFFMICJPStartKNOOHMIHJNLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddIKDLGFEPPDB(builder, IKDLGFEPPDB): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IKDLGFEPPDB), 0)
def NHPNFFMICJPStartIKDLGFEPPDBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(5, OFMGALJGDAO, 0)
def NHPNFFMICJPAddEECIECJDLGC(builder, EECIECJDLGC): builder.PrependInt32Slot(6, EECIECJDLGC, 0)
def NHPNFFMICJPAddCFBPBOLLPHH(builder, CFBPBOLLPHH): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(CFBPBOLLPHH), 0)
def NHPNFFMICJPStartCFBPBOLLPHHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddKMLACADFKIN(builder, KMLACADFKIN): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(KMLACADFKIN), 0)
def NHPNFFMICJPStartKMLACADFKINVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddEGMHEAOKLND(builder, EGMHEAOKLND): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(EGMHEAOKLND), 0)
def NHPNFFMICJPStartEGMHEAOKLNDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NHPNFFMICJPAddOILFLMOBFJM(builder, OILFLMOBFJM): builder.PrependInt32Slot(10, OILFLMOBFJM, 0)
def NHPNFFMICJPAddCMNENMNDDMO(builder, CMNENMNDDMO): builder.PrependInt32Slot(11, CMNENMNDDMO, 0)
def NHPNFFMICJPEnd(builder): return builder.EndObject()
