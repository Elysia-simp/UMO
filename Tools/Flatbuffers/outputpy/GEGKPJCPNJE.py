# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GEGKPJCPNJE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGEGKPJCPNJE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GEGKPJCPNJE()
        x.Init(buf, n + offset)
        return x

    # GEGKPJCPNJE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GEGKPJCPNJE
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def MJOCIHPPKNO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def DDMBKEJNPJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def ACNNNALNEFM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def LOOGFGKLHGK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def HAMMBHGLKML(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def KALCKCHDIDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def KANIHFOMCKI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def GBGHHKPDHOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def NAJHJIHCOON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def LNCMMHCDOJE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def FOMMMCHNLPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GEGKPJCPNJE
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GEGKPJCPNJEStart(builder): builder.StartObject(14)
def GEGKPJCPNJEAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def GEGKPJCPNJEAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def GEGKPJCPNJEAddMJOCIHPPKNO(builder, MJOCIHPPKNO): builder.PrependUint32Slot(2, MJOCIHPPKNO, 0)
def GEGKPJCPNJEAddDDMBKEJNPJK(builder, DDMBKEJNPJK): builder.PrependUint32Slot(3, DDMBKEJNPJK, 0)
def GEGKPJCPNJEAddACNNNALNEFM(builder, ACNNNALNEFM): builder.PrependUint32Slot(4, ACNNNALNEFM, 0)
def GEGKPJCPNJEAddLOOGFGKLHGK(builder, LOOGFGKLHGK): builder.PrependUint32Slot(5, LOOGFGKLHGK, 0)
def GEGKPJCPNJEAddHAMMBHGLKML(builder, HAMMBHGLKML): builder.PrependUint32Slot(6, HAMMBHGLKML, 0)
def GEGKPJCPNJEAddKALCKCHDIDB(builder, KALCKCHDIDB): builder.PrependUint32Slot(7, KALCKCHDIDB, 0)
def GEGKPJCPNJEAddKANIHFOMCKI(builder, KANIHFOMCKI): builder.PrependUint32Slot(8, KANIHFOMCKI, 0)
def GEGKPJCPNJEAddGBGHHKPDHOH(builder, GBGHHKPDHOH): builder.PrependUint32Slot(9, GBGHHKPDHOH, 0)
def GEGKPJCPNJEAddNAJHJIHCOON(builder, NAJHJIHCOON): builder.PrependUint32Slot(10, NAJHJIHCOON, 0)
def GEGKPJCPNJEAddLNCMMHCDOJE(builder, LNCMMHCDOJE): builder.PrependUint32Slot(11, LNCMMHCDOJE, 0)
def GEGKPJCPNJEAddFOMMMCHNLPL(builder, FOMMMCHNLPL): builder.PrependUint32Slot(12, FOMMMCHNLPL, 0)
def GEGKPJCPNJEAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(13, OFMGALJGDAO, 0)
def GEGKPJCPNJEEnd(builder): return builder.EndObject()
