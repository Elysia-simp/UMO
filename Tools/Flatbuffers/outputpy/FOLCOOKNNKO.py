# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FOLCOOKNNKO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFOLCOOKNNKO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FOLCOOKNNKO()
        x.Init(buf, n + offset)
        return x

    # FOLCOOKNNKO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FOLCOOKNNKO
    def CILHGCNPEFO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FOLCOOKNNKO
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FOLCOOKNNKO
    def HNCIPPDJDPM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FOLCOOKNNKO
    def IBCGFNCKHBJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # FOLCOOKNNKO
    def JMLNODDMKCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FOLCOOKNNKO
    def BJPLIBGKNON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FOLCOOKNNKOStart(builder): builder.StartObject(6)
def FOLCOOKNNKOAddCILHGCNPEFO(builder, CILHGCNPEFO): builder.PrependInt32Slot(0, CILHGCNPEFO, 0)
def FOLCOOKNNKOAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def FOLCOOKNNKOAddHNCIPPDJDPM(builder, HNCIPPDJDPM): builder.PrependInt32Slot(2, HNCIPPDJDPM, 0)
def FOLCOOKNNKOAddIBCGFNCKHBJ(builder, IBCGFNCKHBJ): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IBCGFNCKHBJ), 0)
def FOLCOOKNNKOAddJMLNODDMKCE(builder, JMLNODDMKCE): builder.PrependInt32Slot(4, JMLNODDMKCE, 0)
def FOLCOOKNNKOAddBJPLIBGKNON(builder, BJPLIBGKNON): builder.PrependInt32Slot(5, BJPLIBGKNON, 0)
def FOLCOOKNNKOEnd(builder): return builder.EndObject()
