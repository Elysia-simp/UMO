# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DHFKAKFHFOL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDHFKAKFHFOL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DHFKAKFHFOL()
        x.Init(buf, n + offset)
        return x

    # DHFKAKFHFOL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DHFKAKFHFOL
    def EIOJCBPLGPB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HGDLMDMAIHK import HGDLMDMAIHK
            obj = HGDLMDMAIHK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def ENOAIJNIMEC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BPAPHMKFBEF import BPAPHMKFBEF
            obj = BPAPHMKFBEF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def ENOAIJNIMECLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DHFKAKFHFOL
    def EICOHLEBKLE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BOPCBNDDJHD import BOPCBNDDJHD
            obj = BOPCBNDDJHD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def EICOHLEBKLELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DHFKAKFHFOL
    def JDIKIHGCOLB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GFDPDCODNPA import GFDPDCODNPA
            obj = GFDPDCODNPA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def JDIKIHGCOLBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DHFKAKFHFOL
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BKOCGOPJMPI import BKOCGOPJMPI
            obj = BKOCGOPJMPI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DHFKAKFHFOL
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EBMOMBAFGEB import EBMOMBAFGEB
            obj = EBMOMBAFGEB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DHFKAKFHFOL
    def CBMKDHMLKGE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BKAHCKIDMFJ import BKAHCKIDMFJ
            obj = BKAHCKIDMFJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DHFKAKFHFOL
    def CBMKDHMLKGELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DHFKAKFHFOLStart(builder): builder.StartObject(7)
def DHFKAKFHFOLAddEIOJCBPLGPB(builder, EIOJCBPLGPB): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EIOJCBPLGPB), 0)
def DHFKAKFHFOLAddENOAIJNIMEC(builder, ENOAIJNIMEC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ENOAIJNIMEC), 0)
def DHFKAKFHFOLStartENOAIJNIMECVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLAddEICOHLEBKLE(builder, EICOHLEBKLE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(EICOHLEBKLE), 0)
def DHFKAKFHFOLStartEICOHLEBKLEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLAddJDIKIHGCOLB(builder, JDIKIHGCOLB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(JDIKIHGCOLB), 0)
def DHFKAKFHFOLStartJDIKIHGCOLBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def DHFKAKFHFOLStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def DHFKAKFHFOLStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLAddCBMKDHMLKGE(builder, CBMKDHMLKGE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(CBMKDHMLKGE), 0)
def DHFKAKFHFOLStartCBMKDHMLKGEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DHFKAKFHFOLEnd(builder): return builder.EndObject()
