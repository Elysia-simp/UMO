# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BMALHADEABJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBMALHADEABJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BMALHADEABJ()
        x.Init(buf, n + offset)
        return x

    # BMALHADEABJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BMALHADEABJ
    def INCDOBNIIPH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def MDGOAMHIAMH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def DHJAFJKALCA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def LACEJFCOFHG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BMALHADEABJ
    def LACEJFCOFHGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BMALHADEABJ
    def OFIKIJKPFAF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BMALHADEABJ
    def OFIKIJKPFAFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BMALHADEABJ
    def CHNBFNIKEBM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def APNAIGEPNEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def GILPCLPDGBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def IFDJNKPLADH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def MOMCBJDJDIA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def EINBGKEKALF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def CLLDHAPABLI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def IJKMBFLJGJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BMALHADEABJ
    def EPGNGIDAFGH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def BMALHADEABJStart(builder): builder.StartObject(14)
def BMALHADEABJAddINCDOBNIIPH(builder, INCDOBNIIPH): builder.PrependUint32Slot(0, INCDOBNIIPH, 0)
def BMALHADEABJAddMDGOAMHIAMH(builder, MDGOAMHIAMH): builder.PrependUint32Slot(1, MDGOAMHIAMH, 0)
def BMALHADEABJAddDHJAFJKALCA(builder, DHJAFJKALCA): builder.PrependUint32Slot(2, DHJAFJKALCA, 0)
def BMALHADEABJAddLACEJFCOFHG(builder, LACEJFCOFHG): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(LACEJFCOFHG), 0)
def BMALHADEABJStartLACEJFCOFHGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BMALHADEABJAddOFIKIJKPFAF(builder, OFIKIJKPFAF): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(OFIKIJKPFAF), 0)
def BMALHADEABJStartOFIKIJKPFAFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BMALHADEABJAddCHNBFNIKEBM(builder, CHNBFNIKEBM): builder.PrependUint32Slot(5, CHNBFNIKEBM, 0)
def BMALHADEABJAddAPNAIGEPNEG(builder, APNAIGEPNEG): builder.PrependUint32Slot(6, APNAIGEPNEG, 0)
def BMALHADEABJAddGILPCLPDGBI(builder, GILPCLPDGBI): builder.PrependUint32Slot(7, GILPCLPDGBI, 0)
def BMALHADEABJAddIFDJNKPLADH(builder, IFDJNKPLADH): builder.PrependUint32Slot(8, IFDJNKPLADH, 0)
def BMALHADEABJAddMOMCBJDJDIA(builder, MOMCBJDJDIA): builder.PrependUint32Slot(9, MOMCBJDJDIA, 0)
def BMALHADEABJAddEINBGKEKALF(builder, EINBGKEKALF): builder.PrependUint32Slot(10, EINBGKEKALF, 0)
def BMALHADEABJAddCLLDHAPABLI(builder, CLLDHAPABLI): builder.PrependUint32Slot(11, CLLDHAPABLI, 0)
def BMALHADEABJAddIJKMBFLJGJF(builder, IJKMBFLJGJF): builder.PrependUint32Slot(12, IJKMBFLJGJF, 0)
def BMALHADEABJAddEPGNGIDAFGH(builder, EPGNGIDAFGH): builder.PrependUint32Slot(13, EPGNGIDAFGH, 0)
def BMALHADEABJEnd(builder): return builder.EndObject()
