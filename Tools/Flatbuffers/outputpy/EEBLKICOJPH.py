# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EEBLKICOJPH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEEBLKICOJPH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EEBLKICOJPH()
        x.Init(buf, n + offset)
        return x

    # EEBLKICOJPH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EEBLKICOJPH
    def OFNGBGFMDDO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EECGFGECDBJ import EECGFGECDBJ
            obj = EECGFGECDBJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EEBLKICOJPH
    def OFNGBGFMDDOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EEBLKICOJPH
    def FOBKBJEHOFG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NACHIDBHKDO import NACHIDBHKDO
            obj = NACHIDBHKDO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EEBLKICOJPH
    def FOBKBJEHOFGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EEBLKICOJPH
    def ILBKJACHOHM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BPMNLCHMMIE import BPMNLCHMMIE
            obj = BPMNLCHMMIE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EEBLKICOJPH
    def ILBKJACHOHMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EEBLKICOJPHStart(builder): builder.StartObject(3)
def EEBLKICOJPHAddOFNGBGFMDDO(builder, OFNGBGFMDDO): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OFNGBGFMDDO), 0)
def EEBLKICOJPHStartOFNGBGFMDDOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EEBLKICOJPHAddFOBKBJEHOFG(builder, FOBKBJEHOFG): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FOBKBJEHOFG), 0)
def EEBLKICOJPHStartFOBKBJEHOFGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EEBLKICOJPHAddILBKJACHOHM(builder, ILBKJACHOHM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ILBKJACHOHM), 0)
def EEBLKICOJPHStartILBKJACHOHMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EEBLKICOJPHEnd(builder): return builder.EndObject()
