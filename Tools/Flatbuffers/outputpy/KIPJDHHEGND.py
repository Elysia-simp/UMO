# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class KIPJDHHEGND(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKIPJDHHEGND(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KIPJDHHEGND()
        x.Init(buf, n + offset)
        return x

    # KIPJDHHEGND
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KIPJDHHEGND
    def NFAJGFHLKGI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GGALCNFLIBP import GGALCNFLIBP
            obj = GGALCNFLIBP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KIPJDHHEGND
    def NFAJGFHLKGILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KIPJDHHEGND
    def ONGHLNCPCMI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JIHBJPCAEMH import JIHBJPCAEMH
            obj = JIHBJPCAEMH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KIPJDHHEGND
    def ONGHLNCPCMILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KIPJDHHEGND
    def OGCIHPPJHMG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JEFGONAHEGI import JEFGONAHEGI
            obj = JEFGONAHEGI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KIPJDHHEGND
    def OGCIHPPJHMGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KIPJDHHEGNDStart(builder): builder.StartObject(3)
def KIPJDHHEGNDAddNFAJGFHLKGI(builder, NFAJGFHLKGI): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NFAJGFHLKGI), 0)
def KIPJDHHEGNDStartNFAJGFHLKGIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KIPJDHHEGNDAddONGHLNCPCMI(builder, ONGHLNCPCMI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ONGHLNCPCMI), 0)
def KIPJDHHEGNDStartONGHLNCPCMIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KIPJDHHEGNDAddOGCIHPPJHMG(builder, OGCIHPPJHMG): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OGCIHPPJHMG), 0)
def KIPJDHHEGNDStartOGCIHPPJHMGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KIPJDHHEGNDEnd(builder): return builder.EndObject()
