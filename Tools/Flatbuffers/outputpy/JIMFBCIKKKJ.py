# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JIMFBCIKKKJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJIMFBCIKKKJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JIMFBCIKKKJ()
        x.Init(buf, n + offset)
        return x

    # JIMFBCIKKKJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JIMFBCIKKKJ
    def COPFAKAHEMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def JAOFIDGEIGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def FHHFICHAABG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def HAHMOLPJPCG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def BPMBFFDNMDD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JIMFBCIKKKJ
    def PELKLPGCMFN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def JIMFBCIKKKJStart(builder): builder.StartObject(11)
def JIMFBCIKKKJAddCOPFAKAHEMN(builder, COPFAKAHEMN): builder.PrependInt32Slot(0, COPFAKAHEMN, 0)
def JIMFBCIKKKJAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def JIMFBCIKKKJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def JIMFBCIKKKJAddJAOFIDGEIGE(builder, JAOFIDGEIGE): builder.PrependInt32Slot(3, JAOFIDGEIGE, 0)
def JIMFBCIKKKJAddFHHFICHAABG(builder, FHHFICHAABG): builder.PrependInt32Slot(4, FHHFICHAABG, 0)
def JIMFBCIKKKJAddHAHMOLPJPCG(builder, HAHMOLPJPCG): builder.PrependInt32Slot(5, HAHMOLPJPCG, 0)
def JIMFBCIKKKJAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(6, NJLJEKDBPCH, 0)
def JIMFBCIKKKJAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependInt32Slot(7, MAOAGDBDBIB, 0)
def JIMFBCIKKKJAddBPMBFFDNMDD(builder, BPMBFFDNMDD): builder.PrependInt32Slot(8, BPMBFFDNMDD, 0)
def JIMFBCIKKKJAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependInt32Slot(9, HOENDPOGFIO, 0)
def JIMFBCIKKKJAddPELKLPGCMFN(builder, PELKLPGCMFN): builder.PrependInt32Slot(10, PELKLPGCMFN, 0)
def JIMFBCIKKKJEnd(builder): return builder.EndObject()
