# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DFOHOJKKKDJ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDFOHOJKKKDJ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DFOHOJKKKDJ()
        x.Init(buf, n + offset)
        return x

    # DFOHOJKKKDJ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DFOHOJKKKDJ
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def MJGMLHPCJKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def KEJFLGLANOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def KKIOBDILLGC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DFOHOJKKKDJ
    def KKIOBDILLGCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DFOHOJKKKDJ
    def GCPGKNHOELA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def OINHNODKGMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def PDMFOEDKBPM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def DKLGCNIKBNO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def CAOMFEHHCJO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def NGHNHBKONEK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def AAEFDGPJPDH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def BPOBCDFADPN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def BDPKAIDKLBB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DFOHOJKKKDJ
    def PKAOKEACOEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DFOHOJKKKDJStart(builder): builder.StartObject(15)
def DFOHOJKKKDJAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def DFOHOJKKKDJAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def DFOHOJKKKDJAddMJGMLHPCJKL(builder, MJGMLHPCJKL): builder.PrependUint32Slot(2, MJGMLHPCJKL, 0)
def DFOHOJKKKDJAddKEJFLGLANOM(builder, KEJFLGLANOM): builder.PrependUint32Slot(3, KEJFLGLANOM, 0)
def DFOHOJKKKDJAddKKIOBDILLGC(builder, KKIOBDILLGC): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(KKIOBDILLGC), 0)
def DFOHOJKKKDJStartKKIOBDILLGCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DFOHOJKKKDJAddGCPGKNHOELA(builder, GCPGKNHOELA): builder.PrependUint32Slot(5, GCPGKNHOELA, 0)
def DFOHOJKKKDJAddOINHNODKGMO(builder, OINHNODKGMO): builder.PrependUint32Slot(6, OINHNODKGMO, 0)
def DFOHOJKKKDJAddPDMFOEDKBPM(builder, PDMFOEDKBPM): builder.PrependUint32Slot(7, PDMFOEDKBPM, 0)
def DFOHOJKKKDJAddDKLGCNIKBNO(builder, DKLGCNIKBNO): builder.PrependUint32Slot(8, DKLGCNIKBNO, 0)
def DFOHOJKKKDJAddCAOMFEHHCJO(builder, CAOMFEHHCJO): builder.PrependUint32Slot(9, CAOMFEHHCJO, 0)
def DFOHOJKKKDJAddNGHNHBKONEK(builder, NGHNHBKONEK): builder.PrependUint32Slot(10, NGHNHBKONEK, 0)
def DFOHOJKKKDJAddAAEFDGPJPDH(builder, AAEFDGPJPDH): builder.PrependUint32Slot(11, AAEFDGPJPDH, 0)
def DFOHOJKKKDJAddBPOBCDFADPN(builder, BPOBCDFADPN): builder.PrependUint32Slot(12, BPOBCDFADPN, 0)
def DFOHOJKKKDJAddBDPKAIDKLBB(builder, BDPKAIDKLBB): builder.PrependUint32Slot(13, BDPKAIDKLBB, 0)
def DFOHOJKKKDJAddPKAOKEACOEE(builder, PKAOKEACOEE): builder.PrependUint32Slot(14, PKAOKEACOEE, 0)
def DFOHOJKKKDJEnd(builder): return builder.EndObject()
