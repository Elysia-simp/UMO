# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LNEJLNKGPNE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLNEJLNKGPNE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LNEJLNKGPNE()
        x.Init(buf, n + offset)
        return x

    # LNEJLNKGPNE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LNEJLNKGPNE
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def IAANELFBMJA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def OEHNJJEPMJI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def MEBNLBGNNPP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def BBINGFKGFPB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LNEJLNKGPNE
    def JBCDDOFEDEP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LNEJLNKGPNEStart(builder): builder.StartObject(10)
def LNEJLNKGPNEAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def LNEJLNKGPNEAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def LNEJLNKGPNEAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def LNEJLNKGPNEAddIAANELFBMJA(builder, IAANELFBMJA): builder.PrependUint32Slot(3, IAANELFBMJA, 0)
def LNEJLNKGPNEAddOEHNJJEPMJI(builder, OEHNJJEPMJI): builder.PrependUint32Slot(4, OEHNJJEPMJI, 0)
def LNEJLNKGPNEAddMEBNLBGNNPP(builder, MEBNLBGNNPP): builder.PrependInt32Slot(5, MEBNLBGNNPP, 0)
def LNEJLNKGPNEAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(6, NJLJEKDBPCH, 0)
def LNEJLNKGPNEAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(7, MAOAGDBDBIB, 0)
def LNEJLNKGPNEAddBBINGFKGFPB(builder, BBINGFKGFPB): builder.PrependUint32Slot(8, BBINGFKGFPB, 0)
def LNEJLNKGPNEAddJBCDDOFEDEP(builder, JBCDDOFEDEP): builder.PrependUint32Slot(9, JBCDDOFEDEP, 0)
def LNEJLNKGPNEEnd(builder): return builder.EndObject()
