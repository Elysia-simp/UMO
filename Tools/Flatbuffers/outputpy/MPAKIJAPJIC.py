# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MPAKIJAPJIC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMPAKIJAPJIC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MPAKIJAPJIC()
        x.Init(buf, n + offset)
        return x

    # MPAKIJAPJIC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MPAKIJAPJIC
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MPAKIJAPJIC
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MPAKIJAPJIC
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MPAKIJAPJIC
    def NLPMPPCENKD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MPAKIJAPJIC
    def NLPMPPCENKDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MPAKIJAPJIC
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MPAKIJAPJIC
    def KNDBMPNNCGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MPAKIJAPJIC
    def KNDBMPNNCGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MPAKIJAPJICStart(builder): builder.StartObject(12)
def MPAKIJAPJICAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def MPAKIJAPJICAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def MPAKIJAPJICAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def MPAKIJAPJICAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def MPAKIJAPJICAddNLPMPPCENKD(builder, NLPMPPCENKD): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NLPMPPCENKD), 0)
def MPAKIJAPJICStartNLPMPPCENKDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MPAKIJAPJICAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def MPAKIJAPJICAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(6, DJHKCHMBGHC, 0)
def MPAKIJAPJICAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(7, BCKOLCDDIAG, 0)
def MPAKIJAPJICAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(8, LKIBIHGHEMA, 0)
def MPAKIJAPJICAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(9, ANELKJCGJJL, 0)
def MPAKIJAPJICAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(10, AEOKLKJAKHB, 0)
def MPAKIJAPJICAddKNDBMPNNCGG(builder, KNDBMPNNCGG): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(KNDBMPNNCGG), 0)
def MPAKIJAPJICStartKNDBMPNNCGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MPAKIJAPJICEnd(builder): return builder.EndObject()
