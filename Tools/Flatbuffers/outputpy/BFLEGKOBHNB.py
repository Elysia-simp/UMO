# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BFLEGKOBHNB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBFLEGKOBHNB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BFLEGKOBHNB()
        x.Init(buf, n + offset)
        return x

    # BFLEGKOBHNB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BFLEGKOBHNB
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def CDDMLDEPLAC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def FGONCIDNPDP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def JPKONAPENGB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def JJPIKBCKLGF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def ENPKFDIPGPF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def GJOHJJMJEND(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BFLEGKOBHNB
    def GJOHJJMJENDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BFLEGKOBHNB
    def NLNDCHHFDPC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BFLEGKOBHNB
    def NLNDCHHFDPCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BFLEGKOBHNB
    def DEICBCKPFNP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def EOOJFOJPOEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def KCPNGJFPKHG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BFLEGKOBHNB
    def KCPNGJFPKHGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BFLEGKOBHNB
    def ADCLAGBHDBC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BFLEGKOBHNB
    def AGOIMGHMGOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BFLEGKOBHNBStart(builder): builder.StartObject(18)
def BFLEGKOBHNBAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def BFLEGKOBHNBAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def BFLEGKOBHNBAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def BFLEGKOBHNBAddCDDMLDEPLAC(builder, CDDMLDEPLAC): builder.PrependInt32Slot(3, CDDMLDEPLAC, 0)
def BFLEGKOBHNBAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(4, LMLNKHMPOIG, 0)
def BFLEGKOBHNBAddFGONCIDNPDP(builder, FGONCIDNPDP): builder.PrependInt32Slot(5, FGONCIDNPDP, 0)
def BFLEGKOBHNBAddJPKONAPENGB(builder, JPKONAPENGB): builder.PrependUint32Slot(6, JPKONAPENGB, 0)
def BFLEGKOBHNBAddJJPIKBCKLGF(builder, JJPIKBCKLGF): builder.PrependInt32Slot(7, JJPIKBCKLGF, 0)
def BFLEGKOBHNBAddENPKFDIPGPF(builder, ENPKFDIPGPF): builder.PrependInt32Slot(8, ENPKFDIPGPF, 0)
def BFLEGKOBHNBAddGJOHJJMJEND(builder, GJOHJJMJEND): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(GJOHJJMJEND), 0)
def BFLEGKOBHNBStartGJOHJJMJENDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BFLEGKOBHNBAddNLNDCHHFDPC(builder, NLNDCHHFDPC): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(NLNDCHHFDPC), 0)
def BFLEGKOBHNBStartNLNDCHHFDPCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BFLEGKOBHNBAddDEICBCKPFNP(builder, DEICBCKPFNP): builder.PrependInt32Slot(11, DEICBCKPFNP, 0)
def BFLEGKOBHNBAddEOOJFOJPOEE(builder, EOOJFOJPOEE): builder.PrependInt32Slot(12, EOOJFOJPOEE, 0)
def BFLEGKOBHNBAddKCPNGJFPKHG(builder, KCPNGJFPKHG): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(KCPNGJFPKHG), 0)
def BFLEGKOBHNBStartKCPNGJFPKHGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BFLEGKOBHNBAddADCLAGBHDBC(builder, ADCLAGBHDBC): builder.PrependInt32Slot(14, ADCLAGBHDBC, 0)
def BFLEGKOBHNBAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependUint32Slot(15, NJLJEKDBPCH, 0)
def BFLEGKOBHNBAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependUint32Slot(16, MAOAGDBDBIB, 0)
def BFLEGKOBHNBAddAGOIMGHMGOH(builder, AGOIMGHMGOH): builder.PrependInt32Slot(17, AGOIMGHMGOH, 0)
def BFLEGKOBHNBEnd(builder): return builder.EndObject()
