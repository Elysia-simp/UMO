# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JGHMLKFMFBM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJGHMLKFMFBM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JGHMLKFMFBM()
        x.Init(buf, n + offset)
        return x

    # JGHMLKFMFBM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JGHMLKFMFBM
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JGHMLKFMFBM
    def IOEAHIGFCBN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JGHMLKFMFBM
    def NKHLDNPCMDK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # JGHMLKFMFBM
    def NKHLDNPCMDKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGHMLKFMFBM
    def JHLBDFAGELJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # JGHMLKFMFBM
    def JHLBDFAGELJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGHMLKFMFBM
    def AKLEGPKGNDI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # JGHMLKFMFBM
    def AKLEGPKGNDILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JGHMLKFMFBM
    def ADCPHBKIAOB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # JGHMLKFMFBM
    def ADCPHBKIAOBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def JGHMLKFMFBMStart(builder): builder.StartObject(6)
def JGHMLKFMFBMAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def JGHMLKFMFBMAddIOEAHIGFCBN(builder, IOEAHIGFCBN): builder.PrependInt32Slot(1, IOEAHIGFCBN, 0)
def JGHMLKFMFBMAddNKHLDNPCMDK(builder, NKHLDNPCMDK): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NKHLDNPCMDK), 0)
def JGHMLKFMFBMStartNKHLDNPCMDKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGHMLKFMFBMAddJHLBDFAGELJ(builder, JHLBDFAGELJ): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(JHLBDFAGELJ), 0)
def JGHMLKFMFBMStartJHLBDFAGELJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGHMLKFMFBMAddAKLEGPKGNDI(builder, AKLEGPKGNDI): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(AKLEGPKGNDI), 0)
def JGHMLKFMFBMStartAKLEGPKGNDIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGHMLKFMFBMAddADCPHBKIAOB(builder, ADCPHBKIAOB): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ADCPHBKIAOB), 0)
def JGHMLKFMFBMStartADCPHBKIAOBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def JGHMLKFMFBMEnd(builder): return builder.EndObject()
