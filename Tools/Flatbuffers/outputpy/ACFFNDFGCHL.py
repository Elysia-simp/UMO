# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ACFFNDFGCHL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsACFFNDFGCHL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ACFFNDFGCHL()
        x.Init(buf, n + offset)
        return x

    # ACFFNDFGCHL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ACFFNDFGCHL
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ACFFNDFGCHL
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ACFFNDFGCHL
    def GLIIHLOLPEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ACFFNDFGCHL
    def BNDAHALMIPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ACFFNDFGCHL
    def BKLDFCFKFOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ACFFNDFGCHL
    def BKLDFCFKFOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ACFFNDFGCHL
    def IOKCFIHFBHG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # ACFFNDFGCHL
    def CLEEFGNMCEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ACFFNDFGCHL
    def GKMDCGBFHPM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ACFFNDFGCHLStart(builder): builder.StartObject(8)
def ACFFNDFGCHLAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def ACFFNDFGCHLAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def ACFFNDFGCHLAddGLIIHLOLPEF(builder, GLIIHLOLPEF): builder.PrependUint32Slot(2, GLIIHLOLPEF, 0)
def ACFFNDFGCHLAddBNDAHALMIPE(builder, BNDAHALMIPE): builder.PrependUint32Slot(3, BNDAHALMIPE, 0)
def ACFFNDFGCHLAddBKLDFCFKFOM(builder, BKLDFCFKFOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(BKLDFCFKFOM), 0)
def ACFFNDFGCHLStartBKLDFCFKFOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ACFFNDFGCHLAddIOKCFIHFBHG(builder, IOKCFIHFBHG): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(IOKCFIHFBHG), 0)
def ACFFNDFGCHLAddCLEEFGNMCEL(builder, CLEEFGNMCEL): builder.PrependInt32Slot(6, CLEEFGNMCEL, 0)
def ACFFNDFGCHLAddGKMDCGBFHPM(builder, GKMDCGBFHPM): builder.PrependInt32Slot(7, GKMDCGBFHPM, 0)
def ACFFNDFGCHLEnd(builder): return builder.EndObject()
