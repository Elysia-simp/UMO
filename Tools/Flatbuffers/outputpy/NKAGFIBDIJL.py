# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NKAGFIBDIJL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNKAGFIBDIJL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NKAGFIBDIJL()
        x.Init(buf, n + offset)
        return x

    # NKAGFIBDIJL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NKAGFIBDIJL
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NKAGFIBDIJL
    def HJNPKHJJDBB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NKAGFIBDIJL
    def LEFPIGNDJNC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NKAGFIBDIJL
    def LEFPIGNDJNCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NKAGFIBDIJL
    def BNCIPLKECMC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NKAGFIBDIJL
    def BNCIPLKECMCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NKAGFIBDIJL
    def OOJBHHPJONJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NKAGFIBDIJL
    def OOJBHHPJONJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NKAGFIBDIJL
    def ALPALMJMJJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NKAGFIBDIJL
    def PODPGCKCBEO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NKAGFIBDIJL
    def PODPGCKCBEOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NKAGFIBDIJLStart(builder): builder.StartObject(7)
def NKAGFIBDIJLAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def NKAGFIBDIJLAddHJNPKHJJDBB(builder, HJNPKHJJDBB): builder.PrependUint32Slot(1, HJNPKHJJDBB, 0)
def NKAGFIBDIJLAddLEFPIGNDJNC(builder, LEFPIGNDJNC): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LEFPIGNDJNC), 0)
def NKAGFIBDIJLStartLEFPIGNDJNCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NKAGFIBDIJLAddBNCIPLKECMC(builder, BNCIPLKECMC): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(BNCIPLKECMC), 0)
def NKAGFIBDIJLStartBNCIPLKECMCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NKAGFIBDIJLAddOOJBHHPJONJ(builder, OOJBHHPJONJ): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(OOJBHHPJONJ), 0)
def NKAGFIBDIJLStartOOJBHHPJONJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NKAGFIBDIJLAddALPALMJMJJK(builder, ALPALMJMJJK): builder.PrependInt32Slot(5, ALPALMJMJJK, 0)
def NKAGFIBDIJLAddPODPGCKCBEO(builder, PODPGCKCBEO): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(PODPGCKCBEO), 0)
def NKAGFIBDIJLStartPODPGCKCBEOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NKAGFIBDIJLEnd(builder): return builder.EndObject()
