# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class IOOJDNCIHIC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIOOJDNCIHIC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IOOJDNCIHIC()
        x.Init(buf, n + offset)
        return x

    # IOOJDNCIHIC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IOOJDNCIHIC
    def PKMCMIBBNDO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ECNBODJFAFC import ECNBODJFAFC
            obj = ECNBODJFAFC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IOOJDNCIHIC
    def PKMCMIBBNDOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IOOJDNCIHIC
    def IEFEAHKENMC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OBKDFBANMPH import OBKDFBANMPH
            obj = OBKDFBANMPH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IOOJDNCIHIC
    def IEFEAHKENMCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IOOJDNCIHIC
    def OFIBOIJKMPK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .HDMBLGJMPMA import HDMBLGJMPMA
            obj = HDMBLGJMPMA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def IOOJDNCIHICStart(builder): builder.StartObject(3)
def IOOJDNCIHICAddPKMCMIBBNDO(builder, PKMCMIBBNDO): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(PKMCMIBBNDO), 0)
def IOOJDNCIHICStartPKMCMIBBNDOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IOOJDNCIHICAddIEFEAHKENMC(builder, IEFEAHKENMC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IEFEAHKENMC), 0)
def IOOJDNCIHICStartIEFEAHKENMCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IOOJDNCIHICAddOFIBOIJKMPK(builder, OFIBOIJKMPK): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OFIBOIJKMPK), 0)
def IOOJDNCIHICEnd(builder): return builder.EndObject()
