# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MGJAIDMKMCE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMGJAIDMKMCE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MGJAIDMKMCE()
        x.Init(buf, n + offset)
        return x

    # MGJAIDMKMCE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MGJAIDMKMCE
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MGJAIDMKMCE
    def IKILGDOHAFC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def CLPPHJAOKPA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def IHBIEFNEPMC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def NMBMENKFDCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def PDIBMFKEJMM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def DPKCMAHGHNI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def BMONGFPOEOB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def FMJMJIKOLFL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def AACHELNDICD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def FKLPAEODOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def FPHHEKLGANL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def KELLGKFABLD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def CENBENCHADM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MGJAIDMKMCE
    def CENBENCHADMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MGJAIDMKMCE
    def LBMKEILIGBG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def NBDEBEPOLOB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def NPIBNFGMMEK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def HAMEBHALAEN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MGJAIDMKMCE
    def OEGNNNEFAAK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MGJAIDMKMCEStart(builder): builder.StartObject(21)
def MGJAIDMKMCEAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def MGJAIDMKMCEAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def MGJAIDMKMCEAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def MGJAIDMKMCEAddIKILGDOHAFC(builder, IKILGDOHAFC): builder.PrependInt32Slot(3, IKILGDOHAFC, 0)
def MGJAIDMKMCEAddCLPPHJAOKPA(builder, CLPPHJAOKPA): builder.PrependInt32Slot(4, CLPPHJAOKPA, 0)
def MGJAIDMKMCEAddIHBIEFNEPMC(builder, IHBIEFNEPMC): builder.PrependInt32Slot(5, IHBIEFNEPMC, 0)
def MGJAIDMKMCEAddNMBMENKFDCE(builder, NMBMENKFDCE): builder.PrependInt32Slot(6, NMBMENKFDCE, 0)
def MGJAIDMKMCEAddPDIBMFKEJMM(builder, PDIBMFKEJMM): builder.PrependInt32Slot(7, PDIBMFKEJMM, 0)
def MGJAIDMKMCEAddDPKCMAHGHNI(builder, DPKCMAHGHNI): builder.PrependInt32Slot(8, DPKCMAHGHNI, 0)
def MGJAIDMKMCEAddBMONGFPOEOB(builder, BMONGFPOEOB): builder.PrependInt32Slot(9, BMONGFPOEOB, 0)
def MGJAIDMKMCEAddFMJMJIKOLFL(builder, FMJMJIKOLFL): builder.PrependInt32Slot(10, FMJMJIKOLFL, 0)
def MGJAIDMKMCEAddAACHELNDICD(builder, AACHELNDICD): builder.PrependInt32Slot(11, AACHELNDICD, 0)
def MGJAIDMKMCEAddFKLPAEODOCH(builder, FKLPAEODOCH): builder.PrependInt32Slot(12, FKLPAEODOCH, 0)
def MGJAIDMKMCEAddFPHHEKLGANL(builder, FPHHEKLGANL): builder.PrependInt32Slot(13, FPHHEKLGANL, 0)
def MGJAIDMKMCEAddKELLGKFABLD(builder, KELLGKFABLD): builder.PrependInt32Slot(14, KELLGKFABLD, 0)
def MGJAIDMKMCEAddCENBENCHADM(builder, CENBENCHADM): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(CENBENCHADM), 0)
def MGJAIDMKMCEStartCENBENCHADMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MGJAIDMKMCEAddLBMKEILIGBG(builder, LBMKEILIGBG): builder.PrependInt32Slot(16, LBMKEILIGBG, 0)
def MGJAIDMKMCEAddNBDEBEPOLOB(builder, NBDEBEPOLOB): builder.PrependInt32Slot(17, NBDEBEPOLOB, 0)
def MGJAIDMKMCEAddNPIBNFGMMEK(builder, NPIBNFGMMEK): builder.PrependInt32Slot(18, NPIBNFGMMEK, 0)
def MGJAIDMKMCEAddHAMEBHALAEN(builder, HAMEBHALAEN): builder.PrependInt32Slot(19, HAMEBHALAEN, 0)
def MGJAIDMKMCEAddOEGNNNEFAAK(builder, OEGNNNEFAAK): builder.PrependInt32Slot(20, OEGNNNEFAAK, 0)
def MGJAIDMKMCEEnd(builder): return builder.EndObject()
