# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HHJALCFAKEC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHHJALCFAKEC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HHJALCFAKEC()
        x.Init(buf, n + offset)
        return x

    # HHJALCFAKEC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HHJALCFAKEC
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HHJALCFAKEC
    def PIDFEPBIHNE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OBEFECOGHGM import OBEFECOGHGM
            obj = OBEFECOGHGM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HHJALCFAKEC
    def PIDFEPBIHNELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HHJALCFAKEC
    def FKAGFJHPDBD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KPHKFKGKKNK import KPHKFKGKKNK
            obj = KPHKFKGKKNK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HHJALCFAKEC
    def FKAGFJHPDBDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HHJALCFAKECStart(builder): builder.StartObject(3)
def HHJALCFAKECAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependInt32Slot(0, MAIJBDCJPNJ, 0)
def HHJALCFAKECAddPIDFEPBIHNE(builder, PIDFEPBIHNE): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(PIDFEPBIHNE), 0)
def HHJALCFAKECStartPIDFEPBIHNEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HHJALCFAKECAddFKAGFJHPDBD(builder, FKAGFJHPDBD): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(FKAGFJHPDBD), 0)
def HHJALCFAKECStartFKAGFJHPDBDVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HHJALCFAKECEnd(builder): return builder.EndObject()
