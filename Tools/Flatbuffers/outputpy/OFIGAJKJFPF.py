# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OFIGAJKJFPF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOFIGAJKJFPF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OFIGAJKJFPF()
        x.Init(buf, n + offset)
        return x

    # OFIGAJKJFPF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OFIGAJKJFPF
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # OFIGAJKJFPF
    def HAOBOBNDAPL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # OFIGAJKJFPF
    def HBOJKLFJGND(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def AEHGIANDFOD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def FEFAFHIGNMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def FJIECABELGK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def NMGIFIOPMIJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def NFPKGHADCCP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def PJCPCILBICH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def AJHANMOKKDF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def PBAJJGLCCDO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def MPMOLHBIKKG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def ENECIEOGIJC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OFIGAJKJFPF
    def IMCFOKIBEMC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OFIGAJKJFPFStart(builder): builder.StartObject(17)
def OFIGAJKJFPFAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def OFIGAJKJFPFAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def OFIGAJKJFPFAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def OFIGAJKJFPFAddHAOBOBNDAPL(builder, HAOBOBNDAPL): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(HAOBOBNDAPL), 0)
def OFIGAJKJFPFAddHBOJKLFJGND(builder, HBOJKLFJGND): builder.PrependInt32Slot(4, HBOJKLFJGND, 0)
def OFIGAJKJFPFAddAEHGIANDFOD(builder, AEHGIANDFOD): builder.PrependInt32Slot(5, AEHGIANDFOD, 0)
def OFIGAJKJFPFAddFEFAFHIGNMA(builder, FEFAFHIGNMA): builder.PrependInt32Slot(6, FEFAFHIGNMA, 0)
def OFIGAJKJFPFAddFJIECABELGK(builder, FJIECABELGK): builder.PrependInt32Slot(7, FJIECABELGK, 0)
def OFIGAJKJFPFAddNMGIFIOPMIJ(builder, NMGIFIOPMIJ): builder.PrependInt32Slot(8, NMGIFIOPMIJ, 0)
def OFIGAJKJFPFAddNFPKGHADCCP(builder, NFPKGHADCCP): builder.PrependInt32Slot(9, NFPKGHADCCP, 0)
def OFIGAJKJFPFAddPJCPCILBICH(builder, PJCPCILBICH): builder.PrependInt32Slot(10, PJCPCILBICH, 0)
def OFIGAJKJFPFAddAJHANMOKKDF(builder, AJHANMOKKDF): builder.PrependInt32Slot(11, AJHANMOKKDF, 0)
def OFIGAJKJFPFAddPBAJJGLCCDO(builder, PBAJJGLCCDO): builder.PrependInt32Slot(12, PBAJJGLCCDO, 0)
def OFIGAJKJFPFAddMPMOLHBIKKG(builder, MPMOLHBIKKG): builder.PrependInt32Slot(13, MPMOLHBIKKG, 0)
def OFIGAJKJFPFAddENECIEOGIJC(builder, ENECIEOGIJC): builder.PrependInt32Slot(14, ENECIEOGIJC, 0)
def OFIGAJKJFPFAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependInt32Slot(15, MBBJMJAAODG, 0)
def OFIGAJKJFPFAddIMCFOKIBEMC(builder, IMCFOKIBEMC): builder.PrependInt32Slot(16, IMCFOKIBEMC, 0)
def OFIGAJKJFPFEnd(builder): return builder.EndObject()
