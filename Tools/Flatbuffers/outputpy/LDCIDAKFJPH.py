# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LDCIDAKFJPH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLDCIDAKFJPH(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LDCIDAKFJPH()
        x.Init(buf, n + offset)
        return x

    # LDCIDAKFJPH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LDCIDAKFJPH
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .GDOALKDMNGG import GDOALKDMNGG
            obj = GDOALKDMNGG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def PDIOIJHGJHG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PHJEGIBPDAG import PHJEGIBPDAG
            obj = PHJEGIBPDAG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def PDIOIJHGJHGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LDCIDAKFJPH
    def HHBHEKNMBHF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OPEBPLACKMA import OPEBPLACKMA
            obj = OPEBPLACKMA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def HHBHEKNMBHFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LDCIDAKFJPH
    def ABLEGKPGGIE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KLOLAGHEOOM import KLOLAGHEOOM
            obj = KLOLAGHEOOM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def ABLEGKPGGIELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LDCIDAKFJPH
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DJCKPLICDIP import DJCKPLICDIP
            obj = DJCKPLICDIP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LDCIDAKFJPH
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IFMBFGKPIBG import IFMBFGKPIBG
            obj = IFMBFGKPIBG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDCIDAKFJPH
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def LDCIDAKFJPHStart(builder): builder.StartObject(6)
def LDCIDAKFJPHAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def LDCIDAKFJPHAddPDIOIJHGJHG(builder, PDIOIJHGJHG): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(PDIOIJHGJHG), 0)
def LDCIDAKFJPHStartPDIOIJHGJHGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDCIDAKFJPHAddHHBHEKNMBHF(builder, HHBHEKNMBHF): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(HHBHEKNMBHF), 0)
def LDCIDAKFJPHStartHHBHEKNMBHFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDCIDAKFJPHAddABLEGKPGGIE(builder, ABLEGKPGGIE): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ABLEGKPGGIE), 0)
def LDCIDAKFJPHStartABLEGKPGGIEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDCIDAKFJPHAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def LDCIDAKFJPHStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDCIDAKFJPHAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def LDCIDAKFJPHStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDCIDAKFJPHEnd(builder): return builder.EndObject()
