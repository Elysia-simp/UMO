# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DMMAPNIMIIK(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDMMAPNIMIIK(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DMMAPNIMIIK()
        x.Init(buf, n + offset)
        return x

    # DMMAPNIMIIK
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DMMAPNIMIIK
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def LDMLHPCNAPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def LGEDAJAFHGG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def LMLNKHMPOIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def PIFAMBCEMKL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMMAPNIMIIK
    def KPAGDPKMDOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DMMAPNIMIIK
    def FGONCIDNPDP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def GCJPCPFKIEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def NEFKMGMJAOK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def FIDHINJIOAD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def HOENDPOGFIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def ECFLMBOLCAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def MBBJMJAAODG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def COEFBEEOPHH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DMMAPNIMIIK
    def EGCKDOIIACL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def DMMAPNIMIIKStart(builder): builder.StartObject(17)
def DMMAPNIMIIKAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def DMMAPNIMIIKAddLDMLHPCNAPI(builder, LDMLHPCNAPI): builder.PrependInt32Slot(1, LDMLHPCNAPI, 0)
def DMMAPNIMIIKAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(2, CFLMCGOJJJD, 0)
def DMMAPNIMIIKAddLGEDAJAFHGG(builder, LGEDAJAFHGG): builder.PrependInt32Slot(3, LGEDAJAFHGG, 0)
def DMMAPNIMIIKAddLMLNKHMPOIG(builder, LMLNKHMPOIG): builder.PrependInt32Slot(4, LMLNKHMPOIG, 0)
def DMMAPNIMIIKAddPIFAMBCEMKL(builder, PIFAMBCEMKL): builder.PrependInt32Slot(5, PIFAMBCEMKL, 0)
def DMMAPNIMIIKAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def DMMAPNIMIIKAddKPAGDPKMDOK(builder, KPAGDPKMDOK): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(KPAGDPKMDOK), 0)
def DMMAPNIMIIKAddFGONCIDNPDP(builder, FGONCIDNPDP): builder.PrependInt32Slot(8, FGONCIDNPDP, 0)
def DMMAPNIMIIKAddGCJPCPFKIEL(builder, GCJPCPFKIEL): builder.PrependInt32Slot(9, GCJPCPFKIEL, 0)
def DMMAPNIMIIKAddNEFKMGMJAOK(builder, NEFKMGMJAOK): builder.PrependInt32Slot(10, NEFKMGMJAOK, 0)
def DMMAPNIMIIKAddFIDHINJIOAD(builder, FIDHINJIOAD): builder.PrependInt32Slot(11, FIDHINJIOAD, 0)
def DMMAPNIMIIKAddHOENDPOGFIO(builder, HOENDPOGFIO): builder.PrependInt32Slot(12, HOENDPOGFIO, 0)
def DMMAPNIMIIKAddECFLMBOLCAA(builder, ECFLMBOLCAA): builder.PrependInt32Slot(13, ECFLMBOLCAA, 0)
def DMMAPNIMIIKAddMBBJMJAAODG(builder, MBBJMJAAODG): builder.PrependInt32Slot(14, MBBJMJAAODG, 0)
def DMMAPNIMIIKAddCOEFBEEOPHH(builder, COEFBEEOPHH): builder.PrependInt32Slot(15, COEFBEEOPHH, 0)
def DMMAPNIMIIKAddEGCKDOIIACL(builder, EGCKDOIIACL): builder.PrependInt32Slot(16, EGCKDOIIACL, 0)
def DMMAPNIMIIKEnd(builder): return builder.EndObject()
