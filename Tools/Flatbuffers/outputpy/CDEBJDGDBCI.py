# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CDEBJDGDBCI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCDEBJDGDBCI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CDEBJDGDBCI()
        x.Init(buf, n + offset)
        return x

    # CDEBJDGDBCI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CDEBJDGDBCI
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def KGJOEPEIDMO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def EKJOIJJOKGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def JMFEAOOLOEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def FOOEBKAHMCM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def ADBLMDKLCEA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CDEBJDGDBCI
    def EIAIGCOIECH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CDEBJDGDBCIStart(builder): builder.StartObject(7)
def CDEBJDGDBCIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def CDEBJDGDBCIAddKGJOEPEIDMO(builder, KGJOEPEIDMO): builder.PrependUint32Slot(1, KGJOEPEIDMO, 0)
def CDEBJDGDBCIAddEKJOIJJOKGE(builder, EKJOIJJOKGE): builder.PrependUint32Slot(2, EKJOIJJOKGE, 0)
def CDEBJDGDBCIAddJMFEAOOLOEG(builder, JMFEAOOLOEG): builder.PrependUint32Slot(3, JMFEAOOLOEG, 0)
def CDEBJDGDBCIAddFOOEBKAHMCM(builder, FOOEBKAHMCM): builder.PrependUint32Slot(4, FOOEBKAHMCM, 0)
def CDEBJDGDBCIAddADBLMDKLCEA(builder, ADBLMDKLCEA): builder.PrependUint32Slot(5, ADBLMDKLCEA, 0)
def CDEBJDGDBCIAddEIAIGCOIECH(builder, EIAIGCOIECH): builder.PrependUint32Slot(6, EIAIGCOIECH, 0)
def CDEBJDGDBCIEnd(builder): return builder.EndObject()
