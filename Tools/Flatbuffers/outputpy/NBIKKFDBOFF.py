# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NBIKKFDBOFF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNBIKKFDBOFF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NBIKKFDBOFF()
        x.Init(buf, n + offset)
        return x

    # NBIKKFDBOFF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NBIKKFDBOFF
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .GMNMPFMGIBP import GMNMPFMGIBP
            obj = GMNMPFMGIBP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PPANHLHGDLD import PPANHLHGDLD
            obj = PPANHLHGDLD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ODMKHCAIAAI import ODMKHCAIAAI
            obj = ODMKHCAIAAI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AMCNEEPKDOP import AMCNEEPKDOP
            obj = AMCNEEPKDOP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MLHMMHEPMJC import MLHMMHEPMJC
            obj = MLHMMHEPMJC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def JHDOILHEBOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FIPKKAHPFHG import FIPKKAHPFHG
            obj = FIPKKAHPFHG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def JHDOILHEBOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def NDFKGEGBOCE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .HKOLBHENPFE import HKOLBHENPFE
            obj = HKOLBHENPFE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def NDFKGEGBOCELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def NNACKFOABOK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JEOHKMOBFEM import JEOHKMOBFEM
            obj = JEOHKMOBFEM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def NNACKFOABOKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def PBGAHBOELGL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PEGCLNAOLBG import PEGCLNAOLBG
            obj = PEGCLNAOLBG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def PBGAHBOELGLLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def LLDECIJKIGF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NLMDFJFJBFA import NLMDFJFJBFA
            obj = NLMDFJFJBFA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def LLDECIJKIGFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def DFEAJAJHEBP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AHDFDKOLGIN import AHDFDKOLGIN
            obj = AHDFDKOLGIN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def DFEAJAJHEBPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def FIKNJBFFMGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CHCOHLNPLMJ import CHCOHLNPLMJ
            obj = CHCOHLNPLMJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def FIKNJBFFMGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CKMBIDDOCEP import CKMBIDDOCEP
            obj = CKMBIDDOCEP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GPLJGOGMCNP import GPLJGOGMCNP
            obj = GPLJGOGMCNP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NBIKKFDBOFF
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BDLNCCBHPAD import BDLNCCBHPAD
            obj = BDLNCCBHPAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NBIKKFDBOFF
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NBIKKFDBOFFStart(builder): builder.StartObject(15)
def NBIKKFDBOFFAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def NBIKKFDBOFFAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def NBIKKFDBOFFStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def NBIKKFDBOFFStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def NBIKKFDBOFFStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def NBIKKFDBOFFStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddJHDOILHEBOG(builder, JHDOILHEBOG): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(JHDOILHEBOG), 0)
def NBIKKFDBOFFStartJHDOILHEBOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddNDFKGEGBOCE(builder, NDFKGEGBOCE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NDFKGEGBOCE), 0)
def NBIKKFDBOFFStartNDFKGEGBOCEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddNNACKFOABOK(builder, NNACKFOABOK): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(NNACKFOABOK), 0)
def NBIKKFDBOFFStartNNACKFOABOKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddPBGAHBOELGL(builder, PBGAHBOELGL): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(PBGAHBOELGL), 0)
def NBIKKFDBOFFStartPBGAHBOELGLVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddLLDECIJKIGF(builder, LLDECIJKIGF): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(LLDECIJKIGF), 0)
def NBIKKFDBOFFStartLLDECIJKIGFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddDFEAJAJHEBP(builder, DFEAJAJHEBP): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(DFEAJAJHEBP), 0)
def NBIKKFDBOFFStartDFEAJAJHEBPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddFIKNJBFFMGG(builder, FIKNJBFFMGG): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(FIKNJBFFMGG), 0)
def NBIKKFDBOFFStartFIKNJBFFMGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def NBIKKFDBOFFStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def NBIKKFDBOFFStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def NBIKKFDBOFFStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NBIKKFDBOFFEnd(builder): return builder.EndObject()
