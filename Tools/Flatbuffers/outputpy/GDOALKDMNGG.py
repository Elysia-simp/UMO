# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class GDOALKDMNGG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGDOALKDMNGG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GDOALKDMNGG()
        x.Init(buf, n + offset)
        return x

    # GDOALKDMNGG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GDOALKDMNGG
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GDOALKDMNGG
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def HEMLBADKAOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GDOALKDMNGG
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def KPJEPCJKIJJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GDOALKDMNGG
    def BNOHOIBDHLP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def NNKLANONDOM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GDOALKDMNGG
    def LENBJLOPKLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def EMNAOOMCCGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # GDOALKDMNGG
    def ODMLFHELAJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def JOIACOFCFAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GDOALKDMNGG
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GDOALKDMNGG
    def MHPCFPIINFL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def JFNKDHPAEGD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GDOALKDMNGG
    def KIPKMBIKLDO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GDOALKDMNGGStart(builder): builder.StartObject(25)
def GDOALKDMNGGAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def GDOALKDMNGGAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(1, MAIJBDCJPNJ, 0)
def GDOALKDMNGGAddHEMLBADKAOA(builder, HEMLBADKAOA): builder.PrependUint32Slot(2, HEMLBADKAOA, 0)
def GDOALKDMNGGAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def GDOALKDMNGGAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def GDOALKDMNGGAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def GDOALKDMNGGAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(6, DJHKCHMBGHC, 0)
def GDOALKDMNGGAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(7, BCKOLCDDIAG, 0)
def GDOALKDMNGGAddKPJEPCJKIJJ(builder, KPJEPCJKIJJ): builder.PrependUint32Slot(8, KPJEPCJKIJJ, 0)
def GDOALKDMNGGAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(9, LKIBIHGHEMA, 0)
def GDOALKDMNGGAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(10, ANELKJCGJJL, 0)
def GDOALKDMNGGAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(11, AEOKLKJAKHB, 0)
def GDOALKDMNGGAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(12, OGBOPHDAMCI, 0)
def GDOALKDMNGGAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(13, HGFJBAJCFNF, 0)
def GDOALKDMNGGAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def GDOALKDMNGGAddBNOHOIBDHLP(builder, BNOHOIBDHLP): builder.PrependInt32Slot(15, BNOHOIBDHLP, 0)
def GDOALKDMNGGAddNNKLANONDOM(builder, NNKLANONDOM): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(NNKLANONDOM), 0)
def GDOALKDMNGGAddLENBJLOPKLE(builder, LENBJLOPKLE): builder.PrependUint32Slot(17, LENBJLOPKLE, 0)
def GDOALKDMNGGAddEMNAOOMCCGD(builder, EMNAOOMCCGD): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(EMNAOOMCCGD), 0)
def GDOALKDMNGGAddODMLFHELAJK(builder, ODMLFHELAJK): builder.PrependInt32Slot(19, ODMLFHELAJK, 0)
def GDOALKDMNGGAddJOIACOFCFAA(builder, JOIACOFCFAA): builder.PrependInt32Slot(20, JOIACOFCFAA, 0)
def GDOALKDMNGGAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def GDOALKDMNGGStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GDOALKDMNGGAddMHPCFPIINFL(builder, MHPCFPIINFL): builder.PrependInt32Slot(22, MHPCFPIINFL, 0)
def GDOALKDMNGGAddJFNKDHPAEGD(builder, JFNKDHPAEGD): builder.PrependUint32Slot(23, JFNKDHPAEGD, 0)
def GDOALKDMNGGAddKIPKMBIKLDO(builder, KIPKMBIKLDO): builder.PrependUint32Slot(24, KIPKMBIKLDO, 0)
def GDOALKDMNGGEnd(builder): return builder.EndObject()
