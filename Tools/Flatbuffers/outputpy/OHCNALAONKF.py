# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OHCNALAONKF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOHCNALAONKF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OHCNALAONKF()
        x.Init(buf, n + offset)
        return x

    # OHCNALAONKF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OHCNALAONKF
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OHCNALAONKF
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OHCNALAONKF
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OHCNALAONKF
    def OFELCGCIOFJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OHCNALAONKF
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OHCNALAONKF
    def DAIPOIOKCAA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OHCNALAONKF
    def DAIPOIOKCAALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def OHCNALAONKFStart(builder): builder.StartObject(6)
def OHCNALAONKFAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def OHCNALAONKFAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(1, CFLMCGOJJJD, 0)
def OHCNALAONKFAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(2, OFMGALJGDAO, 0)
def OHCNALAONKFAddOFELCGCIOFJ(builder, OFELCGCIOFJ): builder.PrependInt32Slot(3, OFELCGCIOFJ, 0)
def OHCNALAONKFAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependInt32Slot(4, KJFEBMBHKOC, 0)
def OHCNALAONKFAddDAIPOIOKCAA(builder, DAIPOIOKCAA): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(DAIPOIOKCAA), 0)
def OHCNALAONKFStartDAIPOIOKCAAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OHCNALAONKFEnd(builder): return builder.EndObject()
