# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CLPHCGNHCGC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCLPHCGNHCGC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CLPHCGNHCGC()
        x.Init(buf, n + offset)
        return x

    # CLPHCGNHCGC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CLPHCGNHCGC
    def IIDCFMHCPLJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # CLPHCGNHCGC
    def HAEJDOGGKPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # CLPHCGNHCGC
    def MAIJBDCJPNJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def MKDFHLALNAF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # CLPHCGNHCGC
    def MCHOEAGDGJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def LLJNABNBDMN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def DJHKCHMBGHC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def BCKOLCDDIAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def LKIBIHGHEMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def ANELKJCGJJL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def AEOKLKJAKHB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def OGBOPHDAMCI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def HGFJBAJCFNF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CLPHCGNHCGC
    def HAEMDABJFJF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # CLPHCGNHCGC
    def CLEFGBLBDGJ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CLPHCGNHCGC
    def CLEFGBLBDGJLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CLPHCGNHCGCStart(builder): builder.StartObject(15)
def CLPHCGNHCGCAddIIDCFMHCPLJ(builder, IIDCFMHCPLJ): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IIDCFMHCPLJ), 0)
def CLPHCGNHCGCAddHAEJDOGGKPC(builder, HAEJDOGGKPC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(HAEJDOGGKPC), 0)
def CLPHCGNHCGCAddMAIJBDCJPNJ(builder, MAIJBDCJPNJ): builder.PrependUint32Slot(2, MAIJBDCJPNJ, 0)
def CLPHCGNHCGCAddMKDFHLALNAF(builder, MKDFHLALNAF): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MKDFHLALNAF), 0)
def CLPHCGNHCGCAddMCHOEAGDGJP(builder, MCHOEAGDGJP): builder.PrependUint32Slot(4, MCHOEAGDGJP, 0)
def CLPHCGNHCGCAddLLJNABNBDMN(builder, LLJNABNBDMN): builder.PrependUint32Slot(5, LLJNABNBDMN, 0)
def CLPHCGNHCGCAddDJHKCHMBGHC(builder, DJHKCHMBGHC): builder.PrependUint32Slot(6, DJHKCHMBGHC, 0)
def CLPHCGNHCGCAddBCKOLCDDIAG(builder, BCKOLCDDIAG): builder.PrependUint32Slot(7, BCKOLCDDIAG, 0)
def CLPHCGNHCGCAddLKIBIHGHEMA(builder, LKIBIHGHEMA): builder.PrependUint32Slot(8, LKIBIHGHEMA, 0)
def CLPHCGNHCGCAddANELKJCGJJL(builder, ANELKJCGJJL): builder.PrependUint32Slot(9, ANELKJCGJJL, 0)
def CLPHCGNHCGCAddAEOKLKJAKHB(builder, AEOKLKJAKHB): builder.PrependUint32Slot(10, AEOKLKJAKHB, 0)
def CLPHCGNHCGCAddOGBOPHDAMCI(builder, OGBOPHDAMCI): builder.PrependUint32Slot(11, OGBOPHDAMCI, 0)
def CLPHCGNHCGCAddHGFJBAJCFNF(builder, HGFJBAJCFNF): builder.PrependUint32Slot(12, HGFJBAJCFNF, 0)
def CLPHCGNHCGCAddHAEMDABJFJF(builder, HAEMDABJFJF): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(HAEMDABJFJF), 0)
def CLPHCGNHCGCAddCLEFGBLBDGJ(builder, CLEFGBLBDGJ): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(CLEFGBLBDGJ), 0)
def CLPHCGNHCGCStartCLEFGBLBDGJVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CLPHCGNHCGCEnd(builder): return builder.EndObject()
