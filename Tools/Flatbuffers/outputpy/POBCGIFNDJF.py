# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class POBCGIFNDJF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPOBCGIFNDJF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = POBCGIFNDJF()
        x.Init(buf, n + offset)
        return x

    # POBCGIFNDJF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # POBCGIFNDJF
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # POBCGIFNDJF
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # POBCGIFNDJF
    def GLIIHLOLPEF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # POBCGIFNDJF
    def BNDAHALMIPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # POBCGIFNDJF
    def CNNEAFFOPAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # POBCGIFNDJF
    def ONBMIJLCFBD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # POBCGIFNDJF
    def NNNCOKLKPIH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def POBCGIFNDJFStart(builder): builder.StartObject(7)
def POBCGIFNDJFAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def POBCGIFNDJFAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(1, CFLMCGOJJJD, 0)
def POBCGIFNDJFAddGLIIHLOLPEF(builder, GLIIHLOLPEF): builder.PrependInt32Slot(2, GLIIHLOLPEF, 0)
def POBCGIFNDJFAddBNDAHALMIPE(builder, BNDAHALMIPE): builder.PrependInt32Slot(3, BNDAHALMIPE, 0)
def POBCGIFNDJFAddCNNEAFFOPAO(builder, CNNEAFFOPAO): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CNNEAFFOPAO), 0)
def POBCGIFNDJFAddONBMIJLCFBD(builder, ONBMIJLCFBD): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ONBMIJLCFBD), 0)
def POBCGIFNDJFAddNNNCOKLKPIH(builder, NNNCOKLKPIH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NNNCOKLKPIH), 0)
def POBCGIFNDJFEnd(builder): return builder.EndObject()
