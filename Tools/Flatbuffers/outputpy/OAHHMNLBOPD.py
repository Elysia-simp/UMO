# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class OAHHMNLBOPD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOAHHMNLBOPD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OAHHMNLBOPD()
        x.Init(buf, n + offset)
        return x

    # OAHHMNLBOPD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OAHHMNLBOPD
    def FANPJEPOAFK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OAHHMNLBOPD
    def PENNDFJDJMP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OAHHMNLBOPD
    def CNOIMMHCCIH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OAHHMNLBOPD
    def IDHMEJECPBO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OAHHMNLBOPDStart(builder): builder.StartObject(4)
def OAHHMNLBOPDAddFANPJEPOAFK(builder, FANPJEPOAFK): builder.PrependInt32Slot(0, FANPJEPOAFK, 0)
def OAHHMNLBOPDAddPENNDFJDJMP(builder, PENNDFJDJMP): builder.PrependInt32Slot(1, PENNDFJDJMP, 0)
def OAHHMNLBOPDAddCNOIMMHCCIH(builder, CNOIMMHCCIH): builder.PrependInt32Slot(2, CNOIMMHCCIH, 0)
def OAHHMNLBOPDAddIDHMEJECPBO(builder, IDHMEJECPBO): builder.PrependInt32Slot(3, IDHMEJECPBO, 0)
def OAHHMNLBOPDEnd(builder): return builder.EndObject()
