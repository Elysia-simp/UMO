# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BPAPHMKFBEF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBPAPHMKFBEF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BPAPHMKFBEF()
        x.Init(buf, n + offset)
        return x

    # BPAPHMKFBEF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BPAPHMKFBEF
    def BMBEAHIAGBH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # BPAPHMKFBEF
    def AGOIMGHMGOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def BPAPHMKFBEFStart(builder): builder.StartObject(2)
def BPAPHMKFBEFAddBMBEAHIAGBH(builder, BMBEAHIAGBH): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(BMBEAHIAGBH), 0)
def BPAPHMKFBEFAddAGOIMGHMGOH(builder, AGOIMGHMGOH): builder.PrependUint32Slot(1, AGOIMGHMGOH, 0)
def BPAPHMKFBEFEnd(builder): return builder.EndObject()
