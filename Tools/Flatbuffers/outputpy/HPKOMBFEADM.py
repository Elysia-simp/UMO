# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HPKOMBFEADM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHPKOMBFEADM(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HPKOMBFEADM()
        x.Init(buf, n + offset)
        return x

    # HPKOMBFEADM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HPKOMBFEADM
    def NOKJIDGJCAB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GAJADNFKMEE import GAJADNFKMEE
            obj = GAJADNFKMEE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def NOKJIDGJCABLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def OMLNOBDNJMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .APGAHFFLAPA import APGAHFFLAPA
            obj = APGAHFFLAPA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def OMLNOBDNJMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def IPNICBONNJE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JLDCIOBACAL import JLDCIOBACAL
            obj = JLDCIOBACAL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def IPNICBONNJELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def CADCONAACMA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EMCHOIHFOHN import EMCHOIHFOHN
            obj = EMCHOIHFOHN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def CADCONAACMALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def IPKCKIGAGBB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IMGPAFDIMKP import IMGPAFDIMKP
            obj = IMGPAFDIMKP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def IPKCKIGAGBBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def FGPFMCLGMAL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GMCDKDCBFFK import GMCDKDCBFFK
            obj = GMCDKDCBFFK()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def FGPFMCLGMALLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def LCHKOHKKMPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PKAMNOECHOM import PKAMNOECHOM
            obj = PKAMNOECHOM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def LCHKOHKKMPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def IIPLKGBCJMF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OENLOOBJABF import OENLOOBJABF
            obj = OENLOOBJABF()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def IIPLKGBCJMFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def KCPALOBNNJI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DLDBCENIBOB import DLDBCENIBOB
            obj = DLDBCENIBOB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def KCPALOBNNJILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def FOONGLJEAEG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GMAHGBPDAPH import GMAHGBPDAPH
            obj = GMAHGBPDAPH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def FOONGLJEAEGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def DFDGMAIMKMK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CCLAFODHKHA import CCLAFODHKHA
            obj = CCLAFODHKHA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def DFDGMAIMKMKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def LPKLLIOACNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KJLKDFAJFHC import KJLKDFAJFHC
            obj = KJLKDFAJFHC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def LPKLLIOACNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def HCLJANFGCFH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LCFOJIDKGIN import LCFOJIDKGIN
            obj = LCFOJIDKGIN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def HCLJANFGCFHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def LGCEAMIIMJK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AMFPOBCCLMN import AMFPOBCCLMN
            obj = AMFPOBCCLMN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def LGCEAMIIMJKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def PAFOHOKPIGH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IPIBGJJPKLO import IPIBGJJPKLO
            obj = IPIBGJJPKLO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def PAFOHOKPIGHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .BANGFGHKPNP import BANGFGHKPNP
            obj = BANGFGHKPNP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JEMGNNMPIAD import JEMGNNMPIAD
            obj = JEMGNNMPIAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def PMKJKCPFLEL(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KMMGHIGKELN import KMMGHIGKELN
            obj = KMMGHIGKELN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def PMKJKCPFLELLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def KFLDFHANEKK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OLKBCLJBFAA import OLKBCLJBFAA
            obj = OLKBCLJBFAA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def KFLDFHANEKKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def AOONDLEGAAA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GAJBGNNNHCP import GAJBGNNNHCP
            obj = GAJBGNNNHCP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def AOONDLEGAAALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HPKOMBFEADM
    def BEINKIKDHCO(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JIIFKJGKCNM import JIIFKJGKCNM
            obj = JIIFKJGKCNM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HPKOMBFEADM
    def BEINKIKDHCOLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HPKOMBFEADMStart(builder): builder.StartObject(21)
def HPKOMBFEADMAddNOKJIDGJCAB(builder, NOKJIDGJCAB): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NOKJIDGJCAB), 0)
def HPKOMBFEADMStartNOKJIDGJCABVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddOMLNOBDNJMH(builder, OMLNOBDNJMH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(OMLNOBDNJMH), 0)
def HPKOMBFEADMStartOMLNOBDNJMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddIPNICBONNJE(builder, IPNICBONNJE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IPNICBONNJE), 0)
def HPKOMBFEADMStartIPNICBONNJEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddCADCONAACMA(builder, CADCONAACMA): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CADCONAACMA), 0)
def HPKOMBFEADMStartCADCONAACMAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddIPKCKIGAGBB(builder, IPKCKIGAGBB): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IPKCKIGAGBB), 0)
def HPKOMBFEADMStartIPKCKIGAGBBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddFGPFMCLGMAL(builder, FGPFMCLGMAL): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(FGPFMCLGMAL), 0)
def HPKOMBFEADMStartFGPFMCLGMALVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddLCHKOHKKMPH(builder, LCHKOHKKMPH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LCHKOHKKMPH), 0)
def HPKOMBFEADMStartLCHKOHKKMPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddIIPLKGBCJMF(builder, IIPLKGBCJMF): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(IIPLKGBCJMF), 0)
def HPKOMBFEADMStartIIPLKGBCJMFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddKCPALOBNNJI(builder, KCPALOBNNJI): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(KCPALOBNNJI), 0)
def HPKOMBFEADMStartKCPALOBNNJIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddFOONGLJEAEG(builder, FOONGLJEAEG): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(FOONGLJEAEG), 0)
def HPKOMBFEADMStartFOONGLJEAEGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddDFDGMAIMKMK(builder, DFDGMAIMKMK): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(DFDGMAIMKMK), 0)
def HPKOMBFEADMStartDFDGMAIMKMKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddLPKLLIOACNF(builder, LPKLLIOACNF): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(LPKLLIOACNF), 0)
def HPKOMBFEADMStartLPKLLIOACNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddHCLJANFGCFH(builder, HCLJANFGCFH): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(HCLJANFGCFH), 0)
def HPKOMBFEADMStartHCLJANFGCFHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddLGCEAMIIMJK(builder, LGCEAMIIMJK): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(LGCEAMIIMJK), 0)
def HPKOMBFEADMStartLGCEAMIIMJKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddPAFOHOKPIGH(builder, PAFOHOKPIGH): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(PAFOHOKPIGH), 0)
def HPKOMBFEADMStartPAFOHOKPIGHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def HPKOMBFEADMStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def HPKOMBFEADMStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddPMKJKCPFLEL(builder, PMKJKCPFLEL): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(PMKJKCPFLEL), 0)
def HPKOMBFEADMStartPMKJKCPFLELVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddKFLDFHANEKK(builder, KFLDFHANEKK): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(KFLDFHANEKK), 0)
def HPKOMBFEADMStartKFLDFHANEKKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddAOONDLEGAAA(builder, AOONDLEGAAA): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(AOONDLEGAAA), 0)
def HPKOMBFEADMStartAOONDLEGAAAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMAddBEINKIKDHCO(builder, BEINKIKDHCO): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(BEINKIKDHCO), 0)
def HPKOMBFEADMStartBEINKIKDHCOVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HPKOMBFEADMEnd(builder): return builder.EndObject()
