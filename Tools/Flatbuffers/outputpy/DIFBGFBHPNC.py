# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DIFBGFBHPNC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDIFBGFBHPNC(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DIFBGFBHPNC()
        x.Init(buf, n + offset)
        return x

    # DIFBGFBHPNC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DIFBGFBHPNC
    def DCEDMFDNAKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DIFBGFBHPNC
    def FKGLOPMFMCP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DIFBGFBHPNC
    def IAPOHBCMPPB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DIFBGFBHPNCStart(builder): builder.StartObject(3)
def DIFBGFBHPNCAddDCEDMFDNAKH(builder, DCEDMFDNAKH): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DCEDMFDNAKH), 0)
def DIFBGFBHPNCAddFKGLOPMFMCP(builder, FKGLOPMFMCP): builder.PrependUint32Slot(1, FKGLOPMFMCP, 0)
def DIFBGFBHPNCAddIAPOHBCMPPB(builder, IAPOHBCMPPB): builder.PrependUint32Slot(2, IAPOHBCMPPB, 0)
def DIFBGFBHPNCEnd(builder): return builder.EndObject()
