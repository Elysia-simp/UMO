# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MMLADLKNMEL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMMLADLKNMEL(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MMLADLKNMEL()
        x.Init(buf, n + offset)
        return x

    # MMLADLKNMEL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MMLADLKNMEL
    def OPBPOOKODJK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PPAELFNIFMJ import PPAELFNIFMJ
            obj = PPAELFNIFMJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def KJFDCEGGPPH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .EMBHNHBBIEE import EMBHNHBBIEE
            obj = EMBHNHBBIEE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def KJFDCEGGPPHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def AJMKEFMPKHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KIJJEOFMFDL import KIJJEOFMFDL
            obj = KIJJEOFMFDL()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def AJMKEFMPKHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def OIJINAJFMCB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JIDBNKEHLEN import JIDBNKEHLEN
            obj = JIDBNKEHLEN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def OIJINAJFMCBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def FIKNJBFFMGG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CDEBJDGDBCI import CDEBJDGDBCI
            obj = CDEBJDGDBCI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def FIKNJBFFMGGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def FCEJEOGMFNN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KEOGNGPEGMH import KEOGNGPEGMH
            obj = KEOGNGPEGMH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def FCEJEOGMFNNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def LADBGAPHEHB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GANHIMHLHLJ import GANHIMHLHLJ
            obj = GANHIMHLHLJ()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def LADBGAPHEHBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def LFKGJNLPMAE(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .JHOLPEOPHGG import JHOLPEOPHGG
            obj = JHOLPEOPHGG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def LFKGJNLPMAELength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def NJJINHMIOHN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .GBKFBHBJBDH import GBKFBHBJBDH
            obj = GBKFBHBJBDH()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def NJJINHMIOHNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def NPFBHGKLIOM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LGOJMLICAHI import LGOJMLICAHI
            obj = LGOJMLICAHI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def NPFBHGKLIOMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def FBAHAFKCMMH(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PGENPGDDLGA import PGENPGDDLGA
            obj = PGENPGDDLGA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def FBAHAFKCMMHLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def GGKDJGGAFKA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ANABNLMBIEB import ANABNLMBIEB
            obj = ANABNLMBIEB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def GGKDJGGAFKALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def JHDOILHEBOG(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .OJHENJDBLNC import OJHENJDBLNC
            obj = OJHENJDBLNC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def JHDOILHEBOGLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def HDNMEPFHLNF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DCKKAECHDNC import DCKKAECHDNC
            obj = DCKKAECHDNC()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def HDNMEPFHLNFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def OLLJCDPOAAI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MAKNLEOLNKN import MAKNLEOLNKN
            obj = MAKNLEOLNKN()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def OLLJCDPOAAILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMLADLKNMEL
    def BHNBMLKMLGN(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NGDDDOFKPFI import NGDDDOFKPFI
            obj = NGDDDOFKPFI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMLADLKNMEL
    def BHNBMLKMLGNLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MMLADLKNMELStart(builder): builder.StartObject(16)
def MMLADLKNMELAddOPBPOOKODJK(builder, OPBPOOKODJK): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(OPBPOOKODJK), 0)
def MMLADLKNMELAddKJFDCEGGPPH(builder, KJFDCEGGPPH): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KJFDCEGGPPH), 0)
def MMLADLKNMELStartKJFDCEGGPPHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddAJMKEFMPKHB(builder, AJMKEFMPKHB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(AJMKEFMPKHB), 0)
def MMLADLKNMELStartAJMKEFMPKHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddOIJINAJFMCB(builder, OIJINAJFMCB): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OIJINAJFMCB), 0)
def MMLADLKNMELStartOIJINAJFMCBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddFIKNJBFFMGG(builder, FIKNJBFFMGG): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(FIKNJBFFMGG), 0)
def MMLADLKNMELStartFIKNJBFFMGGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddFCEJEOGMFNN(builder, FCEJEOGMFNN): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(FCEJEOGMFNN), 0)
def MMLADLKNMELStartFCEJEOGMFNNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddLADBGAPHEHB(builder, LADBGAPHEHB): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LADBGAPHEHB), 0)
def MMLADLKNMELStartLADBGAPHEHBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddLFKGJNLPMAE(builder, LFKGJNLPMAE): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(LFKGJNLPMAE), 0)
def MMLADLKNMELStartLFKGJNLPMAEVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddNJJINHMIOHN(builder, NJJINHMIOHN): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NJJINHMIOHN), 0)
def MMLADLKNMELStartNJJINHMIOHNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddNPFBHGKLIOM(builder, NPFBHGKLIOM): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(NPFBHGKLIOM), 0)
def MMLADLKNMELStartNPFBHGKLIOMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddFBAHAFKCMMH(builder, FBAHAFKCMMH): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(FBAHAFKCMMH), 0)
def MMLADLKNMELStartFBAHAFKCMMHVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddGGKDJGGAFKA(builder, GGKDJGGAFKA): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(GGKDJGGAFKA), 0)
def MMLADLKNMELStartGGKDJGGAFKAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddJHDOILHEBOG(builder, JHDOILHEBOG): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(JHDOILHEBOG), 0)
def MMLADLKNMELStartJHDOILHEBOGVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddHDNMEPFHLNF(builder, HDNMEPFHLNF): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(HDNMEPFHLNF), 0)
def MMLADLKNMELStartHDNMEPFHLNFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddOLLJCDPOAAI(builder, OLLJCDPOAAI): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(OLLJCDPOAAI), 0)
def MMLADLKNMELStartOLLJCDPOAAIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELAddBHNBMLKMLGN(builder, BHNBMLKMLGN): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(BHNBMLKMLGN), 0)
def MMLADLKNMELStartBHNBMLKMLGNVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MMLADLKNMELEnd(builder): return builder.EndObject()
