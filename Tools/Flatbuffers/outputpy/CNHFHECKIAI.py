# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CNHFHECKIAI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCNHFHECKIAI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CNHFHECKIAI()
        x.Init(buf, n + offset)
        return x

    # CNHFHECKIAI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CNHFHECKIAI
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def CLGHAEBNGCF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def KJFEBMBHKOC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def GODHIHAHFAH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def KJOOLCKNGMM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CNHFHECKIAI
    def ODBPKGJPLMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CNHFHECKIAIStart(builder): builder.StartObject(9)
def CNHFHECKIAIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependUint32Slot(0, BBPHAPFBFHK, 0)
def CNHFHECKIAIAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependUint32Slot(1, LPJPOOHJKAE, 0)
def CNHFHECKIAIAddCLGHAEBNGCF(builder, CLGHAEBNGCF): builder.PrependUint32Slot(2, CLGHAEBNGCF, 0)
def CNHFHECKIAIAddKJFEBMBHKOC(builder, KJFEBMBHKOC): builder.PrependUint32Slot(3, KJFEBMBHKOC, 0)
def CNHFHECKIAIAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependUint32Slot(4, CFLMCGOJJJD, 0)
def CNHFHECKIAIAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(5, OFMGALJGDAO, 0)
def CNHFHECKIAIAddGODHIHAHFAH(builder, GODHIHAHFAH): builder.PrependUint32Slot(6, GODHIHAHFAH, 0)
def CNHFHECKIAIAddKJOOLCKNGMM(builder, KJOOLCKNGMM): builder.PrependUint32Slot(7, KJOOLCKNGMM, 0)
def CNHFHECKIAIAddODBPKGJPLMD(builder, ODBPKGJPLMD): builder.PrependUint32Slot(8, ODBPKGJPLMD, 0)
def CNHFHECKIAIEnd(builder): return builder.EndObject()
