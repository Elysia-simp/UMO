# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LDOCPAKMACI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLDOCPAKMACI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LDOCPAKMACI()
        x.Init(buf, n + offset)
        return x

    # LDOCPAKMACI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LDOCPAKMACI
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LDOCPAKMACI
    def IIBAJDOLFBM(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LJONABMKIOM import LJONABMKIOM
            obj = LJONABMKIOM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LDOCPAKMACI
    def IIBAJDOLFBMLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LDOCPAKMACI
    def GELNDPJNLJM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LDOCPAKMACI
    def IAHNDJDBCAJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def LDOCPAKMACIStart(builder): builder.StartObject(4)
def LDOCPAKMACIAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def LDOCPAKMACIAddIIBAJDOLFBM(builder, IIBAJDOLFBM): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(IIBAJDOLFBM), 0)
def LDOCPAKMACIStartIIBAJDOLFBMVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LDOCPAKMACIAddGELNDPJNLJM(builder, GELNDPJNLJM): builder.PrependInt32Slot(2, GELNDPJNLJM, 0)
def LDOCPAKMACIAddIAHNDJDBCAJ(builder, IAHNDJDBCAJ): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IAHNDJDBCAJ), 0)
def LDOCPAKMACIEnd(builder): return builder.EndObject()
