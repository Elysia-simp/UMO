# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class JOGLEFDCEJI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJOGLEFDCEJI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JOGLEFDCEJI()
        x.Init(buf, n + offset)
        return x

    # JOGLEFDCEJI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JOGLEFDCEJI
    def CKMMECCALPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def OFMGALJGDAO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def CFLMCGOJJJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def CLGDAMPNKAA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # JOGLEFDCEJI
    def LPJPOOHJKAE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def NCADHENBLDB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def CLGHAEBNGCF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def KCCGHBAOJEN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def HAHMOLPJPCG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def NJLJEKDBPCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def MAOAGDBDBIB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def JAOFIDGEIGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # JOGLEFDCEJI
    def BPMBFFDNMDD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def JOGLEFDCEJIStart(builder): builder.StartObject(13)
def JOGLEFDCEJIAddCKMMECCALPI(builder, CKMMECCALPI): builder.PrependInt32Slot(0, CKMMECCALPI, 0)
def JOGLEFDCEJIAddOFMGALJGDAO(builder, OFMGALJGDAO): builder.PrependInt32Slot(1, OFMGALJGDAO, 0)
def JOGLEFDCEJIAddCFLMCGOJJJD(builder, CFLMCGOJJJD): builder.PrependInt32Slot(2, CFLMCGOJJJD, 0)
def JOGLEFDCEJIAddCLGDAMPNKAA(builder, CLGDAMPNKAA): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CLGDAMPNKAA), 0)
def JOGLEFDCEJIAddLPJPOOHJKAE(builder, LPJPOOHJKAE): builder.PrependInt32Slot(4, LPJPOOHJKAE, 0)
def JOGLEFDCEJIAddNCADHENBLDB(builder, NCADHENBLDB): builder.PrependInt32Slot(5, NCADHENBLDB, 0)
def JOGLEFDCEJIAddCLGHAEBNGCF(builder, CLGHAEBNGCF): builder.PrependInt32Slot(6, CLGHAEBNGCF, 0)
def JOGLEFDCEJIAddKCCGHBAOJEN(builder, KCCGHBAOJEN): builder.PrependInt32Slot(7, KCCGHBAOJEN, 0)
def JOGLEFDCEJIAddHAHMOLPJPCG(builder, HAHMOLPJPCG): builder.PrependInt32Slot(8, HAHMOLPJPCG, 0)
def JOGLEFDCEJIAddNJLJEKDBPCH(builder, NJLJEKDBPCH): builder.PrependInt32Slot(9, NJLJEKDBPCH, 0)
def JOGLEFDCEJIAddMAOAGDBDBIB(builder, MAOAGDBDBIB): builder.PrependInt32Slot(10, MAOAGDBDBIB, 0)
def JOGLEFDCEJIAddJAOFIDGEIGE(builder, JAOFIDGEIGE): builder.PrependInt32Slot(11, JAOFIDGEIGE, 0)
def JOGLEFDCEJIAddBPMBFFDNMDD(builder, BPMBFFDNMDD): builder.PrependInt32Slot(12, BPMBFFDNMDD, 0)
def JOGLEFDCEJIEnd(builder): return builder.EndObject()
