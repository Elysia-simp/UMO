# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BKIKCJIAIIO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBKIKCJIAIIO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BKIKCJIAIIO()
        x.Init(buf, n + offset)
        return x

    # BKIKCJIAIIO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BKIKCJIAIIO
    def BBPHAPFBFHK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BKIKCJIAIIO
    def FNMKCLELMHN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BKIKCJIAIIO
    def ENFMOLLLMCK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BKIKCJIAIIO
    def KBPIOBMFPDN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BKIKCJIAIIO
    def NCIKNCJLFBI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BKIKCJIAIIO
    def CHGIONDFIKP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BKIKCJIAIIO
    def CHGIONDFIKPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def BKIKCJIAIIOStart(builder): builder.StartObject(6)
def BKIKCJIAIIOAddBBPHAPFBFHK(builder, BBPHAPFBFHK): builder.PrependInt32Slot(0, BBPHAPFBFHK, 0)
def BKIKCJIAIIOAddFNMKCLELMHN(builder, FNMKCLELMHN): builder.PrependInt32Slot(1, FNMKCLELMHN, 0)
def BKIKCJIAIIOAddENFMOLLLMCK(builder, ENFMOLLLMCK): builder.PrependInt32Slot(2, ENFMOLLLMCK, 0)
def BKIKCJIAIIOAddKBPIOBMFPDN(builder, KBPIOBMFPDN): builder.PrependInt32Slot(3, KBPIOBMFPDN, 0)
def BKIKCJIAIIOAddNCIKNCJLFBI(builder, NCIKNCJLFBI): builder.PrependInt32Slot(4, NCIKNCJLFBI, 0)
def BKIKCJIAIIOAddCHGIONDFIKP(builder, CHGIONDFIKP): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(CHGIONDFIKP), 0)
def BKIKCJIAIIOStartCHGIONDFIKPVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BKIKCJIAIIOEnd(builder): return builder.EndObject()
