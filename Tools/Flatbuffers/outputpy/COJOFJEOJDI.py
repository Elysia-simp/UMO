# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class COJOFJEOJDI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCOJOFJEOJDI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = COJOFJEOJDI()
        x.Init(buf, n + offset)
        return x

    # COJOFJEOJDI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # COJOFJEOJDI
    def CIFKCEFLDDL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def DILIHLCAPFG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def FJDKDEDMHNI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def DLPCOLDNAKE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def BJOOHLLPCFK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def GKLHNNBMGKH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def CNLOBDLMAAP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def NJHACADNBPI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def OHAOECLAPEG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def JNAIKKGAEEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def HEBOLJILFOE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def JDKJPDKIEOA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # COJOFJEOJDI
    def EJHHKNOCLBN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def COJOFJEOJDIStart(builder): builder.StartObject(13)
def COJOFJEOJDIAddCIFKCEFLDDL(builder, CIFKCEFLDDL): builder.PrependUint32Slot(0, CIFKCEFLDDL, 0)
def COJOFJEOJDIAddDILIHLCAPFG(builder, DILIHLCAPFG): builder.PrependUint32Slot(1, DILIHLCAPFG, 0)
def COJOFJEOJDIAddFJDKDEDMHNI(builder, FJDKDEDMHNI): builder.PrependUint32Slot(2, FJDKDEDMHNI, 0)
def COJOFJEOJDIAddDLPCOLDNAKE(builder, DLPCOLDNAKE): builder.PrependUint32Slot(3, DLPCOLDNAKE, 0)
def COJOFJEOJDIAddBJOOHLLPCFK(builder, BJOOHLLPCFK): builder.PrependUint32Slot(4, BJOOHLLPCFK, 0)
def COJOFJEOJDIAddGKLHNNBMGKH(builder, GKLHNNBMGKH): builder.PrependUint32Slot(5, GKLHNNBMGKH, 0)
def COJOFJEOJDIAddCNLOBDLMAAP(builder, CNLOBDLMAAP): builder.PrependUint32Slot(6, CNLOBDLMAAP, 0)
def COJOFJEOJDIAddNJHACADNBPI(builder, NJHACADNBPI): builder.PrependUint32Slot(7, NJHACADNBPI, 0)
def COJOFJEOJDIAddOHAOECLAPEG(builder, OHAOECLAPEG): builder.PrependUint32Slot(8, OHAOECLAPEG, 0)
def COJOFJEOJDIAddJNAIKKGAEEE(builder, JNAIKKGAEEE): builder.PrependUint32Slot(9, JNAIKKGAEEE, 0)
def COJOFJEOJDIAddHEBOLJILFOE(builder, HEBOLJILFOE): builder.PrependUint32Slot(10, HEBOLJILFOE, 0)
def COJOFJEOJDIAddJDKJPDKIEOA(builder, JDKJPDKIEOA): builder.PrependUint32Slot(11, JDKJPDKIEOA, 0)
def COJOFJEOJDIAddEJHHKNOCLBN(builder, EJHHKNOCLBN): builder.PrependUint32Slot(12, EJHHKNOCLBN, 0)
def COJOFJEOJDIEnd(builder): return builder.EndObject()
