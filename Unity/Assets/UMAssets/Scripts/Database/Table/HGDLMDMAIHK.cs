// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class HGDLMDMAIHK : Table {
  public static HGDLMDMAIHK GetRootAsHGDLMDMAIHK(ByteBuffer _bb) { return GetRootAsHGDLMDMAIHK(_bb, new HGDLMDMAIHK()); }
  public static HGDLMDMAIHK GetRootAsHGDLMDMAIHK(ByteBuffer _bb, HGDLMDMAIHK obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public HGDLMDMAIHK __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public uint ODHNEFLOILP { get { int o = __offset(4); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public int ECEFNALDNGJ { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int DDCHBAJGIJL { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int PCIIMOPFEMG { get { int o = __offset(10); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int GGKNGDGKMIJ { get { int o = __offset(12); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public uint ONCBLMJHMKB { get { int o = __offset(14); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint GetLGMELGKMCBL(int j) { int o = __offset(16); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int LGMELGKMCBLLength { get { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLGMELGKMCBLBytes() { return __vector_as_arraysegment(16); }
  public int DGGPEONPMKA { get { int o = __offset(18); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<HGDLMDMAIHK> CreateHGDLMDMAIHK(FlatBufferBuilder builder,
      uint ODHNEFLOILP = 0,
      int ECEFNALDNGJ = 0,
      int DDCHBAJGIJL = 0,
      int PCIIMOPFEMG = 0,
      int GGKNGDGKMIJ = 0,
      uint ONCBLMJHMKB = 0,
      VectorOffset LGMELGKMCBLOffset = default(VectorOffset),
      int DGGPEONPMKA = 0) {
    builder.StartObject(8);
    HGDLMDMAIHK.AddDGGPEONPMKA(builder, DGGPEONPMKA);
    HGDLMDMAIHK.AddLGMELGKMCBL(builder, LGMELGKMCBLOffset);
    HGDLMDMAIHK.AddONCBLMJHMKB(builder, ONCBLMJHMKB);
    HGDLMDMAIHK.AddGGKNGDGKMIJ(builder, GGKNGDGKMIJ);
    HGDLMDMAIHK.AddPCIIMOPFEMG(builder, PCIIMOPFEMG);
    HGDLMDMAIHK.AddDDCHBAJGIJL(builder, DDCHBAJGIJL);
    HGDLMDMAIHK.AddECEFNALDNGJ(builder, ECEFNALDNGJ);
    HGDLMDMAIHK.AddODHNEFLOILP(builder, ODHNEFLOILP);
    return HGDLMDMAIHK.EndHGDLMDMAIHK(builder);
  }

  public static void StartHGDLMDMAIHK(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddODHNEFLOILP(FlatBufferBuilder builder, uint ODHNEFLOILP) { builder.AddUint(0, ODHNEFLOILP, 0); }
  public static void AddECEFNALDNGJ(FlatBufferBuilder builder, int ECEFNALDNGJ) { builder.AddInt(1, ECEFNALDNGJ, 0); }
  public static void AddDDCHBAJGIJL(FlatBufferBuilder builder, int DDCHBAJGIJL) { builder.AddInt(2, DDCHBAJGIJL, 0); }
  public static void AddPCIIMOPFEMG(FlatBufferBuilder builder, int PCIIMOPFEMG) { builder.AddInt(3, PCIIMOPFEMG, 0); }
  public static void AddGGKNGDGKMIJ(FlatBufferBuilder builder, int GGKNGDGKMIJ) { builder.AddInt(4, GGKNGDGKMIJ, 0); }
  public static void AddONCBLMJHMKB(FlatBufferBuilder builder, uint ONCBLMJHMKB) { builder.AddUint(5, ONCBLMJHMKB, 0); }
  public static void AddLGMELGKMCBL(FlatBufferBuilder builder, VectorOffset LGMELGKMCBLOffset) { builder.AddOffset(6, LGMELGKMCBLOffset.Value, 0); }
  public static VectorOffset CreateLGMELGKMCBLVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartLGMELGKMCBLVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDGGPEONPMKA(FlatBufferBuilder builder, int DGGPEONPMKA) { builder.AddInt(7, DGGPEONPMKA, 0); }
  public static Offset<HGDLMDMAIHK> EndHGDLMDMAIHK(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HGDLMDMAIHK>(o);
  }
};

