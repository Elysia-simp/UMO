// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class FFPCNIAALNN : Table {
  public static FFPCNIAALNN GetRootAsFFPCNIAALNN(ByteBuffer _bb) { return GetRootAsFFPCNIAALNN(_bb, new FFPCNIAALNN()); }
  public static FFPCNIAALNN GetRootAsFFPCNIAALNN(ByteBuffer _bb, FFPCNIAALNN obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public FFPCNIAALNN __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int BBPHAPFBFHK { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int GetCLGAMGOJHHH(int j) { int o = __offset(6); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int CLGAMGOJHHHLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCLGAMGOJHHHBytes() { return __vector_as_arraysegment(6); }
  public int LGEDAJAFHGG { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int GetBJHDJMNLEPP(int j) { int o = __offset(10); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int BJHDJMNLEPPLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBJHDJMNLEPPBytes() { return __vector_as_arraysegment(10); }
  public string GetIKDLGFEPPDB(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int IKDLGFEPPDBLength { get { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<FFPCNIAALNN> CreateFFPCNIAALNN(FlatBufferBuilder builder,
      int BBPHAPFBFHK = 0,
      VectorOffset CLGAMGOJHHHOffset = default(VectorOffset),
      int LGEDAJAFHGG = 0,
      VectorOffset BJHDJMNLEPPOffset = default(VectorOffset),
      VectorOffset IKDLGFEPPDBOffset = default(VectorOffset)) {
    builder.StartObject(5);
    FFPCNIAALNN.AddIKDLGFEPPDB(builder, IKDLGFEPPDBOffset);
    FFPCNIAALNN.AddBJHDJMNLEPP(builder, BJHDJMNLEPPOffset);
    FFPCNIAALNN.AddLGEDAJAFHGG(builder, LGEDAJAFHGG);
    FFPCNIAALNN.AddCLGAMGOJHHH(builder, CLGAMGOJHHHOffset);
    FFPCNIAALNN.AddBBPHAPFBFHK(builder, BBPHAPFBFHK);
    return FFPCNIAALNN.EndFFPCNIAALNN(builder);
  }

  public static void StartFFPCNIAALNN(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddBBPHAPFBFHK(FlatBufferBuilder builder, int BBPHAPFBFHK) { builder.AddInt(0, BBPHAPFBFHK, 0); }
  public static void AddCLGAMGOJHHH(FlatBufferBuilder builder, VectorOffset CLGAMGOJHHHOffset) { builder.AddOffset(1, CLGAMGOJHHHOffset.Value, 0); }
  public static VectorOffset CreateCLGAMGOJHHHVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCLGAMGOJHHHVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLGEDAJAFHGG(FlatBufferBuilder builder, int LGEDAJAFHGG) { builder.AddInt(2, LGEDAJAFHGG, 0); }
  public static void AddBJHDJMNLEPP(FlatBufferBuilder builder, VectorOffset BJHDJMNLEPPOffset) { builder.AddOffset(3, BJHDJMNLEPPOffset.Value, 0); }
  public static VectorOffset CreateBJHDJMNLEPPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBJHDJMNLEPPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIKDLGFEPPDB(FlatBufferBuilder builder, VectorOffset IKDLGFEPPDBOffset) { builder.AddOffset(4, IKDLGFEPPDBOffset.Value, 0); }
  public static VectorOffset CreateIKDLGFEPPDBVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIKDLGFEPPDBVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FFPCNIAALNN> EndFFPCNIAALNN(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FFPCNIAALNN>(o);
  }
};

