// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class JKIJAPMNHFJ : Table {
  public static JKIJAPMNHFJ GetRootAsJKIJAPMNHFJ(ByteBuffer _bb) { return GetRootAsJKIJAPMNHFJ(_bb, new JKIJAPMNHFJ()); }
  public static JKIJAPMNHFJ GetRootAsJKIJAPMNHFJ(ByteBuffer _bb, JKIJAPMNHFJ obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public JKIJAPMNHFJ __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public FDEDPMKCNLB GetECIELLPPMPP(int j) { return GetECIELLPPMPP(new FDEDPMKCNLB(), j); }
  public FDEDPMKCNLB GetECIELLPPMPP(FDEDPMKCNLB obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ECIELLPPMPPLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<JKIJAPMNHFJ> CreateJKIJAPMNHFJ(FlatBufferBuilder builder,
      VectorOffset ECIELLPPMPPOffset = default(VectorOffset)) {
    builder.StartObject(1);
    JKIJAPMNHFJ.AddECIELLPPMPP(builder, ECIELLPPMPPOffset);
    return JKIJAPMNHFJ.EndJKIJAPMNHFJ(builder);
  }

  public static void StartJKIJAPMNHFJ(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddECIELLPPMPP(FlatBufferBuilder builder, VectorOffset ECIELLPPMPPOffset) { builder.AddOffset(0, ECIELLPPMPPOffset.Value, 0); }
  public static VectorOffset CreateECIELLPPMPPVector(FlatBufferBuilder builder, Offset<FDEDPMKCNLB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartECIELLPPMPPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<JKIJAPMNHFJ> EndJKIJAPMNHFJ(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JKIJAPMNHFJ>(o);
  }
};

