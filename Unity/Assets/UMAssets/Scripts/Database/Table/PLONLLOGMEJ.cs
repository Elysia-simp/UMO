// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class PLONLLOGMEJ : Table {
  public static PLONLLOGMEJ GetRootAsPLONLLOGMEJ(ByteBuffer _bb) { return GetRootAsPLONLLOGMEJ(_bb, new PLONLLOGMEJ()); }
  public static PLONLLOGMEJ GetRootAsPLONLLOGMEJ(ByteBuffer _bb, PLONLLOGMEJ obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PLONLLOGMEJ __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public GEGKPJCPNJE GetJEEPKOLPINE(int j) { return GetJEEPKOLPINE(new GEGKPJCPNJE(), j); }
  public GEGKPJCPNJE GetJEEPKOLPINE(GEGKPJCPNJE obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int JEEPKOLPINELength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<PLONLLOGMEJ> CreatePLONLLOGMEJ(FlatBufferBuilder builder,
      VectorOffset JEEPKOLPINEOffset = default(VectorOffset)) {
    builder.StartObject(1);
    PLONLLOGMEJ.AddJEEPKOLPINE(builder, JEEPKOLPINEOffset);
    return PLONLLOGMEJ.EndPLONLLOGMEJ(builder);
  }

  public static void StartPLONLLOGMEJ(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddJEEPKOLPINE(FlatBufferBuilder builder, VectorOffset JEEPKOLPINEOffset) { builder.AddOffset(0, JEEPKOLPINEOffset.Value, 0); }
  public static VectorOffset CreateJEEPKOLPINEVector(FlatBufferBuilder builder, Offset<GEGKPJCPNJE>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartJEEPKOLPINEVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PLONLLOGMEJ> EndPLONLLOGMEJ(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PLONLLOGMEJ>(o);
  }
};

