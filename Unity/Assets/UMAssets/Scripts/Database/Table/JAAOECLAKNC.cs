// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class JAAOECLAKNC : Table {
  public static JAAOECLAKNC GetRootAsJAAOECLAKNC(ByteBuffer _bb) { return GetRootAsJAAOECLAKNC(_bb, new JAAOECLAKNC()); }
  public static JAAOECLAKNC GetRootAsJAAOECLAKNC(ByteBuffer _bb, JAAOECLAKNC obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public JAAOECLAKNC __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public FFPCNIAALNN GetIDNFMKCJFDG(int j) { return GetIDNFMKCJFDG(new FFPCNIAALNN(), j); }
  public FFPCNIAALNN GetIDNFMKCJFDG(FFPCNIAALNN obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int IDNFMKCJFDGLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<JAAOECLAKNC> CreateJAAOECLAKNC(FlatBufferBuilder builder,
      VectorOffset IDNFMKCJFDGOffset = default(VectorOffset)) {
    builder.StartObject(1);
    JAAOECLAKNC.AddIDNFMKCJFDG(builder, IDNFMKCJFDGOffset);
    return JAAOECLAKNC.EndJAAOECLAKNC(builder);
  }

  public static void StartJAAOECLAKNC(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIDNFMKCJFDG(FlatBufferBuilder builder, VectorOffset IDNFMKCJFDGOffset) { builder.AddOffset(0, IDNFMKCJFDGOffset.Value, 0); }
  public static VectorOffset CreateIDNFMKCJFDGVector(FlatBufferBuilder builder, Offset<FFPCNIAALNN>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIDNFMKCJFDGVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<JAAOECLAKNC> EndJAAOECLAKNC(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JAAOECLAKNC>(o);
  }
};

