// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class PCIPKGNLLBO : Table {
  public static PCIPKGNLLBO GetRootAsPCIPKGNLLBO(ByteBuffer _bb) { return GetRootAsPCIPKGNLLBO(_bb, new PCIPKGNLLBO()); }
  public static PCIPKGNLLBO GetRootAsPCIPKGNLLBO(ByteBuffer _bb, PCIPKGNLLBO obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PCIPKGNLLBO __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public NHPNFFMICJP GetNGOGEEKMLKN(int j) { return GetNGOGEEKMLKN(new NHPNFFMICJP(), j); }
  public NHPNFFMICJP GetNGOGEEKMLKN(NHPNFFMICJP obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int NGOGEEKMLKNLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<PCIPKGNLLBO> CreatePCIPKGNLLBO(FlatBufferBuilder builder,
      VectorOffset NGOGEEKMLKNOffset = default(VectorOffset)) {
    builder.StartObject(1);
    PCIPKGNLLBO.AddNGOGEEKMLKN(builder, NGOGEEKMLKNOffset);
    return PCIPKGNLLBO.EndPCIPKGNLLBO(builder);
  }

  public static void StartPCIPKGNLLBO(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNGOGEEKMLKN(FlatBufferBuilder builder, VectorOffset NGOGEEKMLKNOffset) { builder.AddOffset(0, NGOGEEKMLKNOffset.Value, 0); }
  public static VectorOffset CreateNGOGEEKMLKNVector(FlatBufferBuilder builder, Offset<NHPNFFMICJP>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNGOGEEKMLKNVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PCIPKGNLLBO> EndPCIPKGNLLBO(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PCIPKGNLLBO>(o);
  }
};

